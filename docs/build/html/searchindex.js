Search.setIndex({"alltitles": {"Acknowledgements": [[320, "acknowledgements"]], "Attributes": [[0, "attributes"], [23, "attributes"], [48, "attributes"], [98, "attributes"], [119, "attributes"], [130, "attributes"], [178, "attributes"], [233, "attributes"], [243, "attributes"], [253, "attributes"], [263, "attributes"], [284, "attributes"], [300, "attributes"]], "Citation": [[318, "citation"]], "Contents": [[320, "contents"]], "Contributing": [[320, "contributing"]], "Developers": [[321, "developers"], [321, "id3"]], "Examples": [[194, "examples"], [232, "examples"]], "History": [[319, "history"]], "Installation": [[321, "installation"]], "Installation via conda": [[321, "installation-via-conda"]], "Installation via pip": [[321, "installation-via-pip"]], "Journal paper": [[318, "journal-paper"]], "License": [[320, "license"]], "Notes": [[194, "notes"], [232, "notes"]], "Parameters": [[1, "parameters"], [3, "parameters"], [4, "parameters"], [5, "parameters"], [7, "parameters"], [8, "parameters"], [9, "parameters"], [10, "parameters"], [15, "parameters"], [16, "parameters"], [22, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [42, "parameters"], [43, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [55, "parameters"], [56, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [62, "parameters"], [63, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [70, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [99, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [108, "parameters"], [110, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [117, "parameters"], [118, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [124, "parameters"], [128, "parameters"], [129, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [136, "parameters"], [137, "parameters"], [139, "parameters"], [140, "parameters"], [143, "parameters"], [148, "parameters"], [149, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [158, "parameters"], [159, "parameters"], [160, "parameters"], [163, "parameters"], [164, "parameters"], [165, "parameters"], [168, "parameters"], [169, "parameters"], [170, "parameters"], [171, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [184, "parameters"], [185, "parameters"], [186, "parameters"], [187, "parameters"], [190, "parameters"], [191, "parameters"], [192, "parameters"], [194, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [203, "parameters"], [204, "parameters"], [205, "parameters"], [209, "parameters"], [210, "parameters"], [211, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [221, "parameters"], [222, "parameters"], [223, "parameters"], [227, "parameters"], [230, "parameters"], [232, "parameters"], [234, "parameters"], [235, "parameters"], [236, "parameters"], [237, "parameters"], [239, "parameters"], [244, "parameters"], [245, "parameters"], [246, "parameters"], [247, "parameters"], [249, "parameters"], [254, "parameters"], [255, "parameters"], [256, "parameters"], [257, "parameters"], [259, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [267, "parameters"], [270, "parameters"], [281, "parameters"], [282, "parameters"], [285, "parameters"], [286, "parameters"], [289, "parameters"], [294, "parameters"], [295, "parameters"], [296, "parameters"], [297, "parameters"], [306, "parameters"], [307, "parameters"], [309, "parameters"], [312, "parameters"], [313, "parameters"]], "Preparation (optional)": [[321, "preparation-optional"]], "Public members": [[0, "public-members"], [21, "public-members"], [23, "public-members"], [30, "public-members"], [41, "public-members"], [48, "public-members"], [92, "public-members"], [98, "public-members"], [119, "public-members"], [128, "public-members"], [130, "public-members"], [136, "public-members"], [138, "public-members"], [152, "public-members"], [157, "public-members"], [162, "public-members"], [167, "public-members"], [173, "public-members"], [178, "public-members"], [183, "public-members"], [189, "public-members"], [195, "public-members"], [202, "public-members"], [208, "public-members"], [214, "public-members"], [220, "public-members"], [226, "public-members"], [229, "public-members"], [233, "public-members"], [243, "public-members"], [253, "public-members"], [263, "public-members"], [277, "public-members"], [284, "public-members"], [300, "public-members"]], "Raises": [[194, "raises"], [232, "raises"]], "Returns": [[2, "returns"], [3, "returns"], [4, "returns"], [5, "returns"], [6, "returns"], [8, "returns"], [9, "returns"], [11, "returns"], [12, "returns"], [13, "returns"], [14, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [25, "returns"], [26, "returns"], [28, "returns"], [29, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [37, "returns"], [39, "returns"], [40, "returns"], [44, "returns"], [45, "returns"], [47, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [58, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [63, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [68, "returns"], [69, "returns"], [71, "returns"], [72, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [78, "returns"], [79, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [83, "returns"], [84, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [90, "returns"], [91, "returns"], [94, "returns"], [95, "returns"], [101, "returns"], [105, "returns"], [107, "returns"], [109, "returns"], [110, "returns"], [111, "returns"], [113, "returns"], [114, "returns"], [115, "returns"], [116, "returns"], [117, "returns"], [118, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [125, "returns"], [126, "returns"], [127, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [141, "returns"], [142, "returns"], [144, "returns"], [145, "returns"], [146, "returns"], [147, "returns"], [148, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [154, "returns"], [155, "returns"], [156, "returns"], [159, "returns"], [160, "returns"], [161, "returns"], [164, "returns"], [165, "returns"], [166, "returns"], [169, "returns"], [170, "returns"], [172, "returns"], [175, "returns"], [176, "returns"], [177, "returns"], [181, "returns"], [182, "returns"], [185, "returns"], [186, "returns"], [188, "returns"], [191, "returns"], [192, "returns"], [193, "returns"], [194, "returns"], [197, "returns"], [198, "returns"], [200, "returns"], [201, "returns"], [204, "returns"], [205, "returns"], [206, "returns"], [207, "returns"], [210, "returns"], [211, "returns"], [212, "returns"], [213, "returns"], [216, "returns"], [217, "returns"], [218, "returns"], [219, "returns"], [222, "returns"], [223, "returns"], [224, "returns"], [225, "returns"], [228, "returns"], [231, "returns"], [232, "returns"], [235, "returns"], [236, "returns"], [237, "returns"], [238, "returns"], [240, "returns"], [241, "returns"], [242, "returns"], [245, "returns"], [246, "returns"], [247, "returns"], [248, "returns"], [250, "returns"], [251, "returns"], [252, "returns"], [255, "returns"], [256, "returns"], [257, "returns"], [258, "returns"], [260, "returns"], [261, "returns"], [262, "returns"], [265, "returns"], [266, "returns"], [267, "returns"], [268, "returns"], [269, "returns"], [271, "returns"], [272, "returns"], [273, "returns"], [274, "returns"], [275, "returns"], [276, "returns"], [278, "returns"], [279, "returns"], [280, "returns"], [283, "returns"], [286, "returns"], [287, "returns"], [288, "returns"], [290, "returns"], [291, "returns"], [292, "returns"], [293, "returns"], [294, "returns"], [295, "returns"], [298, "returns"], [299, "returns"], [307, "returns"], [308, "returns"], [310, "returns"], [311, "returns"], [312, "returns"], [313, "returns"], [314, "returns"]], "Standard users": [[321, "standard-users"], [321, "id2"]], "Testing": [[322, "testing"]], "Version specific DOI": [[318, "version-specific-doi"]], "Virtual Python environment": [[321, "virtual-python-environment"], [321, "id1"]], "Welcome to foxes-opt": [[320, "welcome-to-foxes-opt"]], "foxes.opt": [[315, "foxes-opt"]], "foxes.opt.constraints": [[315, "foxes-opt-constraints"]], "foxes.opt.core": [[315, "foxes-opt-core"]], "foxes.opt.objectives": [[315, "foxes-opt-objectives"]], "foxes.opt.problems": [[315, "foxes-opt-problems"]], "foxes_opt.problems": [[316, "foxes-opt-problems"]], "foxes_opt.problems.layout": [[316, "foxes-opt-problems-layout"]], "foxes_opt.problems.layout.geom_layouts": [[316, "foxes-opt-problems-layout-geom-layouts"], [317, "foxes-opt-problems-layout-geom-layouts"]], "foxes_opt.problems.layout.geom_layouts.constraints": [[317, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes_opt.problems.layout.geom_layouts.objectives": [[317, "foxes-opt-problems-layout-geom-layouts-objectives"]], "v0.1": [[319, "v0-1"]], "v0.1.3": [[319, "v0-1-3"]]}, "docurls": ["_foxesopt/constraints/AreaGeometryConstraint.html", "_foxesopt/constraints/AreaGeometryConstraint.__init__.html", "_foxesopt/constraints/AreaGeometryConstraint.__str__.html", "_foxesopt/constraints/AreaGeometryConstraint.ana_deriv.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_population.html", "_foxesopt/constraints/AreaGeometryConstraint.component_names.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_population.html", "_foxesopt/constraints/AreaGeometryConstraint.initialize.html", "_foxesopt/constraints/AreaGeometryConstraint.initialized.html", "_foxesopt/constraints/AreaGeometryConstraint.n_components.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_float.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_int.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_float.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_int.html", "_foxesopt/constraints/FarmBoundaryConstraint.html", "_foxesopt/constraints/FarmBoundaryConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.html", "_foxesopt/constraints/MinDistConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.calc_individual.html", "_foxesopt/constraints/MinDistConstraint.calc_population.html", "_foxesopt/constraints/MinDistConstraint.initialize.html", "_foxesopt/constraints/MinDistConstraint.n_components.html", "_foxesopt/constraints/MinDistConstraint.vardeps_float.html", "_foxesopt/core/FarmConstraint.html", "_foxesopt/core/FarmConstraint.__init__.html", "_foxesopt/core/FarmConstraint.add_to_layout_figure.html", "_foxesopt/core/FarmConstraint.calc_individual.html", "_foxesopt/core/FarmConstraint.calc_population.html", "_foxesopt/core/FarmConstraint.farm.html", "_foxesopt/core/FarmConstraint.n_components.html", "_foxesopt/core/FarmConstraint.n_sel_turbines.html", "_foxesopt/core/FarmConstraint.print_models.html", "_foxesopt/core/FarmConstraint.sel_turbines.html", "_foxesopt/core/FarmConstraint.vardeps_float.html", "_foxesopt/core/FarmObjective.html", "_foxesopt/core/FarmObjective.__init__.html", "_foxesopt/core/FarmObjective.add_to_layout_figure.html", "_foxesopt/core/FarmObjective.farm.html", "_foxesopt/core/FarmObjective.n_sel_turbines.html", "_foxesopt/core/FarmObjective.print_models.html", "_foxesopt/core/FarmObjective.sel_turbines.html", "_foxesopt/core/FarmOptProblem.html", "_foxesopt/core/FarmOptProblem.INT_INF.html", "_foxesopt/core/FarmOptProblem.__init__.html", "_foxesopt/core/FarmOptProblem.add_constraint.html", "_foxesopt/core/FarmOptProblem.add_objective.html", "_foxesopt/core/FarmOptProblem.add_to_layout_figure.html", "_foxesopt/core/FarmOptProblem.all_turbines.html", "_foxesopt/core/FarmOptProblem.apply_individual.html", "_foxesopt/core/FarmOptProblem.apply_population.html", "_foxesopt/core/FarmOptProblem.calc_gradients.html", "_foxesopt/core/FarmOptProblem.check_constraints_individual.html", "_foxesopt/core/FarmOptProblem.check_constraints_population.html", "_foxesopt/core/FarmOptProblem.constraints_tol.html", "_foxesopt/core/FarmOptProblem.counter.html", "_foxesopt/core/FarmOptProblem.evaluate_individual.html", "_foxesopt/core/FarmOptProblem.evaluate_population.html", "_foxesopt/core/FarmOptProblem.farm.html", "_foxesopt/core/FarmOptProblem.finalize_individual.html", "_foxesopt/core/FarmOptProblem.finalize_population.html", "_foxesopt/core/FarmOptProblem.get_gradients.html", "_foxesopt/core/FarmOptProblem.initial_values_float.html", "_foxesopt/core/FarmOptProblem.initial_values_int.html", "_foxesopt/core/FarmOptProblem.initialize.html", "_foxesopt/core/FarmOptProblem.max_values_constraints.html", "_foxesopt/core/FarmOptProblem.max_values_float.html", "_foxesopt/core/FarmOptProblem.max_values_int.html", "_foxesopt/core/FarmOptProblem.maximize_objs.html", "_foxesopt/core/FarmOptProblem.min_values_constraints.html", "_foxesopt/core/FarmOptProblem.min_values_float.html", "_foxesopt/core/FarmOptProblem.min_values_int.html", "_foxesopt/core/FarmOptProblem.n_constraints.html", "_foxesopt/core/FarmOptProblem.n_objectives.html", "_foxesopt/core/FarmOptProblem.n_sel_turbines.html", "_foxesopt/core/FarmOptProblem.n_vars_float.html", "_foxesopt/core/FarmOptProblem.n_vars_int.html", "_foxesopt/core/FarmOptProblem.parse_tvar.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_individual.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_population.html", "_foxesopt/core/FarmOptProblem.sel_turbines.html", "_foxesopt/core/FarmOptProblem.tvar.html", "_foxesopt/core/FarmOptProblem.update_problem_individual.html", "_foxesopt/core/FarmOptProblem.update_problem_population.html", "_foxesopt/core/FarmOptProblem.var_names_float.html", "_foxesopt/core/FarmOptProblem.var_names_int.html", "_foxesopt/core/FarmVarsProblem.html", "_foxesopt/core/FarmVarsProblem.initialize.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_population.html", "_foxesopt/core/FarmVarsProblem.update_problem_individual.html", "_foxesopt/core/FarmVarsProblem.update_problem_population.html", "_foxesopt/core/PopStates.html", "_foxesopt/core/PopStates.__init__.html", "_foxesopt/core/PopStates.__repr__.html", "_foxesopt/core/PopStates.calculate.html", "_foxesopt/core/PopStates.data_to_store.html", "_foxesopt/core/PopStates.ensure_variables.html", "_foxesopt/core/PopStates.finalize.html", "_foxesopt/core/PopStates.from_data_or_store.html", "_foxesopt/core/PopStates.get_data.html", "_foxesopt/core/PopStates.index.html", "_foxesopt/core/PopStates.initialize.html", "_foxesopt/core/PopStates.initialized.html", "_foxesopt/core/PopStates.load_data.html", "_foxesopt/core/PopStates.model_id.html", "_foxesopt/core/PopStates.new.html", "_foxesopt/core/PopStates.output_point_vars.html", "_foxesopt/core/PopStates.run_calculation.html", "_foxesopt/core/PopStates.size.html", "_foxesopt/core/PopStates.sub_models.html", "_foxesopt/core/PopStates.var.html", "_foxesopt/core/PopStates.weights.html", "_foxesopt/objectives/FarmVarObjective.html", "_foxesopt/objectives/FarmVarObjective.__init__.html", "_foxesopt/objectives/FarmVarObjective.calc_individual.html", "_foxesopt/objectives/FarmVarObjective.calc_population.html", "_foxesopt/objectives/FarmVarObjective.finalize_individual.html", "_foxesopt/objectives/FarmVarObjective.initialize.html", "_foxesopt/objectives/FarmVarObjective.maximize.html", "_foxesopt/objectives/FarmVarObjective.n_components.html", "_foxesopt/objectives/FarmVarObjective.vardeps_float.html", "_foxesopt/objectives/MaxFarmPower.html", "_foxesopt/objectives/MaxFarmPower.__init__.html", "_foxesopt/objectives/MaxNTurbines.html", "_foxesopt/objectives/MaxNTurbines.__init__.html", "_foxesopt/objectives/MaxNTurbines.calc_individual.html", "_foxesopt/objectives/MaxNTurbines.calc_population.html", "_foxesopt/objectives/MaxNTurbines.maximize.html", "_foxesopt/objectives/MaxNTurbines.n_components.html", "_foxesopt/objectives/MinimalMaxTI.html", "_foxesopt/objectives/MinimalMaxTI.__init__.html", "_foxesopt/problems/OptFarmVars.html", "_foxesopt/problems/OptFarmVars.__init__.html", "_foxesopt/problems/OptFarmVars.add_var.html", "_foxesopt/problems/OptFarmVars.initial_values_float.html", "_foxesopt/problems/OptFarmVars.initial_values_int.html", "_foxesopt/problems/OptFarmVars.initialize.html", "_foxesopt/problems/OptFarmVars.max_values_float.html", "_foxesopt/problems/OptFarmVars.max_values_int.html", "_foxesopt/problems/OptFarmVars.min_values_float.html", "_foxesopt/problems/OptFarmVars.min_values_int.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_individual.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_population.html", "_foxesopt/problems/OptFarmVars.var_names_float.html", "_foxesopt/problems/OptFarmVars.var_names_int.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintscdist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivescdist.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "api.html", "api_problems.html", "api_problems_geom.html", "citation.html", "history.html", "index.html", "installation.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"foxes_opt.constraints": [[0, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [21, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [23, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes_opt.constraints.AreaGeometryConstraint": [[1, 1, 1, "", "__init__", "Constructor."], [2, 1, 1, "", "__str__", "Get info string"], [3, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [4, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [5, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [6, 2, 1, "", "component_names", "The names of the components"], [7, 1, 1, "", "finalize", "Finalize the object."], [8, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [9, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [10, 1, 1, "", "initialize", "Initialize the object."], [11, 2, 1, "", "initialized", "Flag for finished initialization"], [12, 1, 1, "", "n_components", "Returns the number of components of the function."], [13, 2, 1, "", "n_vars_float", "The number of float variables"], [14, 2, 1, "", "n_vars_int", "The number of int variables"], [15, 1, 1, "", "rename_vars_float", "Rename float variables."], [16, 1, 1, "", "rename_vars_int", "Rename integer variables."], [17, 2, 1, "", "var_names_float", "The names of the float variables"], [18, 2, 1, "", "var_names_int", "The names of the integer variables"], [19, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [20, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes_opt.constraints.FarmBoundaryConstraint": [[22, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.constraints.MinDistConstraint": [[24, 1, 1, "", "__init__", "Constructor."], [25, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [26, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [27, 1, 1, "", "initialize", "Initialize the constaint."], [28, 1, 1, "", "n_components", "Returns the number of components of the function."], [29, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.core": [[30, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [41, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [48, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [92, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [98, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes_opt.core.FarmConstraint": [[31, 1, 1, "", "__init__", "Constructor."], [32, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [33, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [34, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [35, 2, 1, "", "farm", "The wind farm"], [36, 1, 1, "", "n_components", "Returns the number of components of the function."], [37, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [38, 1, 1, "", "print_models", "Prints all model names."], [39, 2, 1, "", "sel_turbines", "The list of selected turbines"], [40, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.core.FarmObjective": [[42, 1, 1, "", "__init__", "Constraints."], [43, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [44, 2, 1, "", "farm", "The wind farm"], [45, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [46, 1, 1, "", "print_models", "Prints all model names."], [47, 2, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes_opt.core.FarmOptProblem": [[49, 3, 1, "", "INT_INF", ""], [50, 1, 1, "", "__init__", "Constructor."], [51, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [52, 1, 1, "", "add_objective", "Add an objective to the problem."], [53, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [54, 2, 1, "", "all_turbines", "Flag for all turbines optimization"], [55, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [56, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [57, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [59, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [60, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [61, 2, 1, "", "counter", "The current value of the application counter"], [62, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [63, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [64, 2, 1, "", "farm", "The wind farm"], [65, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [66, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [67, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [68, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [69, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [70, 1, 1, "", "initialize", "Initialize the object."], [71, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [72, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [73, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [74, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [75, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [76, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [77, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [78, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [79, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [80, 2, 1, "", "n_sel_turbines", "The numer of selected turbines"], [81, 2, 1, "", "n_vars_float", "The number of float variables"], [82, 2, 1, "", "n_vars_int", "The number of int variables"], [83, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [84, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [85, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [86, 2, 1, "", "sel_turbines", "The selected turbines"], [87, 1, 1, "", "tvar", "Gets turbine variable name"], [88, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [89, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [90, 1, 1, "", "var_names_float", "The names of float variables."], [91, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes_opt.core.FarmVarsProblem": [[93, 1, 1, "", "initialize", "Initialize the object."], [94, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [95, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [96, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [97, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.PopStates": [[99, 1, 1, "", "__init__", "Constructor."], [100, 1, 1, "", "__repr__", "Return repr(self)."], [101, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [102, 1, 1, "", "data_to_store", "Adds data from mdata to the local store, intended for iterative runs."], [103, 1, 1, "", "ensure_variables", "Add variables to tdata, initialized with NaN"], [104, 1, 1, "", "finalize", "Finalizes the model."], [105, 1, 1, "", "from_data_or_store", "Get data from mdata or local store"], [106, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [107, 1, 1, "", "index", "The index list"], [108, 1, 1, "", "initialize", "Initializes the model."], [109, 2, 1, "", "initialized", "Initialization flag."], [110, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [111, 2, 1, "", "model_id", "Unique id based on the model type."], [112, 1, 1, "", "new", "Run-time states factory."], [113, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [114, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [115, 1, 1, "", "size", "The total number of states."], [116, 1, 1, "", "sub_models", "List of all sub-models"], [117, 1, 1, "", "var", "Creates a model specific variable name."], [118, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes_opt.objectives": [[119, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [128, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [130, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [136, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes_opt.objectives.FarmVarObjective": [[120, 1, 1, "", "__init__", "Constructor."], [121, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [122, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [123, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [124, 1, 1, "", "initialize", "Initialize the object."], [125, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [126, 1, 1, "", "n_components", "Returns the number of components of the function."], [127, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.objectives.MaxFarmPower": [[129, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.objectives.MaxNTurbines": [[131, 1, 1, "", "__init__", "Constructor."], [132, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [133, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [134, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [135, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.objectives.MinimalMaxTI": [[137, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.problems": [[138, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes_opt.problems.OptFarmVars": [[139, 1, 1, "", "__init__", "Constructor."], [140, 1, 1, "", "add_var", "Add a variable."], [141, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [142, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [143, 1, 1, "", "initialize", "Initialize the object."], [144, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [145, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [146, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [147, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [148, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [149, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [150, 1, 1, "", "var_names_float", "The names of float variables."], [151, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout": [[277, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [284, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [300, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes_opt.problems.layout.FarmLayoutOptProblem": [[278, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [279, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [280, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [281, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [282, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [283, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem": [[285, 1, 1, "", "__init__", "Constraints."], [286, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [287, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [288, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [289, 1, 1, "", "initialize", "Initialize the object."], [290, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [291, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [292, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [293, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [294, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [295, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [296, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [297, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [298, 1, 1, "", "var_names_float", "The names of float variables."], [299, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.RegularLayoutOptProblem": [[301, 3, 1, "", "ANGLE", ""], [302, 3, 1, "", "OFFSET_X", ""], [303, 3, 1, "", "OFFSET_Y", ""], [304, 3, 1, "", "SPACING_X", ""], [305, 3, 1, "", "SPACING_Y", ""], [306, 1, 1, "", "__init__", "Constructor."], [307, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [308, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [309, 1, 1, "", "initialize", "Initialize the object."], [310, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [311, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [312, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [313, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [314, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts": [[233, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [243, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [253, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [263, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout": [[234, 1, 1, "", "__init__", "Constructor."], [235, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [236, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [237, 1, 1, "", "get_fig", "Return plotly figure axis."], [238, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [239, 1, 1, "", "initialize", "Initialize the object."], [240, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [241, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [242, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded": [[244, 1, 1, "", "__init__", "Constructor."], [245, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [246, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [247, 1, 1, "", "get_fig", "Return plotly figure axis."], [248, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [249, 1, 1, "", "initialize", "Initialize the object."], [250, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [251, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [252, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid": [[254, 1, 1, "", "__init__", "Constructor."], [255, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [256, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [257, 1, 1, "", "get_fig", "Return plotly figure axis."], [258, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [259, 1, 1, "", "initialize", "Initialize the object."], [260, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [261, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [262, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids": [[264, 1, 1, "", "__init__", "Constructor."], [265, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [266, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [267, 1, 1, "", "get_fig", "Return plotly figure axis."], [268, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [269, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [270, 1, 1, "", "initialize", "Initialize the object."], [271, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [272, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [273, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [274, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [275, 1, 1, "", "var_names_float", "The names of float variables."], [276, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.constraints": [[152, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [157, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [162, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [167, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [173, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [178, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [183, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [189, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [194, 4, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary": [[153, 1, 1, "", "__init__", "Constructor."], [154, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [155, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [156, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN": [[158, 1, 1, "", "__init__", "Constructor."], [159, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [160, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [161, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN": [[163, 1, 1, "", "__init__", "Constructor."], [164, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [165, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [166, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity": [[168, 1, 1, "", "__init__", "Constructor."], [169, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [170, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [171, 1, 1, "", "initialize", "Initialize the object."], [172, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN": [[174, 1, 1, "", "__init__", "Constructor"], [175, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [176, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [177, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint": [[179, 1, 1, "", "__init__", "Constructor"], [180, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [181, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [182, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist": [[184, 1, 1, "", "__init__", "Constructor."], [185, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [186, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [187, 1, 1, "", "initialize", "Initialize the constaint."], [188, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid": [[190, 1, 1, "", "__init__", "Constructor."], [191, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [192, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [193, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives": [[195, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [202, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [208, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [214, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [220, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [226, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [229, 0, 1, "", "Objective", "Abstract base class for objective functions."], [232, 4, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity": [[196, 1, 1, "", "__init__", "Constructor."], [197, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [198, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [199, 1, 1, "", "initialize", "Initialize the object."], [200, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [201, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[203, 1, 1, "", "__init__", "Constructor."], [204, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [205, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [206, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [207, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[209, 1, 1, "", "__init__", "Constructor."], [210, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [211, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [212, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [213, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN": [[215, 1, 1, "", "__init__", "Constructor."], [216, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [217, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [218, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [219, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN": [[221, 1, 1, "", "__init__", "Constructor."], [222, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [223, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [224, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [225, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMinN": [[227, 1, 1, "", "__init__", "Constructor."], [228, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective": [[230, 1, 1, "", "__init__", "Constructor"], [231, 1, 1, "", "maximize", "Returns flag for maximization of each component."]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function"}, "terms": {"": [50, 57, 67, 98, 106, 114, 285, 306], "0": [0, 7, 8, 9, 10, 21, 23, 27, 30, 41, 48, 51, 52, 57, 58, 59, 65, 66, 67, 70, 92, 93, 98, 104, 108, 110, 119, 120, 123, 124, 128, 130, 136, 138, 143, 152, 157, 162, 167, 171, 173, 178, 180, 181, 183, 187, 189, 194, 195, 199, 202, 208, 209, 214, 220, 226, 229, 232, 233, 239, 243, 249, 253, 259, 263, 270, 277, 284, 286, 289, 300, 307, 309], "0325397b": 320, "0325851b": 320, "03ee3008a": 320, "03sf0635": 320, "0456": [194, 232], "05": [178, 179], "05464": 318, "0893": [194, 232], "1": [8, 9, 48, 65, 70, 92, 93, 106, 120, 123, 138, 143, 167, 168, 194, 195, 196, 208, 209, 232, 233, 239, 243, 249, 253, 259, 263, 270, 277, 284, 285, 286, 289, 300, 307, 309], "10": [318, 321], "101084205": 320, "11": 321, "1174": [194, 232], "12": 321, "1667": [194, 232], "1e": [178, 179], "2": [194, 232, 237, 247, 257, 267], "2023": 318, "21105": 318, "2672": [194, 232], "3": [48, 50, 194, 232, 321], "35": [194, 232], "3561": [194, 232], "36": [194, 232], "4": [194, 232], "5": [194, 232], "500": [208, 209], "5464": 318, "6": [194, 232], "6172": [194, 232], "7": [194, 232], "7044": [194, 232], "7833": [194, 232], "8": [318, 321], "83": [194, 232], "8477": [194, 232], "85": [194, 232], "86": [194, 232, 318], "8856": [194, 232], "89": [194, 232], "9": [194, 232, 321], "9422": [194, 232], "9711": [194, 232], "9728": [194, 232], "999999": [48, 49, 92, 138, 233, 243, 253, 263, 277, 284, 300], "A": [194, 232, 233, 243, 253, 263, 317], "As": 321, "By": 67, "For": [194, 232, 321, 322], "If": [93, 194, 230, 232], "It": 321, "Such": 110, "The": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 320, 321, 322], "Then": 321, "To": [194, 232], "_2": [194, 232], "__repr__": [98, 100], "__str__": [0, 2, 21, 23, 30, 41, 48, 92, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "_p": [194, 232], "abov": [320, 321], "abstract": [30, 36, 41, 48, 92, 94, 95, 178, 229, 231, 315], "accept_nan": 106, "accept_non": 106, "action": 320, "activ": 321, "actual": [48, 57, 92, 138, 233, 243, 253, 263, 277, 284, 300, 321], "ad": [67, 140, 319, 321], "add": [0, 21, 23, 30, 32, 41, 43, 48, 51, 52, 53, 92, 98, 102, 103, 119, 128, 130, 136, 138, 140, 233, 243, 253, 263, 277, 284, 300], "add_constraint": [48, 51, 92, 138, 233, 243, 253, 263, 277, 284, 300], "add_object": [48, 52, 92, 138, 233, 243, 253, 263, 277, 284, 300], "add_to_layout_figur": [0, 21, 23, 30, 32, 41, 43, 48, 53, 92, 119, 128, 130, 136, 138, 277, 284, 300], "add_var": [138, 140], "addit": [1, 22, 24, 31, 42, 48, 50, 93, 112, 114, 120, 128, 129, 131, 136, 137, 143, 285, 289, 306, 309], "additio": [153, 158, 163, 168, 184, 190], "addition": [62, 63], "affair": 320, "again": 321, "algo": [48, 50, 88, 89, 92, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 118, 138, 277, 281, 282, 284, 285, 296, 297, 300, 306], "algorithm": [48, 50, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 118, 285, 306], "all": [0, 3, 4, 5, 19, 20, 21, 23, 25, 26, 29, 30, 33, 34, 38, 40, 41, 46, 48, 50, 54, 57, 63, 67, 78, 79, 92, 98, 101, 110, 116, 118, 119, 120, 121, 122, 127, 128, 129, 130, 132, 133, 136, 137, 138, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 182, 183, 185, 186, 189, 191, 192, 194, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 232, 233, 243, 253, 263, 277, 284, 300, 318, 320, 321], "all_turbin": [48, 54, 92, 138, 277, 284, 300], "altern": 321, "am": 320, "an": [48, 52, 92, 106, 138, 194, 232, 233, 243, 253, 263, 277, 284, 300], "ana_deriv": [0, 3, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "analyt": [0, 3, 21, 23, 30, 41, 57, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "angl": [300, 301], "ani": [4, 5, 8, 9, 25, 26, 33, 34, 55, 56, 65, 66, 121, 122, 123, 132, 133, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 185, 186, 191, 192, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 235, 236, 245, 246, 255, 256, 265, 266, 286, 307, 321], "api": [], "appli": [48, 55, 56, 92, 138, 140, 194, 232, 233, 235, 236, 243, 245, 246, 253, 255, 256, 263, 265, 266, 277, 284, 300], "applic": [4, 5, 8, 9, 25, 26, 33, 34, 48, 55, 56, 61, 65, 66, 92, 121, 122, 123, 132, 133, 138, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 185, 186, 191, 192, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 235, 236, 245, 246, 255, 256, 265, 266, 277, 284, 286, 300, 307], "apply_individu": [48, 55, 92, 138, 233, 235, 243, 245, 253, 255, 263, 265, 277, 284, 300], "apply_popul": [48, 56, 92, 138, 233, 236, 243, 246, 253, 256, 263, 266, 277, 284, 300], "apply_ufunc": [98, 114], "ar": [0, 21, 23, 30, 48, 54, 57, 58, 59, 67, 92, 98, 113, 138, 140, 152, 157, 162, 167, 173, 178, 180, 181, 182, 183, 189, 194, 232, 233, 243, 253, 263, 277, 284, 300, 316, 317, 320, 321, 322], "area": [0, 1, 315], "areageometri": [0, 1, 233, 234, 243, 244, 253, 254, 263, 264], "areageometryconstraint": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 315], "arg": [98, 112, 138, 139, 178, 179], "argument": [114, 139, 194, 232, 237, 247, 257, 267], "ariti": [194, 232], "arrai": [3, 4, 5, 8, 9, 25, 26, 33, 34, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 88, 89, 96, 97, 101, 121, 122, 123, 125, 132, 133, 134, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 180, 181, 182, 185, 186, 191, 192, 194, 197, 198, 200, 204, 205, 206, 210, 211, 212, 216, 217, 218, 222, 223, 224, 228, 231, 232, 235, 236, 237, 245, 246, 247, 255, 256, 257, 265, 266, 267, 281, 282, 286, 296, 297, 307], "arrang": [194, 232], "array_lik": [107, 194, 232], "articl": 318, "artifici": [98, 315], "assum": 230, "atmospher": 320, "author": 318, "automat": [110, 194, 232], "avail": 321, "avoid": [194, 232], "awesom": 320, "ax": [0, 21, 23, 30, 32, 41, 43, 48, 53, 92, 119, 128, 130, 136, 138, 233, 237, 243, 247, 253, 257, 263, 267, 277, 284, 300], "axi": [32, 43, 53, 194, 232, 233, 237, 243, 247, 253, 257, 263, 267], "b": [194, 232, 320], "background": [243, 244, 317], "bar": [194, 232, 237, 247, 257, 267], "barg": [237, 247, 257, 267], "base": [30, 41, 48, 57, 92, 98, 101, 111, 119, 153, 158, 163, 168, 178, 184, 190, 229, 315, 320, 321], "been": [11, 109, 320], "befor": [88, 89, 96, 97, 130, 131, 140, 281, 282, 296, 297], "being": [67, 98, 113, 194, 232], "below": 321, "bernhard": 318, "between": [184, 194, 232, 233, 234, 243, 244, 253, 254, 263, 264, 285], "bibtex": 318, "bin": 321, "block": [194, 232], "bmbf": 320, "bmwk": 320, "bool": [0, 1, 11, 19, 20, 29, 40, 54, 57, 62, 63, 67, 105, 106, 109, 119, 120, 125, 127, 129, 130, 131, 134, 137, 140, 200, 206, 212, 218, 224, 228, 231, 233, 234, 237, 247, 257, 267], "boolean": [58, 59, 74, 180, 181, 194, 232, 237, 247, 257, 267], "both": 284, "bound": [0, 21, 23, 30, 152, 157, 162, 167, 173, 178, 182, 183, 189], "boundari": [0, 1, 21, 22, 152, 153, 154, 155, 156, 233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267, 315, 317], "brai": [194, 232], "branch": [320, 321], "braycurti": [194, 232], "build": 321, "c": [194, 232, 321], "c1": [208, 209], "c2": [208, 209], "c3": [208, 209], "calc_farm": [48, 50], "calc_farm_arg": [48, 50], "calc_gradi": [48, 57, 92, 138, 233, 243, 253, 263, 277, 284, 300], "calc_individu": [0, 4, 21, 23, 25, 30, 33, 41, 119, 121, 128, 130, 132, 136, 152, 154, 157, 159, 162, 164, 167, 169, 173, 175, 178, 183, 185, 189, 191, 195, 197, 202, 204, 208, 210, 214, 216, 220, 222, 226, 229], "calc_par": [98, 114], "calc_popul": [0, 5, 21, 23, 26, 30, 34, 41, 119, 122, 128, 130, 133, 136, 152, 155, 157, 160, 162, 165, 167, 170, 173, 176, 178, 183, 186, 189, 192, 195, 198, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229], "calc_valid": [233, 234], "calcul": [0, 3, 4, 5, 21, 23, 25, 26, 30, 33, 34, 41, 48, 57, 67, 84, 85, 88, 89, 92, 96, 97, 98, 101, 103, 104, 108, 110, 113, 114, 118, 119, 121, 122, 128, 130, 132, 133, 136, 138, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 194, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 232, 233, 243, 253, 263, 277, 281, 282, 284, 296, 297, 300, 315], "call": [48, 57, 88, 89, 92, 96, 97, 114, 138, 194, 232, 233, 243, 253, 263, 277, 281, 282, 284, 296, 297, 300, 321], "callabl": [194, 232], "can": [57, 140, 194, 232, 315, 318, 321], "canberra": [194, 232], "cannot": 3, "cd": [321, 322], "cdist": [194, 232], "cdot": [194, 232], "cf": 67, "cfixn": [157, 158, 159, 160, 161, 317], "champion": [0, 8, 21, 23, 30, 41, 48, 65, 92, 119, 123, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 286, 300, 307], "chang": [320, 321], "changelog": 319, "channel": 321, "chebyshev": [194, 232], "check": [0, 21, 23, 30, 48, 58, 59, 92, 130, 131, 138, 152, 157, 162, 167, 173, 178, 180, 181, 183, 189, 233, 243, 253, 263, 277, 284, 300], "check_constraints_individu": [48, 58, 92, 138, 233, 243, 253, 263, 277, 284, 300], "check_constraints_popul": [48, 59, 92, 138, 233, 243, 253, 263, 277, 284, 300], "check_individu": [0, 21, 23, 30, 152, 157, 162, 167, 173, 178, 180, 183, 189], "check_popul": [0, 21, 23, 30, 152, 157, 162, 167, 173, 178, 181, 183, 189], "check_valid": [130, 131], "checkout": 320, "choic": 140, "choos": [194, 232, 321], "chunk": [98, 101, 110], "circl": [233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267], "citat": 320, "cite": 318, "citi": [194, 232], "cityblock": [194, 232], "class": [0, 21, 23, 30, 41, 48, 57, 67, 92, 93, 98, 112, 119, 128, 130, 136, 138, 143, 152, 153, 157, 158, 162, 163, 167, 168, 173, 178, 183, 184, 189, 190, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 289, 300, 309, 315, 316, 317], "classmethod": [0, 21, 23, 30, 38, 41, 46, 48, 83, 87, 92, 98, 112, 119, 128, 130, 136, 138, 277, 284, 300], "climat": 320, "clone": [321, 322], "cma": 71, "cmaxn": [162, 163, 164, 165, 166, 317], "cmi": 75, "cmindens": [167, 168, 169, 170, 171, 172, 317], "cminn": [173, 174, 175, 176, 177, 317], "cmpnt": [152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226], "cname": 230, "code": [319, 320, 321], "coeff": [48, 84, 85, 92, 138, 233, 243, 253, 263, 277, 284, 300], "coeffici": [84, 85], "collect": [194, 232], "column": [194, 232], "com": [319, 320, 321, 322], "combin": 106, "command": 321, "commit": [319, 320], "common": [194, 232], "compon": [0, 3, 4, 5, 6, 8, 9, 12, 19, 20, 21, 23, 25, 26, 28, 29, 30, 33, 34, 36, 40, 41, 48, 57, 67, 78, 79, 92, 119, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 138, 152, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 177, 178, 182, 183, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 243, 253, 263, 277, 284, 300], "component_nam": [0, 6, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "comput": [101, 194, 232], "con": [62, 63, 65, 66, 286, 307], "concern": 321, "conda": 320, "condit": [0, 1], "config": 321, "consid": [57, 67], "constaint": [23, 27, 183, 187], "constrain": [0, 21, 315], "constraint": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 48, 51, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 75, 78, 92, 138, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 203, 209, 215, 221, 227, 233, 243, 253, 263, 277, 284, 285, 286, 300, 307], "constraint_valu": [0, 21, 23, 30, 48, 58, 59, 92, 138, 152, 157, 162, 167, 173, 178, 180, 181, 183, 189, 233, 243, 253, 263, 277, 284, 300], "constraints_tol": [48, 60, 92, 138, 233, 243, 253, 263, 277, 284, 300], "constructor": [0, 1, 21, 22, 23, 24, 30, 31, 48, 50, 92, 98, 99, 112, 119, 120, 128, 129, 130, 131, 136, 137, 138, 139, 152, 153, 157, 158, 162, 163, 167, 168, 173, 174, 178, 179, 183, 184, 189, 190, 195, 196, 202, 203, 208, 209, 214, 215, 220, 221, 226, 227, 229, 230, 233, 234, 243, 244, 253, 254, 263, 264, 277, 300, 306], "contain": [67, 315], "contract": [119, 120, 129, 137], "contract_st": [119, 120, 129, 137], "contract_turbin": [120, 129, 137], "conveni": 321, "convent": [194, 232], "convert": [194, 232], "coord": [110, 194, 232], "coordin": [119, 194, 232, 237, 247, 257, 267], "copi": 319, "core": [0, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 130, 138, 178, 229, 233, 243, 253, 263, 277, 284, 285, 300, 306, 316, 317], "corner": [194, 232], "correl": [194, 232], "correspond": 321, "cosin": [194, 232], "could": [194, 232], "count": [130, 131], "counter": [48, 61, 92, 138, 277, 284, 300], "cov": [194, 232], "covari": [194, 232], "creat": [98, 110, 117, 140, 320, 321], "ctol": 60, "cube": [194, 232], "current": [48, 61, 92, 138, 277, 284, 300], "curti": [194, 232], "d": [0, 1, 23, 24, 152, 153, 194, 232, 233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267], "data": [0, 8, 9, 21, 23, 30, 41, 48, 65, 66, 88, 89, 92, 96, 97, 98, 101, 102, 103, 105, 106, 110, 114, 119, 123, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 281, 282, 284, 286, 296, 297, 300, 307], "data_ndarrai": 110, "data_prio": 106, "data_to_stor": [98, 102], "data_var": 110, "dataset": 114, "ddof": [194, 232], "deactiv": 321, "decid": 321, "default": [67, 107, 194, 230, 232, 321], "defin": [194, 232, 233, 243, 317], "delta": [168, 196], "densiti": [167, 168, 195, 317], "dep": [19, 20, 29, 40, 119, 120, 127, 129, 137], "depend": [0, 19, 20, 21, 23, 29, 30, 40, 41, 119, 120, 127, 128, 129, 130, 136, 137, 140, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 230, 321, 322], "deriv": [0, 3, 21, 23, 30, 41, 57, 67, 112, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "describ": 321, "descript": 315, "dev": 321, "develop": 320, "dfactor": [167, 168, 195, 196], "diamet": [153, 233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267], "dice": [194, 232], "dict": [1, 15, 16, 22, 24, 31, 42, 48, 50, 51, 52, 93, 94, 95, 101, 110, 112, 114, 119, 120, 128, 129, 131, 136, 137, 139, 143, 148, 149, 153, 158, 163, 168, 184, 190, 194, 232, 237, 247, 257, 267, 285, 289, 294, 295, 306, 309, 312, 313], "diff": 209, "differenti": [3, 57, 67], "dim": 105, "dim_arrai": 110, "dim_name_str": 110, "dim_tupl": 110, "dimens": [105, 106], "dimension": [194, 232], "directli": [48, 57, 92, 138, 233, 243, 253, 263, 277, 284, 300], "disagre": [194, 232], "disc": [0, 1], "disc_insid": [0, 1], "dist": [24, 194, 232], "distanc": [23, 24, 183, 184, 194, 196, 208, 209, 232, 233, 234, 243, 244, 253, 254, 263, 264, 285, 315, 317], "diverg": [194, 232], "dm": [194, 232], "do": [106, 194, 232], "document": [194, 232, 315, 319], "doe": [233, 243, 253, 263], "doi": 320, "done": 11, "dot": [194, 232], "downwind": 106, "downwind_index": 106, "draw": [237, 247, 257, 267], "dure": 110, "d\u00f6renk\u00e4mper": 318, "e": [48, 78, 79, 92, 138, 194, 232, 233, 243, 253, 263, 277, 284, 300, 321, 322], "each": [41, 119, 125, 128, 130, 134, 136, 194, 195, 200, 202, 206, 208, 212, 214, 218, 220, 224, 226, 228, 229, 231, 232], "econom": 320, "educ": 320, "effect": [316, 317], "effici": [194, 232], "egg": 321, "einsum": [48, 84, 85, 92, 138, 233, 243, 253, 263, 277, 284, 300], "either": [23, 24, 140], "element": [194, 232], "energi": 320, "ensur": [0, 1, 106], "ensure_vari": [98, 103], "enter": 106, "entri": [98, 106, 110, 194, 232], "error": [105, 106], "euclidean": [194, 232], "europ": 320, "evalu": [48, 62, 63, 92, 138, 233, 234, 243, 253, 263, 277, 284, 300, 316, 317, 318, 320], "evaluate_individu": [48, 62, 92, 138, 233, 243, 253, 263, 277, 284, 300], "evaluate_popul": [48, 63, 92, 138, 233, 243, 253, 263, 277, 284, 300], "everi": 321, "exactli": 110, "exampl": 321, "except": [194, 232], "execut": [101, 321], "exist": 182, "express": 182, "extend": [318, 320], "extern": 315, "extra": [194, 232], "f": [106, 194, 232], "factor": [119, 120, 129, 137, 168, 196], "factori": [98, 112], "fals": [1, 48, 57, 62, 63, 67, 92, 98, 105, 106, 138, 140, 233, 243, 253, 263, 277, 284, 300], "farm": [0, 21, 23, 30, 35, 41, 44, 48, 64, 88, 89, 92, 93, 94, 95, 96, 97, 101, 103, 106, 119, 128, 130, 136, 138, 140, 148, 149, 233, 243, 253, 263, 277, 281, 282, 284, 294, 295, 296, 297, 300, 312, 313, 315, 316, 318, 320], "farm_var": [94, 95, 148, 149, 294, 295, 312, 313], "farmboundaryconstraint": [21, 22, 315], "farmconstraint": [0, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 315], "farmlayoutoptproblem": [277, 278, 279, 280, 281, 282, 283, 316], "farmobject": [41, 42, 43, 44, 45, 46, 47, 119, 120, 129, 130, 131, 137, 315], "farmoptproblem": [1, 22, 24, 31, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 120, 128, 129, 131, 136, 137, 153, 158, 163, 168, 184, 190, 196, 203, 209, 215, 221, 227, 277, 315, 316], "farmvarobject": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 136, 315], "farmvarsproblem": [92, 93, 94, 95, 96, 97, 138, 139, 284, 285, 300, 306, 315, 316], "fc": [106, 130, 131], "fdata": [98, 101, 102, 103, 105, 106], "feder": 320, "figur": [0, 21, 23, 30, 32, 41, 43, 48, 53, 92, 119, 128, 130, 136, 138, 233, 237, 243, 247, 253, 257, 263, 267, 277, 284, 300], "file": 321, "final": [0, 7, 8, 9, 21, 23, 30, 41, 48, 65, 66, 92, 98, 104, 119, 123, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 286, 300, 307], "finalize_individu": [0, 8, 21, 23, 30, 41, 48, 65, 92, 119, 123, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 286, 300, 307], "finalize_popul": [0, 9, 21, 23, 30, 41, 48, 66, 92, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "find": [194, 232], "finish": [0, 11, 21, 23, 30, 41, 48, 92, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "first": [106, 321], "fix": [157, 214, 243, 317], "flag": [0, 11, 21, 23, 30, 41, 48, 54, 57, 62, 63, 67, 74, 92, 98, 106, 109, 119, 125, 128, 130, 134, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 200, 202, 206, 208, 212, 214, 218, 220, 224, 226, 228, 229, 231, 233, 243, 253, 263, 277, 284, 300, 321], "flapfoam": 320, "flappi": 320, "float": [0, 1, 3, 4, 5, 8, 9, 13, 15, 17, 19, 21, 23, 24, 25, 26, 29, 30, 33, 34, 40, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 68, 72, 76, 81, 88, 89, 90, 92, 94, 95, 96, 97, 119, 120, 121, 122, 123, 127, 128, 129, 130, 132, 133, 136, 137, 138, 140, 141, 144, 146, 148, 149, 150, 152, 153, 154, 155, 157, 159, 160, 162, 164, 165, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 183, 184, 185, 186, 189, 191, 192, 194, 195, 196, 197, 198, 202, 204, 205, 208, 209, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 294, 295, 296, 297, 298, 300, 306, 307, 308, 310, 311, 312, 313, 314], "flow": 320, "follow": [194, 232], "forc": 321, "forg": 321, "fork": [320, 321], "found": [105, 315, 318], "four": [194, 232], "fox": [0, 1, 23, 30, 35, 41, 44, 48, 50, 64, 83, 92, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 116, 118, 119, 120, 129, 137, 138, 140, 148, 149, 233, 234, 243, 244, 253, 254, 263, 264, 277, 284, 285, 294, 295, 300, 306, 312, 313, 318, 319, 321, 322], "foxes_opt": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "frac": [194, 232], "framework": 320, "fraunhof": 320, "fraunhoferiw": [319, 320, 321, 322], "from": [48, 51, 52, 83, 92, 98, 102, 105, 106, 138, 194, 232, 277, 284, 300, 319, 321], "from_data_or_stor": [98, 105], "full": [0, 1, 319], "fullfil": [0, 21, 23, 30, 48, 58, 59, 92, 138, 152, 157, 162, 167, 173, 178, 180, 181, 183, 189, 233, 243, 253, 263, 277, 284, 300], "fulli": [233, 234, 243, 244, 253, 254, 263, 264], "func": [48, 57, 67, 92, 138, 233, 243, 253, 263, 277, 284, 300], "function": [0, 12, 19, 20, 21, 23, 28, 29, 30, 36, 40, 41, 42, 48, 57, 62, 63, 65, 66, 67, 78, 79, 88, 89, 92, 96, 97, 101, 114, 119, 120, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 152, 156, 157, 161, 162, 166, 167, 172, 173, 177, 178, 183, 188, 189, 193, 194, 195, 201, 202, 207, 208, 213, 214, 219, 220, 225, 226, 229, 230, 232, 233, 243, 253, 263, 277, 281, 282, 284, 286, 296, 297, 300, 307, 315, 320], "fund": 320, "furthermor": 320, "fvar": 57, "g": [194, 232], "gener": [9, 66, 316], "geom2d": [0, 1, 233, 234, 243, 244, 253, 254, 263, 264], "geom_layout": [30, 41, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 315], "geometr": [152, 153, 157, 158, 162, 163, 167, 168, 173, 183, 184, 189, 190, 195, 196, 202, 203, 208, 209, 214, 215, 220, 221, 226, 227, 233, 243, 316, 317], "geometri": [0, 1, 233, 234, 243, 244, 253, 254, 263, 264, 315, 317], "geomlayout": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 317], "geomlayoutgrid": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 317], "geomreggrid": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 317], "get": [0, 2, 19, 20, 21, 23, 29, 30, 40, 41, 48, 60, 71, 75, 87, 92, 98, 105, 119, 127, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "get_bound": [0, 21, 23, 30, 152, 157, 162, 167, 173, 178, 182, 183, 189], "get_data": [98, 106], "get_fig": [233, 237, 243, 247, 253, 257, 263, 267], "get_gradi": [48, 57, 67, 92, 138, 233, 243, 253, 263, 277, 284, 300], "getter": [98, 106], "git": [320, 321, 322], "github": [319, 320, 321, 322], "given": [0, 8, 9, 21, 23, 30, 41, 48, 58, 59, 65, 66, 92, 119, 123, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 180, 181, 183, 189, 194, 195, 202, 208, 214, 220, 226, 229, 232, 233, 243, 253, 263, 277, 284, 286, 300, 307, 315], "gradient": [48, 57, 67, 92, 138, 233, 243, 253, 263, 277, 284, 300], "grant": 320, "grid": [168, 196, 202, 243, 244, 253, 263, 264, 284, 285, 300, 316, 317], "grid_spac": [243, 244], "gw": 320, "h2digit": 320, "ha": [11, 109, 110, 284, 320], "ham": [194, 232], "have": [194, 232, 321], "helper": [98, 315], "here": [110, 315, 320], "histori": 320, "horizon": 320, "http": [318, 319, 320, 321, 322], "i": [48, 67, 78, 79, 88, 89, 92, 96, 97, 98, 101, 106, 110, 114, 119, 138, 194, 230, 232, 233, 243, 253, 263, 277, 281, 282, 284, 296, 297, 300, 315, 320, 321], "id": [98, 111, 320], "idata": 110, "identifi": 106, "ij": [194, 232], "import": [194, 232, 321], "includ": 321, "index": [3, 48, 83, 87, 92, 98, 106, 107, 138, 277, 284, 300], "indic": [57, 86, 107], "individu": [0, 4, 5, 21, 23, 25, 26, 30, 33, 34, 41, 48, 58, 62, 63, 92, 119, 121, 122, 128, 130, 132, 133, 136, 138, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 180, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 233, 243, 253, 263, 277, 284, 300], "ineffici": [194, 232], "inf": [72, 76, 144, 146, 182, 240, 241, 260, 261, 271, 273, 279, 280, 290, 292, 310, 311], "info": [0, 2, 21, 23, 30, 41, 48, 92, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "init": [93, 138, 140, 143, 289, 309], "initi": [0, 10, 11, 21, 23, 27, 30, 41, 48, 68, 69, 70, 92, 93, 98, 103, 108, 109, 119, 124, 128, 130, 136, 138, 140, 141, 142, 143, 152, 157, 162, 167, 171, 173, 178, 183, 187, 189, 195, 199, 202, 208, 214, 220, 226, 229, 233, 238, 239, 243, 248, 249, 253, 258, 259, 263, 268, 269, 270, 277, 278, 284, 287, 288, 289, 300, 308, 309], "initial_values_float": [48, 68, 92, 138, 141, 233, 238, 243, 253, 258, 263, 268, 277, 278, 284, 287, 300, 308], "initial_values_int": [48, 69, 92, 138, 142, 233, 243, 248, 253, 263, 269, 277, 284, 288, 300], "input": [114, 194, 232], "insid": [0, 1, 21, 315], "instal": [320, 322], "instead": [48, 57, 92, 105, 138, 194, 232, 233, 243, 253, 263, 277, 284, 300, 321], "int": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 39, 41, 42, 45, 47, 48, 50, 51, 52, 57, 58, 59, 61, 65, 66, 67, 69, 70, 73, 77, 78, 79, 80, 81, 82, 83, 86, 87, 92, 93, 95, 98, 99, 104, 106, 108, 110, 111, 115, 119, 121, 122, 123, 124, 126, 128, 130, 132, 133, 135, 136, 138, 140, 142, 143, 145, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 229, 230, 233, 234, 239, 243, 244, 248, 249, 250, 251, 252, 253, 254, 259, 263, 264, 269, 270, 272, 274, 276, 277, 284, 285, 286, 288, 289, 291, 293, 295, 299, 300, 307, 309, 313], "int_inf": [48, 49, 73, 77, 92, 138, 145, 147, 233, 243, 253, 263, 272, 274, 277, 284, 291, 293, 300], "integ": [0, 3, 4, 5, 8, 9, 16, 18, 21, 23, 25, 26, 30, 33, 34, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 69, 73, 77, 88, 89, 91, 92, 94, 95, 96, 97, 107, 119, 121, 122, 123, 128, 130, 132, 133, 136, 138, 145, 147, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 233, 235, 236, 245, 246, 253, 255, 256, 263, 265, 266, 272, 274, 277, 281, 282, 284, 286, 291, 293, 294, 295, 296, 297, 300, 307, 312, 313], "intend": [98, 102], "interfac": 320, "intern": [315, 320], "inv": [194, 232], "invers": [194, 232], "invok": 321, "involv": [233, 243, 253, 263], "issu": 320, "iter": [98, 102, 106], "its": [194, 232, 300, 316, 320], "ivar": [48, 57, 92, 138, 233, 243, 253, 263, 277, 284, 300], "iw": 320, "iwopi": [1, 24, 31, 42, 48, 50, 51, 52, 57, 67, 178, 229, 230, 233, 243, 253, 263, 315, 317, 320], "j": [194, 232], "jaccard": [194, 232], "jensen": [194, 232], "jensenshannon": [194, 232], "jona": 318, "joss": 318, "journal": 320, "keep": [23, 315, 321], "kei": [15, 16, 51, 52, 93, 94, 95, 101, 106, 119, 140, 148, 149, 294, 295, 312, 313], "keyword": 139, "kulczynski": [194, 232], "kulczynski1": [194, 232], "kullback": [194, 232], "kwarg": [0, 1, 21, 22, 23, 24, 30, 31, 32, 41, 42, 43, 48, 50, 53, 92, 93, 98, 112, 119, 120, 128, 129, 130, 131, 136, 137, 138, 139, 143, 153, 157, 158, 162, 163, 168, 173, 174, 178, 179, 184, 189, 190, 194, 232, 277, 284, 285, 289, 300, 306, 309], "label": 107, "lambda": [194, 232], "last": 321, "latest": [48, 88, 89, 92, 96, 97, 138, 277, 281, 282, 284, 296, 297, 300, 321], "layout": [0, 21, 23, 30, 32, 41, 43, 48, 53, 92, 119, 128, 130, 136, 138, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "least": [23, 194, 232, 315], "leav": 321, "leibler": [194, 232], "length": [98, 315], "level": [7, 8, 9, 10, 27, 51, 52, 57, 58, 59, 65, 66, 67, 70, 93, 104, 108, 110, 123, 124, 138, 140, 143, 171, 180, 181, 187, 199, 239, 249, 259, 270, 286, 289, 307, 309], "libmamba": 321, "librari": [194, 232], "line": 321, "link": [48, 67, 92, 138, 233, 243, 253, 263, 277, 284, 300, 320], "list": [0, 1, 3, 4, 5, 6, 17, 18, 21, 23, 24, 25, 26, 30, 31, 33, 34, 39, 41, 42, 47, 50, 57, 67, 84, 85, 86, 90, 91, 93, 98, 107, 113, 114, 116, 119, 120, 121, 122, 128, 129, 130, 132, 133, 136, 137, 140, 150, 151, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 185, 186, 191, 192, 194, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 230, 232, 242, 252, 262, 275, 276, 283, 298, 299, 314], "load": [98, 110, 320], "load_data": [98, 110], "local": [98, 102, 105, 321], "locat": 321, "lookup": [98, 106], "lower": 182, "luka": 318, "m": [23, 24, 106, 194, 232, 321], "m_a": [194, 232], "m_b": [194, 232], "mahalanobi": [194, 232], "main": [98, 101, 321], "make": [315, 321], "manhattan": [194, 232], "map": [15, 16, 51, 52, 230], "martin": 318, "match": [194, 232], "matplotlib": [32, 43, 53], "matrix": [194, 232], "max": [119, 120, 129, 137, 138, 140, 182, 208, 209, 317], "max_dens": [195, 196], "max_dist": [253, 254, 263, 264, 285], "max_dxdi": [202, 203], "max_i": [194, 232], "max_n_row": 284, "max_n_turbin": [130, 131], "max_values_constraint": [48, 71, 92, 138, 233, 243, 253, 263, 277, 284, 300], "max_values_float": [48, 72, 92, 138, 144, 233, 240, 243, 253, 260, 263, 271, 277, 279, 284, 290, 300, 310], "max_values_int": [48, 73, 92, 138, 145, 233, 243, 250, 253, 263, 272, 277, 284, 291, 300], "maxdens": [195, 196, 197, 198, 199, 200, 201, 317], "maxfarmpow": [128, 129, 315], "maxgridspac": [202, 203, 204, 205, 206, 207, 317], "maxim": [41, 48, 71, 72, 73, 74, 92, 119, 120, 125, 128, 129, 130, 134, 136, 137, 138, 144, 145, 162, 163, 195, 200, 202, 206, 208, 212, 214, 218, 220, 224, 226, 228, 229, 231, 233, 240, 243, 250, 253, 254, 260, 263, 264, 271, 272, 277, 279, 284, 285, 290, 291, 300, 310, 315, 317], "maximize_obj": [48, 74, 92, 138, 233, 243, 253, 263, 277, 284, 300], "maximize_pow": [128, 129], "maximum": [194, 232], "maxn": [220, 221], "maxnturbin": [130, 131, 132, 133, 134, 135, 315], "mdata": [98, 101, 102, 103, 105, 106, 110], "mean": [119, 120, 128, 129, 137, 194, 208, 209, 232, 315, 317], "memimadist": [208, 209, 210, 211, 212, 213, 317], "memori": [110, 194, 232], "messag": 320, "metric": [194, 232], "michen": [194, 232], "mimamean": [208, 209], "min": [119, 120, 129, 137, 138, 140, 182, 208, 209, 317], "min_dens": [167, 168], "min_dist": [23, 24, 183, 184, 195, 196, 233, 234, 243, 244, 253, 254, 263, 264, 284, 285], "min_dist_unit": [23, 24], "min_spac": [284, 300, 306], "min_valu": [167, 168], "min_values_constraint": [48, 75, 92, 138, 233, 243, 253, 263, 277, 284, 300], "min_values_float": [48, 76, 92, 138, 146, 233, 241, 243, 253, 261, 263, 273, 277, 280, 284, 292, 300, 311], "min_values_int": [48, 77, 92, 138, 147, 233, 243, 251, 253, 263, 274, 277, 284, 293, 300], "mindist": [183, 184, 185, 186, 187, 188, 317], "mindistconstraint": [23, 24, 25, 26, 27, 28, 29, 315], "minim": [23, 24, 48, 75, 76, 77, 92, 119, 120, 129, 136, 137, 138, 146, 147, 167, 168, 173, 183, 184, 196, 226, 233, 234, 241, 243, 244, 251, 253, 254, 261, 263, 264, 273, 274, 277, 280, 284, 285, 292, 293, 300, 306, 311, 315, 317], "minimalmaxti": [136, 137, 315], "minimize_ti": [136, 137], "ministri": 320, "minkowski": [194, 232], "mit": 320, "mix": 284, "model": [0, 21, 23, 30, 38, 41, 46, 92, 93, 98, 101, 103, 104, 106, 108, 109, 110, 111, 113, 114, 116, 117, 119, 128, 130, 136, 140, 315], "model_id": [98, 111], "model_kei": 140, "modifi": [98, 113], "more": [194, 232], "multipl": 320, "must": [23, 315], "n": [13, 14, 81, 82, 157, 158, 162, 163, 173, 174, 194, 214, 215, 232, 321], "n_compon": [0, 8, 9, 12, 19, 20, 21, 23, 28, 29, 30, 36, 40, 41, 57, 58, 59, 66, 67, 119, 123, 125, 126, 127, 128, 130, 134, 135, 136, 152, 156, 157, 161, 162, 166, 167, 172, 173, 177, 178, 180, 181, 182, 183, 188, 189, 193, 195, 200, 201, 202, 206, 207, 208, 212, 213, 214, 218, 219, 220, 224, 225, 226, 228, 229, 231], "n_con": 78, "n_constraint": [48, 60, 62, 63, 65, 66, 71, 75, 78, 92, 138, 233, 243, 253, 263, 277, 284, 286, 300, 307], "n_grid": [263, 264, 284, 285], "n_max": [263, 264], "n_obj": 79, "n_object": [48, 62, 63, 65, 74, 79, 92, 138, 233, 243, 253, 263, 277, 284, 286, 300, 307], "n_point": [48, 50, 101, 237, 247, 257, 267], "n_pop": [5, 9, 26, 34, 56, 59, 63, 66, 89, 95, 97, 98, 99, 122, 133, 149, 155, 160, 165, 170, 176, 181, 186, 192, 198, 205, 211, 217, 223, 236, 246, 256, 266, 282, 295, 297, 313, 315], "n_row_max": [263, 264, 285], "n_sel_compon": [3, 4, 5, 25, 26, 33, 34, 121, 122, 132, 133, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 185, 186, 191, 192, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223], "n_sel_turbin": [0, 21, 23, 30, 37, 41, 45, 48, 80, 92, 94, 95, 119, 128, 130, 136, 138, 148, 149, 277, 284, 294, 295, 300, 312, 313], "n_state": [48, 50, 92, 94, 95, 98, 101, 118, 138, 148, 149, 284, 294, 295, 300, 312, 313, 315], "n_turbin": [118, 152, 153, 183, 184, 233, 234, 243, 244, 253, 254], "n_var": 67, "n_vars_float": [0, 3, 4, 5, 8, 9, 13, 19, 21, 23, 25, 26, 29, 30, 33, 34, 40, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 68, 72, 76, 81, 88, 89, 92, 94, 95, 96, 97, 119, 121, 122, 123, 127, 128, 130, 132, 133, 136, 138, 141, 144, 146, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 233, 235, 236, 238, 240, 241, 243, 245, 246, 253, 255, 256, 258, 260, 261, 263, 265, 266, 268, 271, 273, 277, 278, 279, 280, 281, 282, 284, 286, 287, 290, 292, 294, 295, 296, 297, 300, 307, 308, 310, 311, 312, 313], "n_vars_int": [0, 3, 4, 5, 8, 9, 14, 20, 21, 23, 25, 26, 30, 33, 34, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 69, 73, 77, 82, 88, 89, 92, 94, 95, 96, 97, 119, 121, 122, 123, 128, 130, 132, 133, 136, 138, 142, 145, 147, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 233, 235, 236, 243, 245, 246, 248, 250, 251, 253, 255, 256, 263, 265, 266, 269, 272, 274, 277, 281, 282, 284, 286, 288, 291, 293, 294, 295, 296, 297, 300, 307, 312, 313], "n_vr": 57, "name": [0, 1, 6, 15, 16, 17, 18, 21, 22, 23, 24, 30, 31, 38, 41, 42, 46, 48, 50, 83, 87, 90, 91, 92, 93, 94, 95, 98, 102, 105, 112, 113, 117, 119, 120, 128, 129, 130, 131, 136, 137, 138, 140, 148, 149, 150, 151, 152, 153, 157, 158, 162, 163, 167, 168, 173, 174, 178, 183, 184, 189, 190, 195, 196, 202, 203, 208, 209, 214, 215, 220, 221, 226, 227, 229, 230, 233, 242, 243, 252, 253, 262, 263, 275, 276, 277, 283, 284, 285, 294, 295, 298, 299, 300, 306, 312, 313, 314, 321], "name_str": 110, "nan": [3, 98, 103, 106], "ndarari": [237, 247, 257, 267], "ndarrai": [3, 19, 20, 29, 40, 48, 50, 57, 60, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 84, 85, 94, 95, 101, 105, 118, 127, 140, 141, 142, 144, 145, 146, 147, 148, 149, 194, 232, 237, 238, 240, 241, 247, 248, 250, 251, 257, 258, 260, 261, 267, 268, 269, 271, 272, 273, 274, 278, 279, 280, 287, 288, 290, 291, 292, 293, 294, 295, 308, 310, 311, 312, 313], "necessari": 321, "need": 106, "new": [15, 16, 48, 55, 56, 92, 98, 112, 138, 233, 235, 236, 243, 245, 246, 253, 255, 256, 263, 265, 266, 277, 284, 300, 321], "new_branch": 320, "non": [95, 149, 182, 194, 232, 295, 313, 320, 321], "none": [0, 1, 3, 4, 5, 21, 23, 24, 25, 26, 30, 31, 33, 34, 41, 42, 48, 50, 51, 52, 57, 67, 92, 98, 105, 106, 107, 119, 120, 121, 122, 128, 129, 130, 132, 133, 136, 137, 138, 140, 152, 153, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 184, 185, 186, 189, 191, 192, 194, 195, 196, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 232, 233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267, 277, 284, 285, 300], "norm": [194, 232], "normal": [194, 232], "note": [284, 321], "np": [3, 4, 5, 8, 9, 25, 26, 33, 34, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 88, 89, 96, 97, 106, 121, 122, 123, 125, 132, 133, 134, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 180, 181, 182, 185, 186, 191, 192, 194, 197, 198, 200, 204, 205, 206, 210, 211, 212, 216, 217, 218, 222, 223, 224, 228, 231, 232, 235, 236, 245, 246, 255, 256, 265, 266, 281, 282, 286, 296, 297, 307], "number": [0, 12, 13, 14, 21, 23, 28, 30, 36, 41, 48, 78, 79, 81, 82, 92, 95, 98, 115, 119, 126, 128, 130, 135, 136, 138, 149, 152, 153, 156, 157, 158, 161, 162, 163, 166, 167, 172, 173, 177, 178, 183, 184, 188, 189, 193, 194, 195, 201, 202, 207, 208, 213, 214, 215, 219, 220, 225, 226, 229, 230, 232, 233, 234, 243, 244, 253, 254, 263, 264, 277, 284, 285, 295, 300, 313, 315, 317, 318], "numer": [0, 21, 23, 30, 37, 41, 45, 48, 80, 92, 119, 128, 130, 136, 138, 277, 284, 300], "numpi": [3, 19, 20, 29, 40, 48, 50, 57, 60, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 84, 85, 94, 95, 101, 105, 118, 127, 140, 141, 142, 144, 145, 146, 147, 148, 149, 194, 232, 237, 238, 240, 241, 247, 248, 250, 251, 257, 258, 260, 261, 267, 268, 269, 271, 272, 273, 274, 278, 279, 280, 287, 288, 290, 291, 292, 293, 294, 295, 308, 310, 311, 312, 313], "obj": [62, 63, 65, 66, 286, 307], "object": [0, 7, 10, 21, 23, 30, 41, 42, 48, 51, 52, 57, 62, 63, 65, 66, 67, 70, 74, 79, 84, 85, 92, 93, 98, 102, 105, 106, 110, 111, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 152, 157, 162, 167, 171, 173, 178, 183, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 243, 249, 253, 259, 263, 270, 277, 284, 286, 289, 300, 307, 309], "observ": [194, 232], "obtain": [48, 67, 92, 138, 233, 243, 253, 263, 277, 284, 300], "offset_i": [300, 303], "offset_x": [300, 302], "ofixn": [214, 215, 216, 217, 218, 219, 317], "old": [15, 16], "omaxn": [220, 221, 222, 223, 224, 225, 226, 317], "ominn": [226, 227, 228, 317], "onc": 321, "one": [194, 232], "onli": [57, 194, 232, 321], "open": [318, 320], "opt": [98, 319], "opt2farm_vars_individu": [92, 94, 138, 148, 284, 294, 300, 312], "opt2farm_vars_popul": [92, 95, 138, 149, 284, 295, 300, 313], "optfarmvar": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 316], "optfunct": [178, 229], "optfunctionlist": [57, 67], "optim": [1, 8, 22, 24, 30, 31, 42, 48, 50, 54, 65, 88, 89, 92, 94, 95, 96, 97, 120, 123, 128, 129, 131, 136, 137, 138, 148, 149, 153, 158, 163, 168, 178, 184, 190, 194, 196, 203, 209, 215, 221, 227, 230, 232, 233, 243, 253, 263, 277, 281, 282, 284, 286, 294, 295, 296, 297, 300, 307, 312, 313, 315, 316, 317, 318, 320], "option": [1, 4, 5, 22, 24, 25, 26, 31, 33, 34, 42, 50, 51, 52, 57, 62, 63, 67, 93, 105, 106, 112, 114, 120, 121, 122, 128, 129, 131, 132, 133, 136, 137, 139, 140, 143, 153, 154, 155, 158, 159, 160, 163, 164, 165, 168, 169, 170, 175, 176, 184, 185, 186, 190, 191, 192, 194, 196, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 230, 232, 234, 237, 244, 247, 254, 257, 264, 267, 285, 289, 306, 309], "order": [57, 67, 106], "org": 318, "origin": [95, 98, 99, 149, 194, 232, 295, 313, 320], "other": [48, 88, 89, 92, 96, 97, 138, 277, 281, 282, 284, 296, 297, 300, 321], "otherwis": [106, 230], "out": [194, 232], "out_var": [98, 114], "output": [101, 106, 113, 114, 194, 232], "output_point_var": [98, 113], "output_var": 113, "over": [194, 232], "overload": 57, "p": [194, 232, 320], "packag": [315, 320, 321], "page": 318, "pair": [194, 232], "paper": 320, "parallel": [98, 114, 194, 232], "paramet": [48, 284, 300, 316], "pars": [48, 83, 92, 138, 277, 284, 300], "parse_tvar": [48, 83, 92, 138, 277, 284, 300], "part": 110, "particular": 320, "pass": [194, 232], "pdata": [98, 101, 102, 105], "per": 284, "pip": [320, 322], "place": [140, 284, 300, 316], "pleas": [318, 320, 322], "plot": [237, 247, 257, 267], "plotli": [233, 237, 243, 247, 253, 257, 263, 267], "point": [48, 50, 101, 103, 106, 194, 232, 233, 234, 237, 243, 244, 247, 253, 254, 257, 263, 264, 267, 285, 317], "pointwis": [194, 232], "pop": [57, 67, 95, 149, 295, 313], "popstat": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 315], "popul": [0, 5, 9, 21, 23, 26, 30, 34, 41, 48, 56, 57, 59, 63, 66, 67, 92, 98, 99, 119, 122, 128, 130, 133, 136, 138, 152, 155, 157, 160, 162, 165, 167, 170, 173, 176, 178, 181, 183, 186, 189, 192, 195, 198, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 233, 236, 243, 246, 253, 256, 263, 266, 277, 284, 300, 315], "posit": [0, 21, 277, 315, 316], "possibl": [0, 3, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 194, 195, 202, 208, 214, 220, 226, 229, 232], "post_rotor": 93, "post_rotor_var": [92, 93], "power": [128, 315, 320], "pre": 321, "pre_rotor": [93, 140], "pre_rotor_var": [92, 93], "precis": [194, 232], "predecessor": 320, "prefer": 321, "previou": 106, "previous": 67, "print": [0, 21, 23, 30, 38, 41, 46, 119, 128, 130, 136], "print_model": [0, 21, 23, 30, 38, 41, 46, 119, 128, 130, 136], "prob_r": [62, 63, 84, 85], "prob_res_einsum_individu": [48, 84, 92, 138, 233, 243, 253, 263, 277, 284, 300], "prob_res_einsum_popul": [48, 85, 92, 138, 233, 243, 253, 263, 277, 284, 300], "prob_res_list": [48, 84, 85, 92, 138, 233, 243, 253, 263, 277, 284, 300], "probabl": [194, 232], "probe": [48, 50], "problem": [0, 1, 4, 5, 8, 9, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 41, 42, 48, 50, 51, 52, 55, 56, 57, 62, 63, 65, 66, 67, 84, 85, 92, 119, 120, 121, 122, 123, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314], "problem_result": [0, 4, 5, 8, 9, 21, 23, 25, 26, 30, 33, 34, 41, 55, 56, 65, 66, 119, 121, 122, 123, 128, 130, 132, 133, 136, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 235, 236, 245, 246, 255, 256, 265, 266, 286, 307], "problemdefaultfunc": 67, "product": [194, 232], "project": 320, "properti": [0, 6, 11, 13, 14, 17, 18, 21, 23, 30, 35, 37, 39, 41, 44, 45, 47, 48, 54, 60, 61, 64, 71, 74, 75, 78, 79, 80, 81, 82, 86, 92, 98, 109, 111, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "proport": [194, 232], "provid": [98, 106, 110, 320], "public": 320, "publicli": 320, "publish": 318, "pull": 320, "pure": [152, 157, 162, 167, 173, 183, 189, 195, 202, 208, 214, 220, 226, 233, 243, 316, 317], "push": 320, "pyplot": [32, 43, 53, 237, 247, 257, 267], "pytest": 322, "python": [194, 232, 320], "python3": 321, "q": [194, 232], "quasi": [194, 232], "radiu": [0, 1], "rao": [194, 232], "reason": 110, "recommend": 321, "refer": [194, 232], "reggridslayoutoptproblem": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 316], "regular": [253, 263, 284, 300, 316, 317], "regularlayoutoptproblem": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316], "releas": 321, "remov": 321, "renam": [0, 15, 16, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "rename_vars_float": [0, 15, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "rename_vars_int": [0, 16, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "repeat": 140, "replac": 321, "report": 320, "repositori": [320, 322], "repr": [98, 100], "request": 320, "requir": 322, "research": 320, "respect": [194, 232], "result": [4, 5, 8, 9, 25, 26, 33, 34, 48, 55, 56, 58, 59, 62, 63, 65, 66, 84, 85, 92, 101, 114, 121, 122, 123, 132, 133, 138, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 180, 181, 185, 186, 191, 192, 194, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 232, 233, 235, 236, 243, 245, 246, 253, 255, 256, 263, 265, 266, 277, 284, 286, 300, 307], "ret_dim": [98, 105], "ret_prob_r": [48, 62, 63, 92, 138, 233, 243, 253, 263, 277, 284, 300], "return": [0, 21, 23, 30, 41, 98, 100, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 180, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263], "roger": [194, 232], "rogerstanimoto": [194, 232], "roject": 320, "rotor": [0, 1, 140, 153], "row": [194, 232, 263, 264, 284, 285], "rule": [119, 120, 129, 137], "run": [48, 50, 88, 89, 96, 97, 98, 102, 112, 281, 282, 285, 296, 297, 315, 322], "run_calcul": [98, 114], "runner": [48, 50, 92, 277, 285], "russel": [194, 232], "russellrao": [194, 232], "safe": [98, 105], "same": [140, 194, 232], "save": [194, 232], "scalar": [194, 232], "scale": [119, 120, 129, 137, 208, 209], "schmidt": 318, "schmidt2023": 318, "scipi": [194, 232], "search": 106, "see": [194, 232, 321], "sel": [138, 140], "sel_turbin": [0, 1, 21, 23, 24, 30, 31, 39, 41, 42, 47, 48, 50, 86, 92, 119, 128, 130, 136, 138, 277, 284, 300], "select": [0, 1, 3, 4, 5, 21, 23, 24, 25, 26, 30, 31, 33, 34, 37, 39, 41, 42, 45, 47, 48, 50, 57, 67, 80, 86, 92, 112, 119, 121, 122, 128, 130, 132, 133, 136, 138, 140, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 185, 186, 191, 192, 197, 198, 204, 205, 210, 211, 216, 217, 222, 223, 277, 284, 300, 316], "self": [73, 77, 98, 100, 106, 110, 145, 147, 237, 247, 257, 267, 272, 274, 291, 293], "serv": 106, "set": 321, "seuclidean": [194, 232], "sever": [284, 316], "shannon": [194, 232], "shape": [3, 4, 5, 8, 9, 19, 20, 25, 26, 29, 33, 34, 40, 48, 50, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 88, 89, 94, 95, 96, 97, 101, 118, 121, 122, 123, 125, 127, 132, 133, 134, 141, 142, 144, 145, 146, 147, 148, 149, 154, 155, 159, 160, 164, 165, 169, 170, 175, 176, 180, 181, 182, 185, 186, 191, 192, 197, 198, 200, 204, 205, 206, 210, 211, 212, 216, 217, 218, 222, 223, 224, 228, 231, 235, 236, 237, 238, 240, 241, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 265, 266, 267, 268, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 307, 308, 310, 311, 312, 313], "should": [101, 110, 194, 232, 321], "silent": [7, 8, 9, 10, 27, 51, 52, 57, 58, 59, 65, 66, 67, 70, 93, 104, 108, 110, 123, 124, 143, 171, 180, 181, 187, 199, 239, 249, 259, 270, 286, 289, 307, 309], "simpli": 321, "singl": [0, 4, 21, 23, 25, 30, 33, 41, 48, 62, 92, 101, 119, 121, 128, 130, 132, 136, 138, 152, 154, 157, 159, 162, 164, 167, 169, 173, 175, 178, 183, 185, 189, 191, 195, 197, 202, 204, 208, 210, 214, 216, 220, 222, 226, 229, 233, 243, 253, 263, 277, 284, 300], "size": [98, 99, 115], "smart": 320, "smdl": 116, "smfp": [98, 106], "sneath": [194, 232], "softwar": [318, 320], "sokal": [194, 232], "sokalmichen": [194, 232], "sokalsneath": [194, 232], "solver": 321, "some": [194, 232], "sourc": [0, 1, 4, 5, 12, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 41, 42, 43, 46, 48, 50, 53, 55, 56, 70, 83, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 108, 110, 113, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321], "space": [168, 194, 196, 202, 232, 243, 244, 284, 300, 306, 317], "spacing_i": [300, 305], "spacing_x": [300, 304], "spatial": [23, 194, 232, 315], "specif": [98, 117, 320], "specifi": 230, "sqeuclidean": [194, 232], "sqrt": [194, 232], "squar": [194, 232], "stabl": 321, "standard": [194, 232], "start": [98, 114], "state": [95, 98, 99, 107, 112, 115, 118, 120, 129, 137, 140, 149, 295, 313, 315], "state_target": 106, "state_target_tpoint": 106, "state_turbin": 106, "states_typ": [98, 112], "statist": [98, 118], "stoevesandt": 318, "store": [98, 102, 105, 110, 194, 232], "str": [1, 2, 6, 15, 16, 17, 18, 22, 23, 24, 31, 42, 50, 51, 52, 67, 83, 87, 90, 91, 93, 101, 102, 105, 106, 112, 113, 114, 117, 119, 120, 128, 129, 131, 136, 137, 140, 150, 151, 153, 158, 163, 168, 184, 190, 194, 196, 203, 209, 215, 221, 227, 230, 232, 237, 242, 247, 252, 257, 262, 267, 275, 276, 283, 285, 298, 299, 306, 314], "string": [0, 2, 21, 23, 30, 41, 48, 92, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 194, 195, 202, 208, 214, 220, 226, 229, 232, 233, 243, 253, 263, 277, 284, 300], "strongli": 321, "sub": [93, 98, 116, 140], "sub_model": [98, 116], "subject": [54, 98, 110], "sum": [48, 78, 79, 84, 85, 92, 119, 120, 129, 137, 138, 194, 232, 233, 243, 253, 263, 277, 284, 300], "sum_i": [194, 232], "super": [93, 143, 289, 309], "suppli": [194, 232], "support": [194, 232, 320, 321], "sure": 321, "switch": [119, 120, 129, 137], "synonym": [194, 232], "syntax": [194, 232], "system": 321, "t": [106, 194, 232], "tanimoto": [194, 232], "target": [98, 103, 106], "tdata": [98, 103, 106], "th": [194, 232], "them": [194, 232], "thi": [0, 1, 67, 88, 89, 96, 97, 101, 114, 140, 194, 232, 233, 243, 253, 263, 281, 282, 284, 296, 297, 315, 321], "those": [194, 232], "three": 320, "through": 320, "throw": 106, "thrown": [194, 232], "ti": [136, 315], "time": [98, 112, 194, 232, 315, 321], "titl": [233, 237, 243, 247, 253, 257, 263, 267, 318], "tol": [174, 178, 179], "toler": [48, 60, 92, 138, 174, 178, 179, 233, 243, 253, 263, 277, 284, 300], "tool": [], "total": [48, 78, 79, 92, 98, 115, 138, 233, 243, 253, 263, 277, 284, 300], "tracker": 320, "translat": [92, 94, 95, 138, 148, 149, 284, 294, 295, 300, 312, 313], "true": [11, 54, 106, 109, 130, 131, 237, 247, 257, 267], "true_circl": [237, 247, 257, 267], "tupl": [105, 112, 114, 139], "turbin": [0, 1, 21, 23, 24, 30, 31, 37, 39, 41, 42, 45, 47, 48, 50, 54, 80, 83, 86, 87, 92, 119, 120, 128, 129, 130, 136, 137, 138, 140, 153, 157, 158, 162, 163, 167, 168, 173, 184, 195, 214, 215, 220, 226, 233, 234, 243, 244, 253, 254, 277, 284, 300, 306, 315, 316, 317], "turbine_i": [48, 83, 87, 92, 138, 277, 284, 300], "turrbin": [130, 315], "tvar": [48, 87, 92, 138, 277, 284, 300], "tvr": [48, 83, 92, 138, 277, 284, 300], "two": [110, 194, 232], "typ": [138, 140], "type": [98, 111, 140, 194, 232], "typic": [67, 114], "u": [194, 232], "u_i": [194, 232], "unbound": [72, 73, 76, 77, 144, 145, 146, 147, 240, 241, 260, 261, 271, 272, 273, 274, 279, 280, 290, 291, 292, 293, 310, 311], "under": [110, 320], "underli": [0, 1, 4, 21, 22, 23, 24, 25, 30, 31, 33, 41, 42, 119, 120, 121, 128, 129, 130, 131, 132, 136, 137, 152, 153, 154, 157, 158, 159, 162, 163, 164, 167, 168, 169, 173, 175, 178, 183, 184, 185, 189, 190, 191, 195, 196, 197, 202, 203, 204, 208, 209, 210, 214, 215, 216, 220, 221, 222, 226, 227, 229, 230], "uniform": [138, 140], "uniqu": [98, 111], "unit": [23, 24, 194, 232], "unweight": [194, 232], "upcast": 106, "updat": [48, 88, 89, 92, 96, 97, 138, 277, 281, 282, 284, 296, 297, 300], "update_problem_individu": [48, 88, 92, 96, 138, 277, 281, 284, 296, 300], "update_problem_popul": [48, 89, 92, 97, 138, 277, 282, 284, 297, 300], "upper": 182, "url": 318, "us": [0, 1, 3, 48, 72, 73, 76, 77, 88, 89, 92, 96, 97, 138, 144, 145, 146, 147, 194, 230, 232, 240, 241, 260, 261, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 290, 291, 292, 293, 296, 297, 300, 310, 311, 315, 321], "user": [194, 232], "util": [0, 1, 102, 105, 233, 234, 243, 244, 253, 254, 263, 264], "v": [98, 117, 194, 232], "v_i": [194, 232], "valid": [130, 131, 189, 190, 191, 192, 193, 233, 234, 237, 243, 247, 253, 257, 263, 267, 317], "valu": [0, 3, 4, 5, 8, 9, 15, 16, 21, 23, 25, 26, 30, 33, 34, 41, 48, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 88, 89, 92, 93, 94, 95, 96, 97, 101, 119, 121, 122, 123, 128, 130, 132, 133, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 180, 181, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 233, 235, 236, 238, 240, 241, 243, 245, 246, 248, 250, 251, 253, 255, 256, 258, 260, 261, 263, 265, 266, 268, 269, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 300, 307, 308, 310, 311, 312, 313], "valueerror": [194, 232], "var": [0, 3, 21, 23, 30, 41, 48, 67, 83, 87, 92, 93, 94, 95, 98, 117, 119, 128, 130, 136, 138, 148, 149, 152, 157, 162, 167, 173, 178, 183, 189, 194, 195, 202, 208, 214, 220, 226, 229, 232, 277, 284, 294, 295, 300, 312, 313], "var_names_float": [0, 17, 21, 23, 30, 41, 48, 90, 92, 119, 128, 130, 136, 138, 150, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 242, 243, 253, 262, 263, 275, 277, 283, 284, 298, 300, 314], "var_names_int": [0, 18, 21, 23, 30, 41, 48, 91, 92, 119, 128, 130, 136, 138, 151, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 252, 253, 263, 276, 277, 284, 299, 300], "vardeps_float": [0, 19, 21, 23, 29, 30, 40, 41, 119, 127, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "vardeps_int": [0, 20, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "variabl": [0, 3, 4, 5, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 29, 30, 33, 34, 40, 41, 48, 51, 52, 55, 56, 57, 62, 63, 65, 66, 67, 68, 69, 72, 73, 76, 77, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 106, 113, 114, 117, 119, 120, 121, 122, 123, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 194, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 230, 232, 233, 235, 236, 238, 240, 241, 242, 243, 245, 246, 248, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 263, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 308, 310, 311, 312, 313, 314, 315, 316], "varianc": [194, 232], "varmap": [0, 15, 16, 21, 23, 30, 41, 119, 128, 130, 136, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229], "varmap_float": [48, 51, 52, 92, 138, 233, 243, 253, 263, 277, 284, 300], "varmap_int": [48, 51, 52, 92, 138, 233, 243, 253, 263, 277, 284, 300], "vars_float": [0, 3, 4, 5, 8, 9, 21, 23, 25, 26, 30, 33, 34, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 88, 89, 92, 94, 95, 96, 97, 119, 121, 122, 123, 128, 130, 132, 133, 136, 138, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 233, 235, 236, 243, 245, 246, 253, 255, 256, 263, 265, 266, 277, 281, 282, 284, 286, 294, 295, 296, 297, 300, 307, 312, 313], "vars_int": [0, 3, 4, 5, 8, 9, 21, 23, 25, 26, 30, 33, 34, 41, 48, 55, 56, 57, 62, 63, 65, 66, 67, 88, 89, 92, 94, 95, 96, 97, 119, 121, 122, 123, 128, 130, 132, 133, 136, 138, 148, 149, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 169, 170, 173, 175, 176, 178, 183, 185, 186, 189, 191, 192, 195, 197, 198, 202, 204, 205, 208, 210, 211, 214, 216, 217, 220, 222, 223, 226, 229, 233, 235, 236, 243, 245, 246, 253, 255, 256, 263, 265, 266, 277, 281, 282, 284, 286, 294, 295, 296, 297, 300, 307, 312, 313], "vector": [57, 67, 98, 194, 232, 315], "venv": 321, "verbos": [0, 7, 8, 9, 10, 21, 23, 27, 30, 41, 48, 51, 52, 57, 58, 59, 65, 66, 67, 70, 92, 93, 98, 104, 108, 110, 119, 123, 124, 128, 130, 136, 138, 143, 152, 157, 162, 167, 171, 173, 178, 180, 181, 183, 187, 189, 195, 199, 202, 208, 214, 220, 226, 229, 233, 239, 243, 249, 253, 259, 263, 270, 277, 284, 286, 289, 300, 307, 309], "version": [194, 232, 320, 321], "vi": [194, 232], "via": [57, 67, 98, 114, 315, 320], "violat": [174, 178, 179], "vnames_float": 230, "vnames_int": 230, "vollmer": 318, "volum": 318, "vr": 57, "vstack": [194, 232], "w": [106, 194, 232], "wake": [106, 233, 243, 316, 317, 320], "we": [194, 232, 320, 321], "weight": [84, 85, 98, 118, 194, 209, 232], "well": 320, "were": 67, "whenev": 321, "where": [194, 232], "which": [57, 67, 98, 113, 119, 120, 129, 137, 140, 194, 232], "while": 321, "whole": [48, 56, 92, 138, 233, 236, 243, 246, 253, 256, 263, 266, 277, 284, 300], "whose": 315, "wind": [0, 21, 23, 30, 35, 41, 44, 48, 64, 92, 119, 128, 130, 136, 138, 233, 243, 253, 263, 277, 284, 300, 315, 316, 320], "windfarm": [0, 23, 35, 44, 64], "wise": [194, 232], "within": [233, 234, 243, 244, 253, 254, 263, 264, 315, 317, 321], "work": 321, "would": [194, 232], "wrt": [57, 67], "x": [194, 232, 320], "x_i": [194, 232], "xa": [194, 232], "xarrai": [98, 114], "xb": [194, 232], "xy": [233, 237, 243, 247, 253, 257, 263, 267], "y": [194, 232], "year": 318, "yield": [318, 320], "you": [194, 232, 321], "your": [320, 321], "yule": [194, 232], "zenodo": 318, "zero": [194, 232]}, "titles": ["foxes_opt.constraints.AreaGeometryConstraint", "foxes_opt.constraints.AreaGeometryConstraint.__init__", "foxes_opt.constraints.AreaGeometryConstraint.__str__", "foxes_opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes_opt.constraints.AreaGeometryConstraint.calc_individual", "foxes_opt.constraints.AreaGeometryConstraint.calc_population", "foxes_opt.constraints.AreaGeometryConstraint.component_names", "foxes_opt.constraints.AreaGeometryConstraint.finalize", "foxes_opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes_opt.constraints.AreaGeometryConstraint.finalize_population", "foxes_opt.constraints.AreaGeometryConstraint.initialize", "foxes_opt.constraints.AreaGeometryConstraint.initialized", "foxes_opt.constraints.AreaGeometryConstraint.n_components", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.var_names_float", "foxes_opt.constraints.AreaGeometryConstraint.var_names_int", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes_opt.constraints.FarmBoundaryConstraint", "foxes_opt.constraints.FarmBoundaryConstraint.__init__", "foxes_opt.constraints.MinDistConstraint", "foxes_opt.constraints.MinDistConstraint.__init__", "foxes_opt.constraints.MinDistConstraint.calc_individual", "foxes_opt.constraints.MinDistConstraint.calc_population", "foxes_opt.constraints.MinDistConstraint.initialize", "foxes_opt.constraints.MinDistConstraint.n_components", "foxes_opt.constraints.MinDistConstraint.vardeps_float", "foxes_opt.core.FarmConstraint", "foxes_opt.core.FarmConstraint.__init__", "foxes_opt.core.FarmConstraint.add_to_layout_figure", "foxes_opt.core.FarmConstraint.calc_individual", "foxes_opt.core.FarmConstraint.calc_population", "foxes_opt.core.FarmConstraint.farm", "foxes_opt.core.FarmConstraint.n_components", "foxes_opt.core.FarmConstraint.n_sel_turbines", "foxes_opt.core.FarmConstraint.print_models", "foxes_opt.core.FarmConstraint.sel_turbines", "foxes_opt.core.FarmConstraint.vardeps_float", "foxes_opt.core.FarmObjective", "foxes_opt.core.FarmObjective.__init__", "foxes_opt.core.FarmObjective.add_to_layout_figure", "foxes_opt.core.FarmObjective.farm", "foxes_opt.core.FarmObjective.n_sel_turbines", "foxes_opt.core.FarmObjective.print_models", "foxes_opt.core.FarmObjective.sel_turbines", "foxes_opt.core.FarmOptProblem", "foxes_opt.core.FarmOptProblem.INT_INF", "foxes_opt.core.FarmOptProblem.__init__", "foxes_opt.core.FarmOptProblem.add_constraint", "foxes_opt.core.FarmOptProblem.add_objective", "foxes_opt.core.FarmOptProblem.add_to_layout_figure", "foxes_opt.core.FarmOptProblem.all_turbines", "foxes_opt.core.FarmOptProblem.apply_individual", "foxes_opt.core.FarmOptProblem.apply_population", "foxes_opt.core.FarmOptProblem.calc_gradients", "foxes_opt.core.FarmOptProblem.check_constraints_individual", "foxes_opt.core.FarmOptProblem.check_constraints_population", "foxes_opt.core.FarmOptProblem.constraints_tol", "foxes_opt.core.FarmOptProblem.counter", "foxes_opt.core.FarmOptProblem.evaluate_individual", "foxes_opt.core.FarmOptProblem.evaluate_population", "foxes_opt.core.FarmOptProblem.farm", "foxes_opt.core.FarmOptProblem.finalize_individual", "foxes_opt.core.FarmOptProblem.finalize_population", "foxes_opt.core.FarmOptProblem.get_gradients", "foxes_opt.core.FarmOptProblem.initial_values_float", "foxes_opt.core.FarmOptProblem.initial_values_int", "foxes_opt.core.FarmOptProblem.initialize", "foxes_opt.core.FarmOptProblem.max_values_constraints", "foxes_opt.core.FarmOptProblem.max_values_float", "foxes_opt.core.FarmOptProblem.max_values_int", "foxes_opt.core.FarmOptProblem.maximize_objs", "foxes_opt.core.FarmOptProblem.min_values_constraints", "foxes_opt.core.FarmOptProblem.min_values_float", "foxes_opt.core.FarmOptProblem.min_values_int", "foxes_opt.core.FarmOptProblem.n_constraints", "foxes_opt.core.FarmOptProblem.n_objectives", "foxes_opt.core.FarmOptProblem.n_sel_turbines", "foxes_opt.core.FarmOptProblem.n_vars_float", "foxes_opt.core.FarmOptProblem.n_vars_int", "foxes_opt.core.FarmOptProblem.parse_tvar", "foxes_opt.core.FarmOptProblem.prob_res_einsum_individual", "foxes_opt.core.FarmOptProblem.prob_res_einsum_population", "foxes_opt.core.FarmOptProblem.sel_turbines", "foxes_opt.core.FarmOptProblem.tvar", "foxes_opt.core.FarmOptProblem.update_problem_individual", "foxes_opt.core.FarmOptProblem.update_problem_population", "foxes_opt.core.FarmOptProblem.var_names_float", "foxes_opt.core.FarmOptProblem.var_names_int", "foxes_opt.core.FarmVarsProblem", "foxes_opt.core.FarmVarsProblem.initialize", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes_opt.core.FarmVarsProblem.update_problem_individual", "foxes_opt.core.FarmVarsProblem.update_problem_population", "foxes_opt.core.PopStates", "foxes_opt.core.PopStates.__init__", "foxes_opt.core.PopStates.__repr__", "foxes_opt.core.PopStates.calculate", "foxes_opt.core.PopStates.data_to_store", "foxes_opt.core.PopStates.ensure_variables", "foxes_opt.core.PopStates.finalize", "foxes_opt.core.PopStates.from_data_or_store", "foxes_opt.core.PopStates.get_data", "foxes_opt.core.PopStates.index", "foxes_opt.core.PopStates.initialize", "foxes_opt.core.PopStates.initialized", "foxes_opt.core.PopStates.load_data", "foxes_opt.core.PopStates.model_id", "foxes_opt.core.PopStates.new", "foxes_opt.core.PopStates.output_point_vars", "foxes_opt.core.PopStates.run_calculation", "foxes_opt.core.PopStates.size", "foxes_opt.core.PopStates.sub_models", "foxes_opt.core.PopStates.var", "foxes_opt.core.PopStates.weights", "foxes_opt.objectives.FarmVarObjective", "foxes_opt.objectives.FarmVarObjective.__init__", "foxes_opt.objectives.FarmVarObjective.calc_individual", "foxes_opt.objectives.FarmVarObjective.calc_population", "foxes_opt.objectives.FarmVarObjective.finalize_individual", "foxes_opt.objectives.FarmVarObjective.initialize", "foxes_opt.objectives.FarmVarObjective.maximize", "foxes_opt.objectives.FarmVarObjective.n_components", "foxes_opt.objectives.FarmVarObjective.vardeps_float", "foxes_opt.objectives.MaxFarmPower", "foxes_opt.objectives.MaxFarmPower.__init__", "foxes_opt.objectives.MaxNTurbines", "foxes_opt.objectives.MaxNTurbines.__init__", "foxes_opt.objectives.MaxNTurbines.calc_individual", "foxes_opt.objectives.MaxNTurbines.calc_population", "foxes_opt.objectives.MaxNTurbines.maximize", "foxes_opt.objectives.MaxNTurbines.n_components", "foxes_opt.objectives.MinimalMaxTI", "foxes_opt.objectives.MinimalMaxTI.__init__", "foxes_opt.problems.OptFarmVars", "foxes_opt.problems.OptFarmVars.__init__", "foxes_opt.problems.OptFarmVars.add_var", "foxes_opt.problems.OptFarmVars.initial_values_float", "foxes_opt.problems.OptFarmVars.initial_values_int", "foxes_opt.problems.OptFarmVars.initialize", "foxes_opt.problems.OptFarmVars.max_values_float", "foxes_opt.problems.OptFarmVars.max_values_int", "foxes_opt.problems.OptFarmVars.min_values_float", "foxes_opt.problems.OptFarmVars.min_values_int", "foxes_opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes_opt.problems.OptFarmVars.opt2farm_vars_population", "foxes_opt.problems.OptFarmVars.var_names_float", "foxes_opt.problems.OptFarmVars.var_names_int", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Valid", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.cdist", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.Objective", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.cdist", "foxes_opt.problems.layout.geom_layouts.GeomLayout", "foxes_opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes_opt.problems.layout.FarmLayoutOptProblem", "foxes_opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes_opt.problems.layout.RegularLayoutOptProblem", "foxes_opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegularLayoutOptProblem.var_names_float", "foxes.opt", "foxes_opt.problems", "foxes_opt.problems.layout.geom_layouts", "Citation", "History", "Welcome to <em>foxes-opt</em>", "Installation", "Testing"], "titleterms": {"1": 319, "3": 319, "acknowledg": 320, "api": [], "attribut": [0, 23, 48, 98, 119, 130, 178, 233, 243, 253, 263, 284, 300], "citat": 318, "conda": 321, "constraint": [315, 317], "content": 320, "contribut": 320, "core": 315, "develop": 321, "doi": 318, "environ": 321, "exampl": [194, 232], "fox": [315, 320], "foxes_opt": [316, 317], "geom_layout": [316, 317], "histori": 319, "instal": 321, "journal": 318, "layout": [316, 317], "licens": 320, "member": [0, 21, 23, 30, 41, 48, 92, 98, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "note": [194, 232], "object": [315, 317], "opt": [315, 320], "option": 321, "paper": 318, "paramet": [1, 3, 4, 5, 7, 8, 9, 10, 15, 16, 22, 24, 25, 26, 27, 31, 32, 33, 34, 42, 43, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 70, 83, 84, 85, 87, 88, 89, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 128, 129, 131, 132, 133, 136, 137, 139, 140, 143, 148, 149, 153, 154, 155, 158, 159, 160, 163, 164, 165, 168, 169, 170, 171, 174, 175, 176, 179, 180, 181, 184, 185, 186, 187, 190, 191, 192, 194, 196, 197, 198, 199, 203, 204, 205, 209, 210, 211, 215, 216, 217, 221, 222, 223, 227, 230, 232, 234, 235, 236, 237, 239, 244, 245, 246, 247, 249, 254, 255, 256, 257, 259, 264, 265, 266, 267, 270, 281, 282, 285, 286, 289, 294, 295, 296, 297, 306, 307, 309, 312, 313], "pip": 321, "prepar": 321, "problem": [315, 316, 317], "public": [0, 21, 23, 30, 41, 48, 92, 98, 119, 128, 130, 136, 138, 152, 157, 162, 167, 173, 178, 183, 189, 195, 202, 208, 214, 220, 226, 229, 233, 243, 253, 263, 277, 284, 300], "python": 321, "rais": [194, 232], "return": [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 17, 18, 19, 20, 25, 26, 28, 29, 33, 34, 35, 36, 37, 39, 40, 44, 45, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 94, 95, 101, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 132, 133, 134, 135, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 159, 160, 161, 164, 165, 166, 169, 170, 172, 175, 176, 177, 181, 182, 185, 186, 188, 191, 192, 193, 194, 197, 198, 200, 201, 204, 205, 206, 207, 210, 211, 212, 213, 216, 217, 218, 219, 222, 223, 224, 225, 228, 231, 232, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 307, 308, 310, 311, 312, 313, 314], "specif": 318, "standard": 321, "test": 322, "user": 321, "v0": 319, "version": 318, "via": 321, "virtual": 321, "welcom": 320}})