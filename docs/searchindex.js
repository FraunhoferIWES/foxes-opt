Search.setIndex({"alltitles": {"API": [[325, null]], "Acknowledgements": [[330, "acknowledgements"]], "Attributes": [[1, null], [24, null], [51, null], [103, null], [127, null], [138, null], [186, null], [242, null], [253, null], [263, null], [273, null], [294, null], [310, null]], "Changelog": [[0, null]], "Citation": [[328, null]], "Command and options": [[334, "command-and-options"]], "Contents": [[330, "contents"]], "Contributing": [[330, "contributing"]], "Examples": [[203, "examples"], [329, null]], "Input file structure": [[334, "input-file-structure"]], "Input parameter files": [[334, null]], "Installation": [[331, null]], "Installation as developer": [[331, "installation-as-developer"]], "Installation as standard user": [[331, "installation-as-standard-user"]], "Layout optimization": [[332, null]], "License": [[330, "license"]], "Notes": [[203, "notes"]], "Parameters": [[2, null], [4, null], [5, null], [6, null], [8, null], [9, null], [10, null], [11, null], [16, null], [17, null], [23, null], [25, null], [26, null], [27, null], [28, null], [32, null], [33, null], [34, null], [35, null], [39, null], [44, null], [45, null], [48, null], [53, null], [54, null], [55, null], [56, null], [58, null], [59, null], [60, null], [61, null], [62, null], [65, null], [66, null], [68, null], [69, null], [70, null], [73, null], [86, null], [87, null], [88, null], [89, null], [91, null], [92, null], [93, null], [97, null], [98, null], [99, null], [100, null], [101, null], [102, null], [104, null], [106, null], [107, null], [108, null], [109, null], [111, null], [113, null], [115, null], [117, null], [118, null], [119, null], [121, null], [124, null], [125, null], [126, null], [128, null], [129, null], [130, null], [131, null], [132, null], [136, null], [137, null], [139, null], [140, null], [141, null], [144, null], [145, null], [147, null], [148, null], [151, null], [156, null], [157, null], [161, null], [162, null], [163, null], [166, null], [167, null], [168, null], [171, null], [172, null], [173, null], [176, null], [177, null], [178, null], [179, null], [182, null], [183, null], [184, null], [187, null], [188, null], [189, null], [191, null], [193, null], [194, null], [195, null], [196, null], [199, null], [200, null], [201, null], [203, null], [205, null], [206, null], [207, null], [208, null], [212, null], [213, null], [214, null], [218, null], [219, null], [220, null], [224, null], [225, null], [226, null], [230, null], [231, null], [232, null], [236, null], [239, null], [241, null], [243, null], [244, null], [245, null], [246, null], [248, null], [251, null], [254, null], [255, null], [256, null], [257, null], [259, null], [264, null], [265, null], [266, null], [267, null], [269, null], [274, null], [275, null], [276, null], [277, null], [280, null], [291, null], [292, null], [295, null], [296, null], [299, null], [304, null], [305, null], [306, null], [307, null], [316, null], [317, null], [319, null], [322, null], [323, null]], "Public members": [[1, "public-members"], [22, null], [24, "public-members"], [31, null], [43, null], [51, "public-members"], [96, null], [103, "public-members"], [127, "public-members"], [136, "public-members"], [138, "public-members"], [144, "public-members"], [146, null], [160, null], [165, null], [170, null], [175, null], [181, null], [186, "public-members"], [192, null], [198, null], [204, null], [211, null], [217, null], [223, null], [229, null], [235, null], [238, null], [242, "public-members"], [253, "public-members"], [263, "public-members"], [273, "public-members"], [287, null], [294, "public-members"], [310, "public-members"]], "Raises": [[203, "raises"]], "Returns": [[3, null], [4, "returns"], [5, "returns"], [6, "returns"], [7, null], [9, "returns"], [10, "returns"], [12, null], [13, null], [14, null], [15, null], [18, null], [19, null], [20, null], [21, null], [26, "returns"], [27, "returns"], [29, null], [30, null], [34, "returns"], [35, "returns"], [36, null], [37, null], [38, null], [41, null], [42, null], [46, null], [47, null], [50, null], [57, null], [58, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [63, null], [64, null], [65, "returns"], [66, "returns"], [67, null], [68, "returns"], [69, "returns"], [70, "returns"], [71, null], [72, null], [74, null], [75, null], [76, null], [77, null], [78, null], [79, null], [80, null], [81, null], [82, null], [83, null], [84, null], [85, null], [87, "returns"], [88, "returns"], [89, "returns"], [90, null], [91, "returns"], [94, null], [95, null], [99, "returns"], [100, "returns"], [106, "returns"], [110, null], [112, null], [113, "returns"], [114, null], [116, null], [117, "returns"], [119, "returns"], [120, null], [122, null], [123, null], [125, "returns"], [126, "returns"], [129, "returns"], [130, "returns"], [131, "returns"], [133, null], [134, null], [135, null], [140, "returns"], [141, "returns"], [142, null], [143, null], [149, null], [150, null], [152, null], [153, null], [154, null], [155, null], [156, "returns"], [157, "returns"], [158, null], [159, null], [162, "returns"], [163, "returns"], [164, null], [167, "returns"], [168, "returns"], [169, null], [172, "returns"], [173, "returns"], [174, null], [177, "returns"], [178, "returns"], [180, null], [183, "returns"], [184, "returns"], [185, null], [189, "returns"], [190, null], [194, "returns"], [195, "returns"], [197, null], [200, "returns"], [201, "returns"], [202, null], [203, "returns"], [206, "returns"], [207, "returns"], [209, null], [210, null], [213, "returns"], [214, "returns"], [215, null], [216, null], [219, "returns"], [220, "returns"], [221, null], [222, null], [225, "returns"], [226, "returns"], [227, null], [228, null], [231, "returns"], [232, "returns"], [233, null], [234, null], [237, null], [240, null], [244, "returns"], [245, "returns"], [246, "returns"], [247, null], [249, null], [250, null], [252, null], [255, "returns"], [256, "returns"], [257, "returns"], [258, null], [260, null], [261, null], [262, null], [265, "returns"], [266, "returns"], [267, "returns"], [268, null], [270, null], [271, null], [272, null], [275, "returns"], [276, "returns"], [277, "returns"], [278, null], [279, null], [281, null], [282, null], [283, null], [284, null], [285, null], [286, null], [288, null], [289, null], [290, null], [293, null], [296, "returns"], [297, null], [298, null], [300, null], [301, null], [302, null], [303, null], [304, "returns"], [305, "returns"], [308, null], [309, null], [317, "returns"], [318, null], [320, null], [321, null], [322, "returns"], [323, "returns"], [324, null]], "Testing": [[335, null]], "Wake steering": [[333, null]], "Welcome to foxes-opt": [[330, null]], "foxes_opt.constraints": [[325, "foxes-opt-constraints"]], "foxes_opt.core": [[325, "foxes-opt-core"]], "foxes_opt.objectives": [[325, "foxes-opt-objectives"]], "foxes_opt.problems": [[325, "foxes-opt-problems"], [326, null]], "foxes_opt.problems.layout": [[326, "foxes-opt-problems-layout"]], "foxes_opt.problems.layout.geom_layouts": [[326, "foxes-opt-problems-layout-geom-layouts"], [327, null]], "foxes_opt.problems.layout.geom_layouts.constraints": [[327, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes_opt.problems.layout.geom_layouts.objectives": [[327, "foxes-opt-problems-layout-geom-layouts-objectives"]], "foxes_opt_yaml": [[334, "foxes-opt-yaml"]], "v0.1": [[0, "v0-1"]], "v0.1.3": [[0, "v0-1-3"]], "v0.1.4": [[0, "v0-1-4"]], "v0.1.5": [[0, "v0-1-5"]], "v0.1.6": [[0, "v0-1-6"]], "v0.1.7": [[0, "v0-1-7"]], "v0.2": [[0, "v0-2"]], "v0.2.1": [[0, "v0-2-1"]], "v0.2.2": [[0, "v0-2-2"]], "v0.3": [[0, "v0-3"]]}, "docurls": ["CHANGELOG.html", "_foxesopt/constraints/AreaGeometryConstraint.html", "_foxesopt/constraints/AreaGeometryConstraint.__init__.html", "_foxesopt/constraints/AreaGeometryConstraint.__str__.html", "_foxesopt/constraints/AreaGeometryConstraint.ana_deriv.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_population.html", "_foxesopt/constraints/AreaGeometryConstraint.component_names.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_population.html", "_foxesopt/constraints/AreaGeometryConstraint.initialize.html", "_foxesopt/constraints/AreaGeometryConstraint.initialized.html", "_foxesopt/constraints/AreaGeometryConstraint.n_components.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_float.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_int.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_float.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_int.html", "_foxesopt/constraints/FarmBoundaryConstraint.html", "_foxesopt/constraints/FarmBoundaryConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.html", "_foxesopt/constraints/MinDistConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.calc_individual.html", "_foxesopt/constraints/MinDistConstraint.calc_population.html", "_foxesopt/constraints/MinDistConstraint.initialize.html", "_foxesopt/constraints/MinDistConstraint.n_components.html", "_foxesopt/constraints/MinDistConstraint.vardeps_float.html", "_foxesopt/core/FarmConstraint.html", "_foxesopt/core/FarmConstraint.__init__.html", "_foxesopt/core/FarmConstraint.add_to_layout_figure.html", "_foxesopt/core/FarmConstraint.calc_individual.html", "_foxesopt/core/FarmConstraint.calc_population.html", "_foxesopt/core/FarmConstraint.farm.html", "_foxesopt/core/FarmConstraint.n_components.html", "_foxesopt/core/FarmConstraint.n_sel_turbines.html", "_foxesopt/core/FarmConstraint.new.html", "_foxesopt/core/FarmConstraint.print_models.html", "_foxesopt/core/FarmConstraint.sel_turbines.html", "_foxesopt/core/FarmConstraint.vardeps_float.html", "_foxesopt/core/FarmObjective.html", "_foxesopt/core/FarmObjective.__init__.html", "_foxesopt/core/FarmObjective.add_to_layout_figure.html", "_foxesopt/core/FarmObjective.farm.html", "_foxesopt/core/FarmObjective.n_sel_turbines.html", "_foxesopt/core/FarmObjective.new.html", "_foxesopt/core/FarmObjective.print_models.html", "_foxesopt/core/FarmObjective.sel_turbines.html", "_foxesopt/core/FarmOptProblem.html", "_foxesopt/core/FarmOptProblem.INT_INF.html", "_foxesopt/core/FarmOptProblem.__init__.html", "_foxesopt/core/FarmOptProblem.add_constraint.html", "_foxesopt/core/FarmOptProblem.add_objective.html", "_foxesopt/core/FarmOptProblem.add_to_layout_figure.html", "_foxesopt/core/FarmOptProblem.all_turbines.html", "_foxesopt/core/FarmOptProblem.apply_individual.html", "_foxesopt/core/FarmOptProblem.apply_population.html", "_foxesopt/core/FarmOptProblem.calc_gradients.html", "_foxesopt/core/FarmOptProblem.check_constraints_individual.html", "_foxesopt/core/FarmOptProblem.check_constraints_population.html", "_foxesopt/core/FarmOptProblem.constraints_tol.html", "_foxesopt/core/FarmOptProblem.counter.html", "_foxesopt/core/FarmOptProblem.evaluate_individual.html", "_foxesopt/core/FarmOptProblem.evaluate_population.html", "_foxesopt/core/FarmOptProblem.farm.html", "_foxesopt/core/FarmOptProblem.finalize_individual.html", "_foxesopt/core/FarmOptProblem.finalize_population.html", "_foxesopt/core/FarmOptProblem.get_gradients.html", "_foxesopt/core/FarmOptProblem.initial_values_float.html", "_foxesopt/core/FarmOptProblem.initial_values_int.html", "_foxesopt/core/FarmOptProblem.initialize.html", "_foxesopt/core/FarmOptProblem.max_values_constraints.html", "_foxesopt/core/FarmOptProblem.max_values_float.html", "_foxesopt/core/FarmOptProblem.max_values_int.html", "_foxesopt/core/FarmOptProblem.maximize_objs.html", "_foxesopt/core/FarmOptProblem.min_values_constraints.html", "_foxesopt/core/FarmOptProblem.min_values_float.html", "_foxesopt/core/FarmOptProblem.min_values_int.html", "_foxesopt/core/FarmOptProblem.n_constraints.html", "_foxesopt/core/FarmOptProblem.n_objectives.html", "_foxesopt/core/FarmOptProblem.n_sel_turbines.html", "_foxesopt/core/FarmOptProblem.n_vars_float.html", "_foxesopt/core/FarmOptProblem.n_vars_int.html", "_foxesopt/core/FarmOptProblem.new.html", "_foxesopt/core/FarmOptProblem.parse_tvar.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_individual.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_population.html", "_foxesopt/core/FarmOptProblem.sel_turbines.html", "_foxesopt/core/FarmOptProblem.tvar.html", "_foxesopt/core/FarmOptProblem.update_problem_individual.html", "_foxesopt/core/FarmOptProblem.update_problem_population.html", "_foxesopt/core/FarmOptProblem.var_names_float.html", "_foxesopt/core/FarmOptProblem.var_names_int.html", "_foxesopt/core/FarmVarsProblem.html", "_foxesopt/core/FarmVarsProblem.initialize.html", "_foxesopt/core/FarmVarsProblem.new.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_population.html", "_foxesopt/core/FarmVarsProblem.update_problem_individual.html", "_foxesopt/core/FarmVarsProblem.update_problem_population.html", "_foxesopt/core/PopStates.html", "_foxesopt/core/PopStates.__init__.html", "_foxesopt/core/PopStates.__repr__.html", "_foxesopt/core/PopStates.calculate.html", "_foxesopt/core/PopStates.ensure_variables.html", "_foxesopt/core/PopStates.finalize.html", "_foxesopt/core/PopStates.get_data.html", "_foxesopt/core/PopStates.index.html", "_foxesopt/core/PopStates.initialize.html", "_foxesopt/core/PopStates.initialized.html", "_foxesopt/core/PopStates.load_data.html", "_foxesopt/core/PopStates.model_id.html", "_foxesopt/core/PopStates.new.html", "_foxesopt/core/PopStates.output_coords.html", "_foxesopt/core/PopStates.output_point_vars.html", "_foxesopt/core/PopStates.reset.html", "_foxesopt/core/PopStates.run_calculation.html", "_foxesopt/core/PopStates.running.html", "_foxesopt/core/PopStates.set_running.html", "_foxesopt/core/PopStates.size.html", "_foxesopt/core/PopStates.sub_models.html", "_foxesopt/core/PopStates.unset_running.html", "_foxesopt/core/PopStates.var.html", "_foxesopt/core/PopStates.weights.html", "_foxesopt/objectives/FarmVarObjective.html", "_foxesopt/objectives/FarmVarObjective.__init__.html", "_foxesopt/objectives/FarmVarObjective.calc_individual.html", "_foxesopt/objectives/FarmVarObjective.calc_population.html", "_foxesopt/objectives/FarmVarObjective.finalize_individual.html", "_foxesopt/objectives/FarmVarObjective.initialize.html", "_foxesopt/objectives/FarmVarObjective.maximize.html", "_foxesopt/objectives/FarmVarObjective.n_components.html", "_foxesopt/objectives/FarmVarObjective.vardeps_float.html", "_foxesopt/objectives/MaxFarmPower.html", "_foxesopt/objectives/MaxFarmPower.__init__.html", "_foxesopt/objectives/MaxNTurbines.html", "_foxesopt/objectives/MaxNTurbines.__init__.html", "_foxesopt/objectives/MaxNTurbines.calc_individual.html", "_foxesopt/objectives/MaxNTurbines.calc_population.html", "_foxesopt/objectives/MaxNTurbines.maximize.html", "_foxesopt/objectives/MaxNTurbines.n_components.html", "_foxesopt/objectives/MinimalMaxTI.html", "_foxesopt/objectives/MinimalMaxTI.__init__.html", "_foxesopt/problems/OptFarmVars.html", "_foxesopt/problems/OptFarmVars.__init__.html", "_foxesopt/problems/OptFarmVars.add_var.html", "_foxesopt/problems/OptFarmVars.initial_values_float.html", "_foxesopt/problems/OptFarmVars.initial_values_int.html", "_foxesopt/problems/OptFarmVars.initialize.html", "_foxesopt/problems/OptFarmVars.max_values_float.html", "_foxesopt/problems/OptFarmVars.max_values_int.html", "_foxesopt/problems/OptFarmVars.min_values_float.html", "_foxesopt/problems/OptFarmVars.min_values_int.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_individual.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_population.html", "_foxesopt/problems/OptFarmVars.var_names_float.html", "_foxesopt/problems/OptFarmVars.var_names_int.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.new.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintscdist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.new.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.new.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "api.html", "api_problems.html", "api_problems_geom.html", "citation.html", "examples.html", "index.html", "installation.html", "notebooks/layout_opt.html", "notebooks/wake_steering.html", "parameter_files.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"foxes_opt.constraints": [[1, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [22, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [24, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes_opt.constraints.AreaGeometryConstraint": [[2, 1, 1, "", "__init__", "Constructor."], [3, 1, 1, "", "__str__", "Get info string"], [4, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [5, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [6, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [7, 3, 1, "", "component_names", "The names of the components"], [8, 1, 1, "", "finalize", "Finalize the object."], [9, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [10, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [11, 1, 1, "", "initialize", "Initialize the object."], [12, 3, 1, "", "initialized", "Flag for finished initialization"], [13, 1, 1, "", "n_components", "Returns the number of components of the function."], [14, 3, 1, "", "n_vars_float", "The number of float variables"], [15, 3, 1, "", "n_vars_int", "The number of int variables"], [16, 1, 1, "", "rename_vars_float", "Rename float variables."], [17, 1, 1, "", "rename_vars_int", "Rename integer variables."], [18, 3, 1, "", "var_names_float", "The names of the float variables"], [19, 3, 1, "", "var_names_int", "The names of the integer variables"], [20, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [21, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes_opt.constraints.AreaGeometryConstraint.__init__": [[2, 2, 2, "", "D", "Constructor."], [2, 2, 2, "", "disc_inside", "Constructor."], [2, 2, 2, "", "geometry", "Constructor."], [2, 2, 2, "", "kwargs", "Constructor."], [2, 2, 2, "", "name", "Constructor."], [2, 2, 2, "", "problem", "Constructor."], [2, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.constraints.AreaGeometryConstraint.ana_deriv": [[4, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "foxes_opt.constraints.AreaGeometryConstraint.calc_individual": [[5, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.constraints.AreaGeometryConstraint.calc_population": [[6, 2, 2, "", "components", "Calculate values for all individuals of a population."], [6, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [6, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [6, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize": [[8, 2, 2, "", "verbosity", "Finalize the object."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize_individual": [[9, 2, 2, "", "problem_results", "Finalization, given the champion data."], [9, 2, 2, "", "vars_float", "Finalization, given the champion data."], [9, 2, 2, "", "vars_int", "Finalization, given the champion data."], [9, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize_population": [[10, 2, 2, "", "problem_results", "Finalization, given the final population data."], [10, 2, 2, "", "vars_float", "Finalization, given the final population data."], [10, 2, 2, "", "vars_int", "Finalization, given the final population data."], [10, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "foxes_opt.constraints.AreaGeometryConstraint.initialize": [[11, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_float": [[16, 2, 2, "", "varmap", "Rename float variables."]], "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_int": [[17, 2, 2, "", "varmap", "Rename integer variables."]], "foxes_opt.constraints.FarmBoundaryConstraint": [[23, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.constraints.FarmBoundaryConstraint.__init__": [[23, 2, 2, "", "kwargs", "Constructor."], [23, 2, 2, "", "name", "Constructor."], [23, 2, 2, "", "problem", "Constructor."]], "foxes_opt.constraints.MinDistConstraint": [[25, 1, 1, "", "__init__", "Constructor."], [26, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [27, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [28, 1, 1, "", "initialize", "Initialize the constaint."], [29, 1, 1, "", "n_components", "Returns the number of components of the function."], [30, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.constraints.MinDistConstraint.__init__": [[25, 2, 2, "", "kwargs", "Constructor."], [25, 2, 2, "", "min_dist", "Constructor."], [25, 2, 2, "", "min_dist_unit", "Constructor."], [25, 2, 2, "", "name", "Constructor."], [25, 2, 2, "", "problem", "Constructor."], [25, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.constraints.MinDistConstraint.calc_individual": [[26, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.constraints.MinDistConstraint.calc_population": [[27, 2, 2, "", "components", "Calculate values for all individuals of a population."], [27, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [27, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [27, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.constraints.MinDistConstraint.initialize": [[28, 2, 2, "", "verbosity", "Initialize the constaint."]], "foxes_opt.core": [[31, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [43, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [51, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [96, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [103, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes_opt.core.FarmConstraint": [[32, 1, 1, "", "__init__", "Constructor."], [33, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [34, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [35, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [36, 3, 1, "", "farm", "The wind farm"], [37, 1, 1, "", "n_components", "Returns the number of components of the function."], [38, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [39, 1, 1, "", "new", "Run-time farm constraint factory."], [40, 1, 1, "", "print_models", "Prints all model names."], [41, 3, 1, "", "sel_turbines", "The list of selected turbines"], [42, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.core.FarmConstraint.__init__": [[32, 2, 2, "", "kwargs", "Constructor."], [32, 2, 2, "", "name", "Constructor."], [32, 2, 2, "", "problem", "Constructor."], [32, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.core.FarmConstraint.add_to_layout_figure": [[33, 2, 2, "", "ax", "Add to a layout figure"], [33, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmConstraint.calc_individual": [[34, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.core.FarmConstraint.calc_population": [[35, 2, 2, "", "components", "Calculate values for all individuals of a population."], [35, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [35, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [35, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.core.FarmConstraint.new": [[39, 2, 2, "", "args", "Run-time farm constraint factory."], [39, 2, 2, "", "constraint_type", "Run-time farm constraint factory."], [39, 2, 2, "", "kwargs", "Run-time farm constraint factory."]], "foxes_opt.core.FarmObjective": [[44, 1, 1, "", "__init__", "Constraints."], [45, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [46, 3, 1, "", "farm", "The wind farm"], [47, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [48, 1, 1, "", "new", "Run-time farm objective factory."], [49, 1, 1, "", "print_models", "Prints all model names."], [50, 3, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes_opt.core.FarmObjective.__init__": [[44, 2, 2, "", "kwargs", "Constraints."], [44, 2, 2, "", "name", "Constraints."], [44, 2, 2, "", "problem", "Constraints."], [44, 2, 2, "", "sel_turbines", "Constraints."]], "foxes_opt.core.FarmObjective.add_to_layout_figure": [[45, 2, 2, "", "ax", "Add to a layout figure"], [45, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmObjective.new": [[48, 2, 2, "", "args", "Run-time farm objective factory."], [48, 2, 2, "", "kwargs", "Run-time farm objective factory."], [48, 2, 2, "", "objective_type", "Run-time farm objective factory."]], "foxes_opt.core.FarmOptProblem": [[52, 4, 1, "", "INT_INF", ""], [53, 1, 1, "", "__init__", "Constructor."], [54, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [55, 1, 1, "", "add_objective", "Add an objective to the problem."], [56, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [57, 3, 1, "", "all_turbines", "Flag for all turbines optimization"], [58, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [59, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [60, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [61, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [62, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [63, 3, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [64, 3, 1, "", "counter", "The current value of the application counter"], [65, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [66, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [67, 3, 1, "", "farm", "The wind farm"], [68, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [69, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [70, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [71, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [72, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [73, 1, 1, "", "initialize", "Initialize the object."], [74, 3, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [75, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [76, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [77, 3, 1, "", "maximize_objs", "Flags for objective maximization"], [78, 3, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [79, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [80, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [81, 3, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [82, 3, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [83, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [84, 3, 1, "", "n_vars_float", "The number of float variables"], [85, 3, 1, "", "n_vars_int", "The number of int variables"], [86, 1, 1, "", "new", "Run-time farm opt problem factory."], [87, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [88, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [89, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [90, 3, 1, "", "sel_turbines", "The selected turbines"], [91, 1, 1, "", "tvar", "Gets turbine variable name"], [92, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [93, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [94, 1, 1, "", "var_names_float", "The names of float variables."], [95, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes_opt.core.FarmOptProblem.__init__": [[53, 2, 2, "", "algo", "Constructor."], [53, 2, 2, "", "calc_farm_args", "Constructor."], [53, 2, 2, "", "kwargs", "Constructor."], [53, 2, 2, "", "name", "Constructor."], [53, 2, 2, "", "points", "Constructor."], [53, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.core.FarmOptProblem.add_constraint": [[54, 2, 2, "", "constraint", "Add a constraint to the problem."], [54, 2, 2, "", "varmap_float", "Add a constraint to the problem."], [54, 2, 2, "", "varmap_int", "Add a constraint to the problem."], [54, 2, 2, "", "verbosity", "Add a constraint to the problem."]], "foxes_opt.core.FarmOptProblem.add_objective": [[55, 2, 2, "", "objective", "Add an objective to the problem."], [55, 2, 2, "", "varmap_float", "Add an objective to the problem."], [55, 2, 2, "", "varmap_int", "Add an objective to the problem."], [55, 2, 2, "", "verbosity", "Add an objective to the problem."]], "foxes_opt.core.FarmOptProblem.add_to_layout_figure": [[56, 2, 2, "", "ax", "Add to a layout figure"], [56, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmOptProblem.apply_individual": [[58, 2, 2, "", "vars_float", "Apply new variables to the problem."], [58, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.core.FarmOptProblem.apply_population": [[59, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [59, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.core.FarmOptProblem.calc_gradients": [[60, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [60, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "foxes_opt.core.FarmOptProblem.check_constraints_individual": [[61, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [61, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "foxes_opt.core.FarmOptProblem.check_constraints_population": [[62, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [62, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "foxes_opt.core.FarmOptProblem.evaluate_individual": [[65, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [65, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [65, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "foxes_opt.core.FarmOptProblem.evaluate_population": [[66, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [66, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [66, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "foxes_opt.core.FarmOptProblem.finalize_individual": [[68, 2, 2, "", "vars_float", "Finalization, given the champion data."], [68, 2, 2, "", "vars_int", "Finalization, given the champion data."], [68, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.core.FarmOptProblem.finalize_population": [[69, 2, 2, "", "vars_float", "Finalization, given the final population data."], [69, 2, 2, "", "vars_int", "Finalization, given the final population data."], [69, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "foxes_opt.core.FarmOptProblem.get_gradients": [[70, 2, 2, "", "components", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "func", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "pop", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "vars", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "vars_float", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "vars_int", "Obtain gradients of a function that is linked to the problem."], [70, 2, 2, "", "verbosity", "Obtain gradients of a function that is linked to the problem."]], "foxes_opt.core.FarmOptProblem.initialize": [[73, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.core.FarmOptProblem.new": [[86, 2, 2, "", "args", "Run-time farm opt problem factory."], [86, 2, 2, "", "kwargs", "Run-time farm opt problem factory."], [86, 2, 2, "", "problem_type", "Run-time farm opt problem factory."]], "foxes_opt.core.FarmOptProblem.parse_tvar": [[87, 2, 2, "", "tvr", "Parse foxes variable name and turbine index from turbine variable"]], "foxes_opt.core.FarmOptProblem.prob_res_einsum_individual": [[88, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [88, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "foxes_opt.core.FarmOptProblem.prob_res_einsum_population": [[89, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [89, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "foxes_opt.core.FarmOptProblem.tvar": [[91, 2, 2, "", "turbine_i", "Gets turbine variable name"], [91, 2, 2, "", "var", "Gets turbine variable name"]], "foxes_opt.core.FarmOptProblem.update_problem_individual": [[92, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [92, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmOptProblem.update_problem_population": [[93, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [93, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem": [[97, 1, 1, "", "initialize", "Initialize the object."], [98, 1, 1, "", "new", "Run-time farm vars opt problem factory."], [99, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [100, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [101, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [102, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem.initialize": [[97, 2, 2, "", "kwargs", "Initialize the object."], [97, 2, 2, "", "post_rotor_vars", "Initialize the object."], [97, 2, 2, "", "pre_rotor_vars", "Initialize the object."], [97, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.core.FarmVarsProblem.new": [[98, 2, 2, "", "args", "Run-time farm vars opt problem factory."], [98, 2, 2, "", "kwargs", "Run-time farm vars opt problem factory."], [98, 2, 2, "", "problem_type", "Run-time farm vars opt problem factory."]], "foxes_opt.core.FarmVarsProblem.opt2farm_vars_individual": [[99, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [99, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.core.FarmVarsProblem.opt2farm_vars_population": [[100, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [100, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [100, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.core.FarmVarsProblem.update_problem_individual": [[101, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [101, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem.update_problem_population": [[102, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [102, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.PopStates": [[104, 1, 1, "", "__init__", "Constructor."], [105, 1, 1, "", "__repr__", "Return repr(self)."], [106, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [107, 1, 1, "", "ensure_variables", "Add variables to tdata, initialized with NaN"], [108, 1, 1, "", "finalize", "Finalizes the model."], [109, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [110, 1, 1, "", "index", "The index list"], [111, 1, 1, "", "initialize", "Initializes the model."], [112, 3, 1, "", "initialized", "Initialization flag."], [113, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [114, 3, 1, "", "model_id", "Unique id based on the model type."], [115, 1, 1, "", "new", "Run-time states factory."], [116, 1, 1, "", "output_coords", "Gets the coordinates of all output arrays"], [117, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [118, 1, 1, "", "reset", "Reset the states, optionally select states"], [119, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [120, 3, 1, "", "running", "Flag for currently running models"], [121, 1, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [122, 1, 1, "", "size", "The total number of states."], [123, 1, 1, "", "sub_models", "List of all sub-models"], [124, 1, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [125, 1, 1, "", "var", "Creates a model specific variable name."], [126, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes_opt.core.PopStates.__init__": [[104, 2, 2, "", "n_pop", "Constructor."], [104, 2, 2, "", "states", "Constructor."]], "foxes_opt.core.PopStates.calculate": [[106, 2, 2, "", "algo", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [106, 2, 2, "", "fdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [106, 2, 2, "", "mdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [106, 2, 2, "", "pdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."]], "foxes_opt.core.PopStates.ensure_variables": [[107, 2, 2, "", "algo", "Add variables to tdata, initialized with NaN"], [107, 2, 2, "", "fdata", "Add variables to tdata, initialized with NaN"], [107, 2, 2, "", "mdata", "Add variables to tdata, initialized with NaN"], [107, 2, 2, "", "tdata", "Add variables to tdata, initialized with NaN"]], "foxes_opt.core.PopStates.finalize": [[108, 2, 2, "", "algo", "Finalizes the model."], [108, 2, 2, "", "verbosity", "Finalizes the model."]], "foxes_opt.core.PopStates.get_data": [[109, 2, 2, "", "accept_nan", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "accept_none", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "algo", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "downwind_index", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "fdata", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "lookup", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "mdata", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "selection", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "target", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "tdata", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "upcast", "Getter for a data entry in the model object or provided data sources"], [109, 2, 2, "", "variable", "Getter for a data entry in the model object or provided data sources"]], "foxes_opt.core.PopStates.initialize": [[111, 2, 2, "", "algo", "Initializes the model."], [111, 2, 2, "", "verbosity", "Initializes the model."]], "foxes_opt.core.PopStates.load_data": [[113, 2, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [113, 2, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes_opt.core.PopStates.new": [[115, 2, 2, "", "args", "Run-time states factory."], [115, 2, 2, "", "kwargs", "Run-time states factory."], [115, 2, 2, "", "states_type", "Run-time states factory."]], "foxes_opt.core.PopStates.output_point_vars": [[117, 2, 2, "", "algo", "The variables which are being modified by the model."]], "foxes_opt.core.PopStates.reset": [[118, 2, 2, "", "algo", "Reset the states, optionally select states"], [118, 2, 2, "", "states_loc", "Reset the states, optionally select states"], [118, 2, 2, "", "states_sel", "Reset the states, optionally select states"], [118, 2, 2, "", "verbosity", "Reset the states, optionally select states"]], "foxes_opt.core.PopStates.run_calculation": [[119, 2, 2, "", "algo", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [119, 2, 2, "", "calc_pars", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [119, 2, 2, "", "data", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [119, 2, 2, "", "out_vars", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes_opt.core.PopStates.set_running": [[121, 2, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [121, 2, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [121, 2, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [121, 2, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [121, 2, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes_opt.core.PopStates.unset_running": [[124, 2, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [124, 2, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [124, 2, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [124, 2, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [124, 2, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes_opt.core.PopStates.var": [[125, 2, 2, "", "v", "Creates a model specific variable name."]], "foxes_opt.core.PopStates.weights": [[126, 2, 2, "", "algo", "The statistical weights of all states."]], "foxes_opt.objectives": [[127, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [136, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [138, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [144, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes_opt.objectives.FarmVarObjective": [[128, 1, 1, "", "__init__", "Constructor."], [129, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [130, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [131, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [132, 1, 1, "", "initialize", "Initialize the object."], [133, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [134, 1, 1, "", "n_components", "Returns the number of components of the function."], [135, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.objectives.FarmVarObjective.__init__": [[128, 2, 2, "", "contract_states", "Constructor."], [128, 2, 2, "", "contract_turbines", "Constructor."], [128, 2, 2, "", "deps", "Constructor."], [128, 2, 2, "", "kwargs", "Constructor."], [128, 2, 2, "", "minimize", "Constructor."], [128, 2, 2, "", "name", "Constructor."], [128, 2, 2, "", "problem", "Constructor."], [128, 2, 2, "", "scale", "Constructor."], [128, 2, 2, "", "variable", "Constructor."]], "foxes_opt.objectives.FarmVarObjective.calc_individual": [[129, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [129, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [129, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [129, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.objectives.FarmVarObjective.calc_population": [[130, 2, 2, "", "components", "Calculate values for all individuals of a population."], [130, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [130, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [130, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.objectives.FarmVarObjective.finalize_individual": [[131, 2, 2, "", "problem_results", "Finalization, given the champion data."], [131, 2, 2, "", "vars_float", "Finalization, given the champion data."], [131, 2, 2, "", "vars_int", "Finalization, given the champion data."], [131, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.objectives.FarmVarObjective.initialize": [[132, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.objectives.MaxFarmPower": [[137, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.objectives.MaxFarmPower.__init__": [[137, 2, 2, "", "kwargs", "Constructor."], [137, 2, 2, "", "name", "Constructor."], [137, 2, 2, "", "problem", "Constructor."]], "foxes_opt.objectives.MaxNTurbines": [[139, 1, 1, "", "__init__", "Constructor."], [140, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [141, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [142, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [143, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.objectives.MaxNTurbines.__init__": [[139, 2, 2, "", "check_valid", "Constructor."], [139, 2, 2, "", "kwargs", "Constructor."], [139, 2, 2, "", "name", "Constructor."], [139, 2, 2, "", "problem", "Constructor."]], "foxes_opt.objectives.MaxNTurbines.calc_individual": [[140, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [140, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [140, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [140, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.objectives.MaxNTurbines.calc_population": [[141, 2, 2, "", "components", "Calculate values for all individuals of a population."], [141, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [141, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [141, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.objectives.MinimalMaxTI": [[145, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.objectives.MinimalMaxTI.__init__": [[145, 2, 2, "", "kwargs", "Constructor."], [145, 2, 2, "", "name", "Constructor."], [145, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems": [[146, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes_opt.problems.OptFarmVars": [[147, 1, 1, "", "__init__", "Constructor."], [148, 1, 1, "", "add_var", "Add a variable."], [149, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [150, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [151, 1, 1, "", "initialize", "Initialize the object."], [152, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [153, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [154, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [155, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [156, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [157, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [158, 1, 1, "", "var_names_float", "The names of float variables."], [159, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.OptFarmVars.__init__": [[147, 2, 2, "", "args", "Constructor."], [147, 2, 2, "", "kwargs", "Constructor."]], "foxes_opt.problems.OptFarmVars.add_var": [[148, 2, 2, "", "init", "Add a variable."], [148, 2, 2, "", "level", "Add a variable."], [148, 2, 2, "", "max", "Add a variable."], [148, 2, 2, "", "min", "Add a variable."], [148, 2, 2, "", "model_key", "Add a variable."], [148, 2, 2, "", "pre_rotor", "Add a variable."], [148, 2, 2, "", "sel", "Add a variable."], [148, 2, 2, "", "typ", "Add a variable."], [148, 2, 2, "", "variable", "Add a variable."]], "foxes_opt.problems.OptFarmVars.initialize": [[151, 2, 2, "", "kwargs", "Initialize the object."], [151, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.OptFarmVars.opt2farm_vars_individual": [[156, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [156, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.OptFarmVars.opt2farm_vars_population": [[157, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [157, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [157, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout": [[287, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [294, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [310, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes_opt.problems.layout.FarmLayoutOptProblem": [[288, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [289, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [290, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [291, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [292, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [293, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_individual": [[291, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [291, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_population": [[292, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [292, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem": [[295, 1, 1, "", "__init__", "Constraints."], [296, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [297, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [298, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [299, 1, 1, "", "initialize", "Initialize the object."], [300, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [301, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [302, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [303, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [304, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [305, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [306, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [307, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [308, 1, 1, "", "var_names_float", "The names of float variables."], [309, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.__init__": [[295, 2, 2, "", "algo", "Constraints."], [295, 2, 2, "", "kwargs", "Constraints."], [295, 2, 2, "", "max_dist", "Constraints."], [295, 2, 2, "", "min_dist", "Constraints."], [295, 2, 2, "", "n_grids", "Constraints."], [295, 2, 2, "", "n_row_max", "Constraints."], [295, 2, 2, "", "name", "Constraints."], [295, 2, 2, "", "runner", "Constraints."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual": [[296, 2, 2, "", "vars_float", "Finalization, given the champion data."], [296, 2, 2, "", "vars_int", "Finalization, given the champion data."], [296, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initialize": [[299, 2, 2, "", "kwargs", "Initialize the object."], [299, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual": [[304, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [304, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population": [[305, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [305, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [305, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual": [[306, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [306, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population": [[307, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [307, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegularLayoutOptProblem": [[311, 4, 1, "", "ANGLE", ""], [312, 4, 1, "", "OFFSET_X", ""], [313, 4, 1, "", "OFFSET_Y", ""], [314, 4, 1, "", "SPACING_X", ""], [315, 4, 1, "", "SPACING_Y", ""], [316, 1, 1, "", "__init__", "Constructor."], [317, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [318, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [319, 1, 1, "", "initialize", "Initialize the object."], [320, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [321, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [322, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [323, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [324, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.__init__": [[316, 2, 2, "", "algo", "Constructor."], [316, 2, 2, "", "kwargs", "Constructor."], [316, 2, 2, "", "min_spacing", "Constructor."], [316, 2, 2, "", "name", "Constructor."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.finalize_individual": [[317, 2, 2, "", "vars_float", "Finalization, given the champion data."], [317, 2, 2, "", "vars_int", "Finalization, given the champion data."], [317, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.initialize": [[319, 2, 2, "", "kwargs", "Initialize the object."], [319, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual": [[322, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [322, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population": [[323, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [323, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [323, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.geom_layouts": [[242, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [253, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [263, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [273, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout": [[243, 1, 1, "", "__init__", "Constructor."], [244, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [245, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [246, 1, 1, "", "get_fig", "Return plotly figure axis."], [247, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [248, 1, 1, "", "initialize", "Initialize the object."], [249, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [250, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [251, 1, 1, "", "new", "Run-time problem factory."], [252, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.__init__": [[243, 2, 2, "", "D", "Constructor."], [243, 2, 2, "", "boundary", "Constructor."], [243, 2, 2, "", "calc_valid", "Constructor."], [243, 2, 2, "", "min_dist", "Constructor."], [243, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_individual": [[244, 2, 2, "", "vars_float", "Apply new variables to the problem."], [244, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_population": [[245, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [245, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.get_fig": [[246, 2, 2, "", "ax", "Return plotly figure axis."], [246, 2, 2, "", "bargs", "Return plotly figure axis."], [246, 2, 2, "", "title", "Return plotly figure axis."], [246, 2, 2, "", "true_circle", "Return plotly figure axis."], [246, 2, 2, "", "valid", "Return plotly figure axis."], [246, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.initialize": [[248, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.new": [[251, 2, 2, "", "args", "Run-time problem factory."], [251, 2, 2, "", "kwargs", "Run-time problem factory."], [251, 2, 2, "", "problem_type", "Run-time problem factory."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded": [[254, 1, 1, "", "__init__", "Constructor."], [255, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [256, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [257, 1, 1, "", "get_fig", "Return plotly figure axis."], [258, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [259, 1, 1, "", "initialize", "Initialize the object."], [260, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [261, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [262, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__": [[254, 2, 2, "", "D", "Constructor."], [254, 2, 2, "", "boundary", "Constructor."], [254, 2, 2, "", "grid_spacing", "Constructor."], [254, 2, 2, "", "min_dist", "Constructor."], [254, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual": [[255, 2, 2, "", "vars_float", "Apply new variables to the problem."], [255, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population": [[256, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [256, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig": [[257, 2, 2, "", "ax", "Return plotly figure axis."], [257, 2, 2, "", "bargs", "Return plotly figure axis."], [257, 2, 2, "", "title", "Return plotly figure axis."], [257, 2, 2, "", "true_circle", "Return plotly figure axis."], [257, 2, 2, "", "valid", "Return plotly figure axis."], [257, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize": [[259, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid": [[264, 1, 1, "", "__init__", "Constructor."], [265, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [266, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [267, 1, 1, "", "get_fig", "Return plotly figure axis."], [268, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [269, 1, 1, "", "initialize", "Initialize the object."], [270, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [271, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [272, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.__init__": [[264, 2, 2, "", "D", "Constructor."], [264, 2, 2, "", "boundary", "Constructor."], [264, 2, 2, "", "max_dist", "Constructor."], [264, 2, 2, "", "min_dist", "Constructor."], [264, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual": [[265, 2, 2, "", "vars_float", "Apply new variables to the problem."], [265, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_population": [[266, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [266, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.get_fig": [[267, 2, 2, "", "ax", "Return plotly figure axis."], [267, 2, 2, "", "bargs", "Return plotly figure axis."], [267, 2, 2, "", "title", "Return plotly figure axis."], [267, 2, 2, "", "true_circle", "Return plotly figure axis."], [267, 2, 2, "", "valid", "Return plotly figure axis."], [267, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initialize": [[269, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids": [[274, 1, 1, "", "__init__", "Constructor."], [275, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [276, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [277, 1, 1, "", "get_fig", "Return plotly figure axis."], [278, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [279, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [280, 1, 1, "", "initialize", "Initialize the object."], [281, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [282, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [283, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [284, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [285, 1, 1, "", "var_names_float", "The names of float variables."], [286, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.__init__": [[274, 2, 2, "", "D", "Constructor."], [274, 2, 2, "", "boundary", "Constructor."], [274, 2, 2, "", "max_dist", "Constructor."], [274, 2, 2, "", "min_dist", "Constructor."], [274, 2, 2, "", "n_grids", "Constructor."], [274, 2, 2, "", "n_max", "Constructor."], [274, 2, 2, "", "n_row_max", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual": [[275, 2, 2, "", "vars_float", "Apply new variables to the problem."], [275, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_population": [[276, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [276, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.get_fig": [[277, 2, 2, "", "ax", "Return plotly figure axis."], [277, 2, 2, "", "bargs", "Return plotly figure axis."], [277, 2, 2, "", "title", "Return plotly figure axis."], [277, 2, 2, "", "true_circle", "Return plotly figure axis."], [277, 2, 2, "", "valid", "Return plotly figure axis."], [277, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initialize": [[280, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.constraints": [[160, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [165, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [170, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [175, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [181, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [186, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [192, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [198, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [203, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary": [[161, 1, 1, "", "__init__", "Constructor."], [162, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [163, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [164, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.__init__": [[161, 2, 2, "", "D", "Constructor."], [161, 2, 2, "", "kwargs", "Constructor."], [161, 2, 2, "", "n_turbines", "Constructor."], [161, 2, 2, "", "name", "Constructor."], [161, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual": [[162, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [162, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [162, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [162, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_population": [[163, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [163, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [163, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [163, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN": [[166, 1, 1, "", "__init__", "Constructor."], [167, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [168, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [169, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.__init__": [[166, 2, 2, "", "N", "Constructor."], [166, 2, 2, "", "kwargs", "Constructor."], [166, 2, 2, "", "name", "Constructor."], [166, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual": [[167, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [167, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [167, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [167, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_population": [[168, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [168, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [168, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [168, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN": [[171, 1, 1, "", "__init__", "Constructor."], [172, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [173, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [174, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.__init__": [[171, 2, 2, "", "N", "Constructor."], [171, 2, 2, "", "kwargs", "Constructor."], [171, 2, 2, "", "name", "Constructor."], [171, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual": [[172, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [172, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [172, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [172, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population": [[173, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [173, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [173, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [173, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity": [[176, 1, 1, "", "__init__", "Constructor."], [177, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [178, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [179, 1, 1, "", "initialize", "Initialize the object."], [180, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__": [[176, 2, 2, "", "dfactor", "Constructor."], [176, 2, 2, "", "min_value", "Constructor."], [176, 2, 2, "", "name", "Constructor."], [176, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual": [[177, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [177, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [177, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [177, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population": [[178, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [178, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [178, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [178, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize": [[179, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN": [[182, 1, 1, "", "__init__", "Constructor"], [183, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [184, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [185, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.__init__": [[182, 2, 2, "", "N", "Constructor"], [182, 2, 2, "", "kwargs", "Constructor"], [182, 2, 2, "", "name", "Constructor"], [182, 2, 2, "", "problem", "Constructor"]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual": [[183, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [183, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [183, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [183, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_population": [[184, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [184, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [184, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [184, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint": [[187, 1, 1, "", "__init__", "Constructor"], [188, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [189, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [190, 1, 1, "", "get_bounds", "Returns the bounds for all components."], [191, 1, 1, "", "new", "Run-time constraint factory."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.__init__": [[187, 2, 2, "", "args", "Constructor"], [187, 2, 2, "", "kwargs", "Constructor"], [187, 2, 2, "", "tol", "Constructor"]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_individual": [[188, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [188, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_population": [[189, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [189, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.new": [[191, 2, 2, "", "args", "Run-time constraint factory."], [191, 2, 2, "", "constraint_type", "Run-time constraint factory."], [191, 2, 2, "", "kwargs", "Run-time constraint factory."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist": [[193, 1, 1, "", "__init__", "Constructor."], [194, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [195, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [196, 1, 1, "", "initialize", "Initialize the constaint."], [197, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.__init__": [[193, 2, 2, "", "kwargs", "Constructor."], [193, 2, 2, "", "min_dist", "Constructor."], [193, 2, 2, "", "n_turbines", "Constructor."], [193, 2, 2, "", "name", "Constructor."], [193, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual": [[194, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [194, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [194, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [194, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_population": [[195, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [195, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [195, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [195, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.initialize": [[196, 2, 2, "", "verbosity", "Initialize the constaint."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid": [[199, 1, 1, "", "__init__", "Constructor."], [200, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [201, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [202, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.__init__": [[199, 2, 2, "", "kwargs", "Constructor."], [199, 2, 2, "", "name", "Constructor."], [199, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_individual": [[200, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [200, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [200, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [200, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_population": [[201, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [201, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [201, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [201, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.cdist": [[203, 2, 2, "", "XA", "Compute distance between each pair of the two collections of inputs."], [203, 2, 2, "", "XB", "Compute distance between each pair of the two collections of inputs."], [203, 2, 2, "", "kwargs", "Compute distance between each pair of the two collections of inputs."], [203, 2, 2, "", "metric", "Compute distance between each pair of the two collections of inputs."], [203, 2, 2, "", "out", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.objectives": [[204, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [211, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [217, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [223, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [229, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [235, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [238, 0, 1, "", "Objective", "Abstract base class for objective functions."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity": [[205, 1, 1, "", "__init__", "Constructor."], [206, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [207, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [208, 1, 1, "", "initialize", "Initialize the object."], [209, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [210, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__": [[205, 2, 2, "", "dfactor", "Constructor."], [205, 2, 2, "", "min_dist", "Constructor."], [205, 2, 2, "", "name", "Constructor."], [205, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual": [[206, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [206, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [206, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [206, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population": [[207, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [207, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [207, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [207, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize": [[208, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[212, 1, 1, "", "__init__", "Constructor."], [213, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [214, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [215, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [216, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__": [[212, 2, 2, "", "name", "Constructor."], [212, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual": [[213, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [213, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [213, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [213, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population": [[214, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [214, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [214, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [214, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[218, 1, 1, "", "__init__", "Constructor."], [219, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [220, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [221, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [222, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__": [[218, 2, 2, "", "c1", "Constructor."], [218, 2, 2, "", "c2", "Constructor."], [218, 2, 2, "", "c3", "Constructor."], [218, 2, 2, "", "name", "Constructor."], [218, 2, 2, "", "problem", "Constructor."], [218, 2, 2, "", "scale", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual": [[219, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [219, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [219, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [219, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population": [[220, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [220, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [220, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [220, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN": [[224, 1, 1, "", "__init__", "Constructor."], [225, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [226, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [227, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [228, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.__init__": [[224, 2, 2, "", "N", "Constructor."], [224, 2, 2, "", "name", "Constructor."], [224, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual": [[225, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [225, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [225, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [225, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_population": [[226, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [226, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [226, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [226, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN": [[230, 1, 1, "", "__init__", "Constructor."], [231, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [232, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [233, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [234, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.__init__": [[230, 2, 2, "", "name", "Constructor."], [230, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual": [[231, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [231, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [231, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [231, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population": [[232, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [232, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [232, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [232, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMinN": [[236, 1, 1, "", "__init__", "Constructor."], [237, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.__init__": [[236, 2, 2, "", "name", "Constructor."], [236, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective": [[239, 1, 1, "", "__init__", "Constructor"], [240, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [241, 1, 1, "", "new", "Run-time objective function factory."]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective.__init__": [[239, 2, 2, "", "cnames", "Constructor"], [239, 2, 2, "", "n_vars_float", "Constructor"], [239, 2, 2, "", "n_vars_int", "Constructor"], [239, 2, 2, "", "name", "Constructor"], [239, 2, 2, "", "problem", "Constructor"], [239, 2, 2, "", "vnames_float", "Constructor"], [239, 2, 2, "", "vnames_int", "Constructor"]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective.new": [[241, 2, 2, "", "args", "Run-time objective function factory."], [241, 2, 2, "", "kwargs", "Run-time objective function factory."], [241, 2, 2, "", "objective_type", "Run-time objective function factory."]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [53, 60, 70, 103, 109, 119, 295, 316, 332, 333, 334], "0": [1, 8, 9, 10, 11, 22, 24, 28, 31, 43, 51, 54, 55, 60, 61, 62, 68, 69, 70, 73, 96, 97, 103, 108, 111, 113, 118, 121, 124, 127, 128, 131, 132, 136, 138, 144, 146, 151, 160, 165, 170, 175, 179, 181, 186, 188, 189, 192, 196, 198, 203, 204, 208, 211, 217, 218, 223, 229, 235, 238, 242, 248, 253, 259, 263, 269, 273, 280, 287, 294, 296, 299, 310, 317, 319, 330, 332, 333, 334], "00": 332, "000000": 333, "000000e": 332, "00013": 332, "00042": 332, "001": 332, "001255e": 332, "00158": 332, "002029e": 332, "002328e": 332, "00244": 332, "00319": 332, "0036700002": 332, "003716e": 332, "005446e": 332, "007026e": 332, "00_layout_single_st": 0, "01": [332, 333], "010270e": 332, "011095e": 332, "011586e": 332, "015152": 333, "016250": 333, "017582e": 332, "018469e": 332, "019366e": 332, "02": [332, 333], "020780": 333, "024916e": 333, "03": 332, "0325397b": 330, "0325851b": 330, "033843e": 332, "038220e": 332, "03ee3008a": 330, "03sf0635": 330, "04": [332, 333], "0401518036": 332, "043050e": 332, "045212e": 332, "0456": 203, "046954e": 332, "047445e": 332, "047849e": 332, "047884e": 332, "047952e": 332, "048056e": 332, "049293e": 332, "05": [186, 187, 332, 334], "051205e": 332, "052518e": 332, "053169e": 332, "054240e": 332, "05464": 328, "055598e": 332, "058090e": 332, "058344e": 332, "059597e": 332, "06": [332, 333], "060000": 333, "061865e": 332, "062184e": 333, "063621e": 332, "064220e": 332, "065713": 333, "066163e": 333, "067092e": 332, "068005e": 332, "070112": 333, "070116": 333, "070952e": 332, "071983e": 332, "072090": 333, "072494e": 332, "073078": 333, "073104": 333, "073431e": 332, "074588e": 332, "075843e": 333, "077965e": 333, "078524e": 332, "081": 332, "081851e": 332, "082867e": 332, "084184e": 332, "085442e": 332, "087176e": 332, "0893": 203, "091165e": 332, "091182e": 332, "093114e": 332, "094916e": 332, "095298e": 332, "097684e": 332, "098324e": 332, "098345e": 332, "098399e": 332, "099068e": 332, "1": [9, 10, 51, 68, 73, 96, 97, 109, 128, 131, 146, 151, 175, 176, 203, 204, 205, 217, 218, 242, 248, 253, 259, 263, 269, 273, 280, 287, 294, 295, 296, 299, 310, 317, 319, 332, 333, 334], "10": [328, 332, 333, 334], "100": [332, 333, 334], "1000": [332, 333], "10000": 333, "101084205": 330, "101265e": 332, "102335e": 332, "104231e": 332, "1050": 332, "105389e": 332, "105909172766": 332, "107525e": 332, "108688e": 332, "108843e": 332, "109": 332, "11": [332, 333, 334], "1100": [332, 333], "110290e": 332, "111201e": 332, "112445e": 332, "112750e": 332, "114826e": 332, "1150": 332, "115946e": 332, "116990e": 333, "1174": 203, "118256e": 332, "118996e": 332, "119351": 333, "119564": 333, "12": [332, 333], "1200": [332, 333], "121022e": 332, "123371e": 332, "124239e": 332, "124642e": 332, "1250": 332, "125054e": 332, "126078e": 332, "126645e": 332, "127029e": 332, "127876e": 332, "128167e": 332, "128177e": 332, "128550e": 332, "128745": 333, "129150e": 332, "129328e": 332, "129655e": 332, "13": [332, 333], "1300": [332, 333, 334], "130119e": 332, "130161": 333, "130944e": 332, "131367e": 332, "1316": 333, "1317": 333, "131745e": 332, "132618e": 332, "132712e": 332, "132780e": 332, "132849e": 332, "133150e": 332, "133163e": 332, "133480e": 332, "133671e": 332, "134048e": 332, "134317e": 332, "134433e": 332, "134561e": 332, "134627e": 332, "134814e": 332, "134833e": 332, "134834e": 332, "135": 334, "1350": 332, "135100e": 332, "135378e": 332, "135664e": 332, "135939e": 332, "136118e": 332, "136132e": 332, "136235e": 332, "136557e": 332, "136583e": 332, "136844e": 332, "136864e": 332, "137170e": 332, "137290e": 332, "137579e": 332, "137929e": 332, "137983e": 332, "137994e": 332, "138033e": 332, "138396e": 332, "138508e": 332, "138666e": 332, "138854e": 332, "139128e": 332, "139133e": 332, "139546e": 332, "14": [332, 333], "1400": [332, 333], "140218e": 332, "140404e": 332, "140498e": 332, "141040e": 332, "141458e": 332, "141967e": 332, "1422": 333, "142399e": 332, "144019e": 332, "1450": 332, "145879e": 332, "147286e": 332, "14751": 333, "147526e": 332, "15": [332, 333], "150": 332, "1500": [332, 333], "151751e": 332, "153652e": 333, "154050e": 332, "1544": 333, "1550": 332, "156605e": 332, "157213e": 332, "157587e": 332, "157683e": 332, "157949e": 332, "159412e": 332, "16": [332, 333], "1600": [332, 333], "160264e": 332, "163338e": 332, "163357e": 332, "1650": 332, "165078e": 332, "165219e": 332, "165540e": 332, "165851e": 332, "166291e": 332, "166481e": 332, "166643e": 332, "1667": 203, "166849e": 332, "167818e": 332, "169221e": 332, "17": [332, 333], "1700": [332, 333], "1750": 332, "175611e": 332, "176548e": 333, "178322e": 333, "17kb": 332, "18": [332, 333], "180": 334, "1800": [332, 333], "180184e": 332, "181045e": 333, "1850": 332, "1867": 333, "1868": 333, "19": [332, 333], "1900": [332, 333], "1928": 333, "193676e": 332, "1941": 333, "1950": 332, "198379e": 332, "198486e": 332, "1e": [186, 187, 332], "2": [203, 246, 257, 267, 277, 332, 333, 334], "20": [332, 333], "200": [332, 333], "2000": [332, 333], "202072e": 333, "2023": 328, "2050": 332, "208961e": 332, "209": 332, "209201e": 332, "21": [332, 333], "210": 332, "2100": [332, 333], "210101e": 333, "211": 332, "21105": 328, "211689": 333, "212": 332, "213": 332, "214": 332, "215": 332, "2150": 332, "216": 332, "22": [332, 333], "2200": [332, 333], "220362e": 332, "221594e": 333, "225": [332, 333, 334], "2250": 332, "227575": 333, "23": [332, 333], "2300": [332, 333], "233195e": 333, "2350": 332, "238949e": 332, "24": [332, 333], "2400": [332, 333], "240084e": 332, "240882e": 333, "241374e": 333, "2450": 332, "246163e": 333, "248556e": 332, "249163": 333, "25": [332, 333], "250": 332, "2500": [332, 333], "250281e": 332, "251784e": 332, "252244e": 333, "252988e": 333, "2550": 332, "255097e": 332, "255576e": 333, "256995e": 333, "257950e": 332, "25846": 332, "26": [332, 333], "2600": [332, 333], "260085e": 332, "261343e": 333, "261391e": 333, "264993e": 333, "2650": 332, "266611e": 332, "2672": 203, "267905e": 333, "268285e": 333, "269569e": 333, "27": [332, 333], "270": [333, 334], "2700": [332, 333], "270618e": 333, "271565e": 333, "271945e": 333, "272321e": 333, "272931e": 333, "272973e": 333, "273335e": 333, "273522e": 333, "274000e": 333, "274407e": 333, "274558e": 333, "274674e": 333, "274856e": 333, "2750": 332, "275084e": 333, "275297e": 333, "275378e": 333, "275642e": 333, "275671e": 333, "275862e": 333, "275892e": 333, "276063e": 333, "276094e": 333, "276308e": 333, "276463e": 333, "276695e": 333, "276892e": 333, "276894e": 333, "277010e": 333, "277063e": 333, "277112e": 333, "277210e": 333, "277354e": 333, "277478e": 333, "277519e": 333, "277655e": 333, "277723e": 333, "277770e": 333, "277793e": 333, "277852e": 333, "277915e": 333, "277924e": 333, "277968e": 333, "278009e": 333, "278038e": 333, "278052e": 333, "278054e": 333, "278072e": 333, "278081e": 333, "278085e": 333, "278086e": 333, "278099e": 333, "278108e": 333, "278117e": 333, "278122e": 333, "278124e": 333, "278136e": 333, "278145e": 333, "278146e": 333, "278154e": 333, "278155e": 333, "278157e": 333, "278166e": 333, "278172e": 333, "278173e": 333, "278179e": 333, "278183e": 333, "278188e": 333, "278189e": 333, "278193e": 333, "278194e": 333, "278195e": 333, "278197e": 333, "278200e": 333, "278205e": 333, "278209e": 333, "278210e": 333, "278211e": 333, "278212e": 333, "278213e": 333, "278214e": 333, "278215e": 333, "278216e": 333, "278217e": 333, "278218e": 333, "278219e": 333, "28": [332, 333], "2800": [332, 333], "282416e": 332, "2839046772": 332, "2850": 332, "29": [332, 333], "2900": [332, 333], "2950": 332, "2kb": 332, "3": [51, 53, 203, 330, 332, 333, 334], "30": [332, 333, 334], "300": [332, 333], "3000": [332, 333], "3050": 332, "31": [332, 333], "3100": [332, 333], "315": 334, "3150": 332, "317457e": 332, "32": [332, 333], "3200": [332, 333], "3250": 332, "33": [332, 333], "3300": [332, 333], "334577e": 332, "3350": 332, "337034": 333, "34": [332, 333], "3400": [332, 333], "3450": 332, "349004e": 332, "35": [203, 332, 333], "350": 332, "3500": [332, 333], "354575e": 332, "3550": 332, "3561": 203, "359194e": 332, "36": [203, 332, 333], "3600": [332, 333], "361700": 333, "3650": 332, "366148e": 332, "369663e": 332, "369777e": 332, "37": [332, 333], "3700": [332, 333], "3750": 332, "379353e": 332, "38": [332, 333], "3800": [332, 333], "3850": 332, "39": [332, 333], "3900": [332, 333], "3950": 332, "395284": 333, "4": [203, 332, 333, 334], "40": [332, 333], "400": [332, 333, 334], "4000": [332, 333], "4050": 332, "41": [332, 333], "4100": [332, 333], "4150": 332, "42": [332, 333, 334], "4200": [332, 333], "4250": 332, "43": [332, 333], "4300": [332, 333], "4350": 332, "44": [332, 333], "4400": [332, 333], "440080e": 332, "4405916400": 332, "443889e": 332, "444762e": 332, "4450": 332, "446678e": 332, "45": [332, 333, 334], "450": 332, "4500": [332, 333], "451458e": 332, "451kb": 332, "4550": 332, "456818e": 333, "4573986190": 332, "458684e": 333, "458887e": 333, "459850e": 332, "46": [332, 333], "4600": [332, 333], "461710e": 332, "4650": 332, "47": [332, 333], "4700": [332, 333], "4750": 332, "475074e": 332, "475198e": 333, "48": [332, 333], "4800": [332, 333], "481707e": 332, "482376e": 332, "484456e": 332, "4850": 332, "49": [332, 333], "4900": [332, 333], "4950": 332, "495773e": 332, "497802e": 332, "499215e": 332, "5": [203, 332, 333, 334], "50": [332, 333], "500": [217, 218, 332, 333], "5000": [332, 333], "500554e": 332, "508029e": 332, "51": [332, 333], "5100": 333, "512140e": 332, "515184e": 333, "518581": 333, "52": [332, 333], "5200": 333, "53": [332, 333], "5300": 333, "54": [332, 333], "5400": 333, "5464": 328, "548794e": 332, "55": [332, 333], "550": 332, "5500": 333, "554709": 333, "555305e": 332, "555471e": 333, "555786e": 333, "557857": 333, "56": [332, 333], "5600": 333, "563150e": 332, "564081e": 332, "568175": 333, "57": [332, 333], "5700": 333, "571300e": 332, "571793e": 332, "58": [332, 333], "5800": 333, "584611e": 332, "586841": 333, "588871": 333, "589298e": 332, "59": [332, 333], "5900": 333, "591733e": 332, "5e": 332, "6": [203, 332, 333, 334], "60": [332, 333], "600": [332, 333], "6000": 333, "604301e": 332, "609645": 333, "61": [332, 333], "6100": 333, "6172": 203, "62": [332, 333], "6200": 333, "625032e": 333, "63": [332, 333], "6300": 333, "64": [332, 333], "6400": 333, "645077e": 332, "65": [332, 333], "650": 332, "6500": 333, "66": [332, 333], "6600": 333, "661733e": 332, "664458": 333, "665933": 333, "668302e": 332, "67": [332, 333], "6700": 333, "68": [332, 333], "6800": 333, "69": [332, 333], "6900": 333, "693433e": 332, "693910e": 332, "695093e": 332, "7": [203, 332, 333, 334], "70": [332, 333], "700": [332, 333], "7000": 333, "7044": 203, "708539": 333, "71": [332, 333], "7100": 333, "716086e": 333, "72": [332, 333], "7200": 333, "73": [332, 333], "7300": 333, "738912e": 332, "74": [332, 333], "7400": 333, "740363e": 332, "75": [332, 333], "750": 332, "7500": 333, "76": [332, 333], "7600": 333, "77": [332, 333], "7700": 333, "770814e": 332, "771809e": 332, "775495e": 332, "779611e": 332, "78": [332, 333], "7800": 333, "7833": 203, "79": [332, 333], "7900": 333, "8": [328, 332, 333, 334], "80": [332, 333], "800": [332, 333], "8000": 333, "808023e": 332, "80b": 332, "81": [332, 333], "8100": 333, "810288e": 332, "82": [332, 333], "8200": 333, "822039e": 332, "83": [203, 332, 333], "8300": 333, "84": [332, 333], "8400": 333, "840827e": 332, "846941": 333, "8477": 203, "848904e": 332, "85": [203, 332, 333], "850": 332, "8500": 333, "856793e": 332, "857941": 333, "86": [203, 328, 332, 333], "8600": 333, "867863e": 332, "869307e": 332, "87": [332, 333], "8700": 333, "871628e": 332, "878191e": 332, "88": [332, 333], "8800": 333, "8856": 203, "89": [203, 332, 333], "8900": 333, "896358e": 332, "9": [203, 332, 333, 334], "90": [332, 333, 334], "900": [332, 333], "9000": 333, "900518e": 333, "902009e": 332, "904014e": 332, "909073e": 332, "91": [332, 333], "9100": 333, "917821e": 332, "92": [332, 333], "9200": 333, "93": [332, 333], "9300": 333, "937176e": 332, "94": [332, 333], "9400": 333, "940049e": 332, "9422": 203, "945786e": 332, "95": [332, 333], "950": 332, "9500": 333, "96": [332, 333], "9600": 333, "97": [332, 333], "9700": 333, "9711": 203, "9728": 203, "973433e": 332, "9794099827": 332, "98": [332, 333], "9800": 333, "984832734459": 333, "99": [332, 333], "9900": 333, "995": 332, "995420": 333, "998273e": 332, "998327e": 333, "998508e": 332, "999999": [51, 52, 96, 146, 242, 253, 263, 273, 287, 294, 310], "A": [203, 242, 253, 263, 273, 327, 334], "As": 331, "By": 70, "For": [203, 334, 335], "If": [97, 203, 239, 331], "In": [332, 333], "It": 332, "Such": 113, "The": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 332, 333, 334, 335], "Then": 333, "There": 331, "These": 332, "To": 203, "_": 325, "_2": 203, "__repr__": [103, 105], "__str__": [1, 3, 22, 24, 31, 43, 51, 96, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "_p": 203, "about": 332, "abov": [330, 331, 332], "absolut": 333, "abstract": [31, 37, 43, 51, 96, 99, 100, 186, 238, 240, 325], "accept": 334, "accept_nan": 109, "accept_non": 109, "action": 330, "actual": [51, 60, 96, 146, 242, 253, 263, 273, 287, 294, 310], "ad": [0, 70, 148, 325, 330, 332, 334], "add": [1, 22, 24, 31, 33, 43, 45, 51, 54, 55, 56, 96, 103, 107, 121, 124, 127, 136, 138, 144, 146, 148, 242, 253, 263, 273, 287, 294, 310, 332, 334], "add_constraint": [51, 54, 96, 146, 242, 253, 263, 273, 287, 294, 310, 332], "add_grid": [333, 334], "add_object": [51, 55, 96, 146, 242, 253, 263, 273, 287, 294, 310, 332, 333], "add_row": 332, "add_subplot": 334, "add_to_figur": 332, "add_to_layout_figur": [1, 22, 24, 31, 33, 43, 45, 51, 56, 96, 127, 136, 138, 144, 146, 287, 294, 310], "add_var": [146, 148, 333, 334], "addit": [2, 23, 25, 32, 39, 44, 48, 51, 53, 86, 97, 98, 115, 119, 128, 136, 137, 139, 144, 145, 151, 191, 241, 251, 295, 299, 316, 319, 332], "additio": [161, 166, 171, 176, 193, 199], "addition": [65, 66], "affair": 330, "after": [121, 332], "again": 332, "algo": [51, 53, 92, 93, 96, 101, 102, 103, 106, 107, 108, 109, 111, 113, 117, 118, 119, 121, 124, 126, 146, 287, 291, 292, 294, 295, 306, 307, 310, 316, 332, 333], "algo_par": [332, 333, 334], "algo_typ": 334, "algorithm": [51, 53, 106, 107, 108, 109, 111, 113, 117, 119, 121, 124, 126, 295, 316, 332, 333, 334], "all": [1, 4, 5, 6, 20, 21, 22, 24, 26, 27, 30, 31, 34, 35, 40, 42, 43, 49, 51, 53, 57, 60, 66, 70, 81, 82, 96, 103, 106, 113, 116, 121, 123, 126, 127, 128, 129, 130, 135, 136, 137, 138, 140, 141, 144, 145, 146, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 190, 192, 194, 195, 198, 200, 201, 203, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 253, 263, 273, 287, 294, 310, 330, 332, 333, 334], "all_turbin": [51, 57, 96, 146, 287, 294, 310], "allow": 332, "alpha": 332, "also": [330, 332, 333, 334], "am": 330, "amb_ct": 332, "amb_p": 332, "amb_rew": [332, 334], "amb_rews2": 332, "amb_rews3": 332, "amb_rho": 332, "amb_w": 332, "amb_wd": 333, "an": [51, 55, 96, 109, 146, 203, 242, 253, 263, 273, 287, 294, 310, 334], "ana_deriv": [1, 4, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "analyt": [1, 4, 22, 24, 31, 43, 60, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "angl": [0, 310, 311, 333], "ani": [5, 6, 9, 10, 26, 27, 34, 35, 58, 59, 68, 69, 129, 130, 131, 140, 141, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 194, 195, 200, 201, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 244, 245, 255, 256, 265, 266, 275, 276, 296, 317, 325], "anoth": 334, "api": 330, "appear": [332, 333], "appli": [51, 58, 59, 96, 109, 146, 148, 203, 242, 244, 245, 253, 255, 256, 263, 265, 266, 273, 275, 276, 287, 294, 310, 332], "applic": [0, 5, 6, 9, 10, 26, 27, 34, 35, 51, 58, 59, 64, 68, 69, 96, 129, 130, 131, 140, 141, 146, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 194, 195, 200, 201, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 244, 245, 255, 256, 265, 266, 275, 276, 287, 294, 296, 310, 317, 325, 332, 334], "apply_individu": [51, 58, 96, 146, 242, 244, 253, 255, 263, 265, 273, 275, 287, 294, 310], "apply_popul": [51, 59, 96, 146, 242, 245, 253, 256, 263, 266, 273, 276, 287, 294, 310], "apply_ufunc": [103, 119], "ar": [1, 22, 24, 31, 51, 57, 60, 61, 62, 70, 96, 103, 117, 146, 148, 160, 165, 170, 175, 181, 186, 188, 189, 190, 192, 198, 203, 242, 253, 263, 273, 287, 294, 310, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335], "area": [1, 2, 325, 332], "areageometri": [1, 2, 242, 243, 253, 254, 263, 264, 273, 274], "areageometryconstraint": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 325], "arg": [1, 22, 24, 31, 39, 43, 48, 51, 86, 96, 98, 103, 115, 127, 136, 138, 144, 146, 147, 160, 165, 170, 175, 181, 186, 187, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 310, 334], "argument": [119, 147, 203, 246, 257, 267, 277], "ariti": 203, "arrai": [4, 5, 6, 9, 10, 26, 27, 34, 35, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 92, 93, 101, 102, 103, 106, 116, 129, 130, 131, 133, 140, 141, 142, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 188, 189, 190, 194, 195, 200, 201, 203, 206, 207, 209, 213, 214, 215, 219, 220, 221, 225, 226, 227, 231, 232, 233, 237, 240, 244, 245, 246, 255, 256, 257, 265, 266, 267, 275, 276, 277, 291, 292, 296, 306, 307, 317, 332, 333], "arrang": 203, "array_lik": [110, 203], "articl": 328, "artifici": [103, 325], "assum": 239, "atmospher": 330, "author": 328, "automat": [0, 113, 203], "avail": [329, 334], "avoid": [203, 333], "awai": 333, "awesom": 330, "ax": [1, 22, 24, 31, 33, 43, 45, 51, 56, 96, 127, 136, 138, 144, 146, 242, 246, 253, 257, 263, 267, 273, 277, 287, 294, 310, 332, 333, 334], "ax1": 334, "ax2": 334, "ax3": 334, "ax4": 334, "axi": [33, 45, 56, 203, 242, 246, 253, 257, 263, 267, 273, 277, 333], "b": [203, 330], "background": [253, 254, 327], "bar": [203, 246, 257, 267, 277], "barg": [246, 257, 267, 277], "base": [31, 43, 51, 60, 96, 103, 106, 114, 127, 161, 166, 171, 176, 186, 193, 199, 238, 325, 330, 332], "basic": [325, 332], "bastankhah025": 332, "bastankhah025_linear_k002": 332, "bastankhah2014": 332, "bastankhah2016": 333, "bastankhah2016_linear_ambka02": 333, "bastankhah2016_linear_ka02": 334, "been": [12, 112, 330, 334], "befor": [92, 93, 101, 102, 138, 139, 148, 291, 292, 306, 307, 334], "begin": 332, "being": [70, 103, 117, 203], "bend": 333, "bernhard": 328, "best": [332, 333], "between": [193, 203, 242, 243, 253, 254, 263, 264, 273, 274, 295, 332], "bibtex": 328, "bit": 332, "block": 203, "bmbf": 330, "bmwk": 330, "book": 332, "bool": [1, 2, 12, 20, 21, 30, 42, 57, 60, 65, 66, 70, 109, 112, 120, 127, 128, 133, 135, 137, 138, 139, 142, 145, 148, 209, 215, 221, 227, 233, 237, 240, 242, 243, 246, 257, 267, 277], "boolean": [61, 62, 77, 188, 189, 203, 246, 257, 267, 277], "both": [294, 331, 332], "bound": [1, 22, 24, 31, 160, 165, 170, 175, 181, 186, 190, 192, 198], "boundari": [1, 2, 22, 23, 160, 161, 162, 163, 164, 242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 325, 327, 332], "boundary_0000": 332, "boundary_0001": 332, "boundary_0002": 332, "boundary_0003": 332, "boundary_0004": 332, "boundary_0005": 332, "boundary_0006": 332, "boundary_0007": 332, "boundary_0008": 332, "boundary_0009": 332, "brai": 203, "branch": 330, "braycurti": 203, "bremen": 332, "bug": 0, "c": [203, 331], "c1": [217, 218], "c2": [217, 218], "c3": [217, 218], "calc_farm": [51, 53], "calc_farm_arg": [51, 53], "calc_gradi": [51, 60, 96, 146, 242, 253, 263, 273, 287, 294, 310], "calc_individu": [1, 5, 22, 24, 26, 31, 34, 43, 127, 129, 136, 138, 140, 144, 160, 162, 165, 167, 170, 172, 175, 177, 181, 183, 186, 192, 194, 198, 200, 204, 206, 211, 213, 217, 219, 223, 225, 229, 231, 235, 238], "calc_par": [103, 119], "calc_popul": [1, 6, 22, 24, 27, 31, 35, 43, 127, 130, 136, 138, 141, 144, 160, 163, 165, 168, 170, 173, 175, 178, 181, 184, 186, 192, 195, 198, 201, 204, 207, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238], "calc_valid": [242, 243], "calcul": [1, 4, 5, 6, 22, 24, 26, 27, 31, 34, 35, 43, 51, 60, 70, 88, 89, 92, 93, 96, 101, 102, 103, 106, 107, 108, 111, 113, 117, 119, 121, 124, 126, 127, 129, 130, 136, 138, 140, 141, 144, 146, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 203, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 242, 253, 263, 273, 287, 291, 292, 294, 306, 307, 310, 325, 330, 332, 333], "call": [51, 60, 92, 93, 96, 101, 102, 119, 146, 203, 242, 253, 263, 273, 287, 291, 292, 294, 306, 307, 310, 334], "callabl": 203, "can": [60, 148, 203, 325, 332, 333, 334], "canberra": 203, "cannot": 4, "capabl": 330, "case": 332, "cd": 335, "cdist": 203, "cdot": 203, "centr": 332, "cf": 70, "cfixn": [165, 166, 167, 168, 169, 327], "champion": [1, 9, 22, 24, 31, 43, 51, 68, 96, 127, 131, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 296, 310, 317], "chang": [0, 330], "changelog": 330, "chebyshev": 203, "check": [1, 22, 24, 31, 51, 61, 62, 96, 138, 139, 146, 160, 165, 170, 175, 181, 186, 188, 189, 192, 198, 242, 253, 263, 273, 287, 294, 310, 332], "check_constraints_individu": [51, 61, 96, 146, 242, 253, 263, 273, 287, 294, 310], "check_constraints_popul": [51, 62, 96, 146, 242, 253, 263, 273, 287, 294, 310], "check_individu": [1, 22, 24, 31, 160, 165, 170, 175, 181, 186, 188, 192, 198], "check_popul": [1, 22, 24, 31, 160, 165, 170, 175, 181, 186, 189, 192, 198], "check_valid": [138, 139], "checkout": 330, "choic": [148, 332, 333], "choos": 203, "chunk": [103, 106, 113], "chunk_size_point": [332, 333], "chunk_size_st": [332, 333, 334], "circl": [242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 332], "citat": 330, "cite": 328, "citi": 203, "cityblock": 203, "class": [1, 22, 24, 31, 39, 43, 48, 51, 60, 70, 86, 96, 97, 98, 103, 115, 127, 136, 138, 144, 146, 151, 160, 161, 165, 166, 170, 171, 175, 176, 181, 186, 191, 192, 193, 198, 199, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 299, 310, 319, 325, 326, 327, 334], "classmethod": [1, 22, 24, 31, 39, 40, 43, 48, 49, 51, 86, 87, 91, 96, 98, 103, 115, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 310], "clearli": 333, "climat": 330, "clone": [331, 335], "close": [332, 333], "closedpolygon": 332, "cluster": 330, "cma": 74, "cmap": 334, "cmaxn": [170, 171, 172, 173, 174, 327], "cmi": 78, "cmindens": [175, 176, 177, 178, 179, 180, 327], "cminn": [181, 182, 183, 184, 185, 327], "cmpnt": [160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235], "cname": 239, "coars": 332, "code": [0, 330], "coeff": [51, 88, 89, 96, 146, 242, 253, 263, 273, 287, 294, 310], "coeffici": [88, 89], "collect": 203, "column": 203, "com": [0, 330, 331, 335], "combin": 109, "command": 0, "commit": [0, 330], "common": 203, "complex": 334, "compon": [1, 4, 5, 6, 7, 9, 10, 13, 20, 21, 22, 24, 26, 27, 29, 30, 31, 34, 35, 37, 42, 43, 51, 60, 70, 81, 82, 96, 127, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 146, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 253, 263, 273, 287, 294, 310, 332], "component_nam": [1, 7, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "comput": [106, 203], "con": [65, 66, 68, 69, 296, 317], "concern": 334, "conda": 331, "condit": [1, 2, 332, 333], "consid": [60, 70, 333], "constaint": [24, 28, 192, 196], "constrain": [1, 22, 325], "constraint": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 43, 44, 51, 54, 60, 61, 62, 63, 65, 66, 68, 69, 70, 74, 78, 81, 96, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 212, 218, 224, 230, 236, 242, 253, 263, 273, 287, 294, 295, 296, 310, 317, 326, 332, 334], "constraint_typ": [1, 22, 24, 31, 39, 160, 165, 170, 175, 181, 186, 191, 192, 198], "constraint_valu": [1, 22, 24, 31, 51, 61, 62, 96, 146, 160, 165, 170, 175, 181, 186, 188, 189, 192, 198, 242, 253, 263, 273, 287, 294, 310], "constraints_tol": [51, 63, 96, 146, 242, 253, 263, 273, 287, 294, 310], "constructor": [1, 2, 22, 23, 24, 25, 31, 32, 39, 48, 51, 53, 86, 96, 98, 103, 104, 115, 127, 128, 136, 137, 138, 139, 144, 145, 146, 147, 160, 161, 165, 166, 170, 171, 175, 176, 181, 182, 186, 187, 191, 192, 193, 198, 199, 204, 205, 211, 212, 217, 218, 223, 224, 229, 230, 235, 236, 238, 239, 241, 242, 243, 251, 253, 254, 263, 264, 273, 274, 287, 310, 316], "consult": 325, "contain": [70, 325, 332], "context": 332, "contract": [0, 127, 128, 137, 145, 334], "contract_st": [127, 128, 137, 145], "contract_turbin": [128, 137, 145], "contribut": 331, "conveni": 332, "convent": [203, 334], "convert": 203, "coord": [113, 203], "coordin": [103, 116, 127, 203, 246, 257, 267, 277, 332], "copi": 0, "core": [1, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 146, 186, 238, 242, 253, 263, 273, 287, 294, 295, 310, 316, 326, 327], "corner": 203, "correl": 203, "correspond": 332, "cosin": 203, "could": 203, "count": [138, 139], "counter": [51, 64, 96, 146, 287, 294, 310], "cov": 203, "covari": 203, "creat": [103, 113, 125, 148, 330, 332, 334], "creation": 334, "crespohernandez_quadratic_ka04": 334, "csv": 332, "ctol": 63, "cube": 203, "current": [51, 64, 96, 103, 120, 146, 287, 294, 310], "curti": 203, "cv_avg": 332, "cv_min": 332, "d": [1, 2, 24, 25, 160, 161, 203, 242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 332], "dask": 330, "data": [1, 9, 10, 22, 24, 31, 43, 51, 68, 69, 92, 93, 96, 101, 102, 103, 106, 107, 109, 113, 119, 121, 124, 127, 131, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 291, 292, 294, 296, 306, 307, 310, 317, 332], "data_ndarrai": 113, "data_prio": 109, "data_sourc": 332, "data_stash": [103, 121, 124], "data_var": 113, "dataset": [119, 332], "ddof": 203, "default": [70, 110, 203, 239, 332], "defaultsingleobjectivetermin": 332, "deficit": 332, "defin": [203, 242, 253, 325, 327, 332, 333], "degre": 333, "delta": [176, 205, 333], "demonstr": [0, 332, 333], "densiti": [175, 176, 204, 327], "dep": [20, 21, 30, 42, 127, 128, 135, 137, 145], "depend": [1, 20, 21, 22, 24, 30, 31, 42, 43, 127, 128, 135, 136, 137, 138, 144, 145, 148, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 239, 332, 335], "deriv": [1, 4, 22, 24, 31, 39, 43, 48, 60, 70, 86, 98, 115, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 251], "describ": 334, "descript": 325, "detail": [325, 332, 334], "develop": [330, 332], "dfactor": [175, 176, 204, 205], "diamet": [161, 242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 332], "dice": 203, "dict": [2, 16, 17, 23, 25, 32, 39, 44, 48, 51, 53, 54, 55, 86, 97, 98, 99, 100, 106, 113, 115, 119, 121, 124, 127, 128, 136, 137, 139, 144, 145, 147, 151, 156, 157, 161, 166, 171, 176, 191, 193, 199, 203, 241, 246, 251, 257, 267, 277, 295, 299, 304, 305, 316, 319, 322, 323, 332, 333], "dictionari": [121, 124], "diff": 218, "differenti": [4, 60, 70], "dim": 116, "dim_arrai": 113, "dim_name_str": 113, "dim_tupl": 113, "dimens": [109, 332], "dimension": 203, "directli": [51, 60, 96, 146, 242, 253, 263, 273, 287, 294, 310], "disagre": 203, "disc": [1, 2], "disc_insid": [1, 2], "dist": [25, 203], "dist_0_1": 332, "dist_0_2": 332, "dist_0_3": 332, "dist_0_4": 332, "dist_0_5": 332, "dist_0_6": 332, "dist_0_7": 332, "dist_0_8": 332, "dist_0_9": 332, "dist_1_2": 332, "dist_1_3": 332, "dist_1_4": 332, "dist_1_5": 332, "dist_1_6": 332, "dist_1_7": 332, "dist_1_8": 332, "dist_1_9": 332, "dist_2_3": 332, "dist_2_4": 332, "dist_2_5": 332, "dist_2_6": 332, "dist_2_7": 332, "dist_2_8": 332, "dist_2_9": 332, "dist_3_4": 332, "dist_3_5": 332, "dist_3_6": 332, "dist_3_7": 332, "dist_3_8": 332, "dist_3_9": 332, "dist_4_5": 332, "dist_4_6": 332, "dist_4_7": 332, "dist_4_8": 332, "dist_4_9": 332, "dist_5_6": 332, "dist_5_7": 332, "dist_5_8": 332, "dist_5_9": 332, "dist_6_7": 332, "dist_6_8": 332, "dist_6_9": 332, "dist_7_8": 332, "dist_7_9": 332, "dist_8_9": 332, "dist_insid": 332, "dist_outsid": 332, "distanc": [24, 25, 192, 193, 203, 205, 217, 218, 242, 243, 253, 254, 263, 264, 273, 274, 295, 325, 327, 332], "diverg": 203, "dm": 203, "do": [109, 203, 332], "doc": 325, "document": [0, 203, 325, 334], "doe": [242, 253, 263, 273], "doi": 328, "done": [12, 332], "dot": 203, "downwind": [109, 332, 333, 334], "downwind_index": 109, "dpar": 332, "draw": [246, 257, 267, 277], "dtype": 332, "dure": [113, 332], "d\u00f6renk\u00e4mper": 328, "e": [51, 81, 82, 96, 146, 203, 242, 253, 263, 273, 287, 294, 310, 331, 332, 333, 335], "each": [43, 127, 133, 136, 138, 142, 144, 203, 204, 209, 211, 215, 217, 221, 223, 227, 229, 233, 235, 237, 238, 240, 332, 333], "econom": 330, "educ": 330, "effect": [326, 327], "effici": 203, "einsum": [51, 88, 89, 96, 146, 242, 253, 263, 273, 287, 294, 310], "either": [24, 25, 148], "element": 203, "enabl": 330, "energi": 330, "engin": [0, 332, 333, 334], "engine_typ": 334, "ensur": [1, 2, 109], "ensure_vari": [103, 107], "enter": 109, "entri": [103, 109, 113, 203], "error": 109, "especi": 334, "etc": 332, "euclidean": 203, "europ": 330, "evalu": [51, 65, 66, 96, 146, 242, 243, 253, 263, 273, 287, 294, 310, 326, 327, 328, 330], "evaluate_individu": [51, 65, 96, 146, 242, 253, 263, 273, 287, 294, 310], "evaluate_popul": [51, 66, 96, 146, 242, 253, 263, 273, 287, 294, 310], "everyth": 333, "exactli": [113, 334], "exampl": [0, 325, 330, 332, 333, 334], "except": 203, "execut": 106, "exist": 190, "explain": 334, "express": [190, 333], "extend": [328, 330], "extra": 203, "f": [109, 203], "f_avg": [332, 333], "f_min": [332, 333], "factor": [127, 128, 137, 145, 176, 205], "factori": [0, 1, 22, 24, 31, 39, 43, 48, 51, 86, 96, 98, 103, 115, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 310], "fals": [2, 51, 60, 65, 66, 70, 96, 109, 146, 148, 242, 253, 263, 273, 287, 294, 310, 333], "farm": [1, 22, 24, 31, 36, 39, 43, 46, 48, 51, 67, 86, 92, 93, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 127, 136, 138, 144, 146, 148, 156, 157, 242, 253, 263, 273, 287, 291, 292, 294, 304, 305, 306, 307, 310, 322, 323, 325, 326, 328, 330, 332, 333, 334], "farm_layout": [332, 333], "farm_var": [99, 100, 156, 157, 304, 305, 322, 323], "farmboundaryconstraint": [22, 23, 325, 332], "farmconstraint": [1, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 325], "farmlayoutoptproblem": [287, 288, 289, 290, 291, 292, 293, 326, 332], "farmlayoutoutput": [332, 333, 334], "farmobject": [43, 44, 45, 46, 47, 48, 49, 50, 127, 128, 137, 138, 139, 145, 325], "farmoptproblem": [2, 23, 25, 32, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 128, 136, 137, 139, 144, 145, 161, 166, 171, 176, 193, 199, 205, 212, 218, 224, 230, 236, 287, 325, 326], "farmvarobject": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 144, 325], "farmvarsobject": 0, "farmvarsproblem": [96, 97, 98, 99, 100, 101, 102, 146, 147, 294, 295, 310, 316, 325, 326], "fast": 330, "fc": [109, 138, 139], "fdata": [103, 106, 107, 109], "feder": 330, "field": 333, "fig": [332, 333, 334], "figsiz": [332, 334], "figur": [1, 22, 24, 31, 33, 43, 45, 51, 56, 96, 127, 136, 138, 144, 146, 242, 246, 253, 257, 263, 267, 273, 277, 287, 294, 310, 334], "file": [0, 330, 332], "fill_mod": 332, "final": [1, 8, 9, 10, 22, 24, 31, 43, 51, 68, 69, 96, 103, 108, 127, 131, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 296, 310, 317, 325, 332, 333], "finalize_individu": [1, 9, 22, 24, 31, 43, 51, 68, 96, 127, 131, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 296, 310, 317], "finalize_popul": [1, 10, 22, 24, 31, 43, 51, 69, 96, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "find": [203, 325, 333], "finish": [1, 12, 22, 24, 31, 43, 51, 96, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310, 332, 333], "first": [0, 109, 331, 332, 333], "fix": [0, 165, 223, 253, 327], "fixed_var": 332, "flag": [1, 12, 22, 24, 31, 43, 51, 57, 60, 65, 66, 70, 77, 96, 103, 109, 112, 120, 127, 133, 136, 138, 142, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 209, 211, 215, 217, 221, 223, 227, 229, 233, 235, 237, 238, 240, 242, 253, 263, 273, 287, 294, 310, 331, 332], "flapfoam": 330, "flappi": 330, "float": [1, 2, 4, 5, 6, 9, 10, 14, 16, 18, 20, 22, 24, 25, 26, 27, 30, 31, 34, 35, 42, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 71, 75, 79, 84, 92, 93, 94, 96, 99, 100, 101, 102, 127, 128, 129, 130, 131, 135, 136, 137, 138, 140, 141, 144, 145, 146, 148, 149, 152, 154, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 173, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 211, 213, 214, 217, 218, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 243, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 278, 281, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 302, 304, 305, 306, 307, 308, 310, 316, 317, 318, 320, 321, 322, 323, 324, 332, 333, 334], "float64": 332, "float_random": [332, 333], "floatrandomsampl": [332, 333], "flow": [330, 333], "flowplots2d": [332, 333], "fname": 334, "folder": [329, 332], "follow": [203, 329, 332, 333, 334], "forg": 331, "fork": [330, 331], "form": 332, "format": [330, 334], "four": 203, "fox": [0, 1, 2, 24, 31, 36, 43, 46, 51, 53, 67, 87, 96, 99, 100, 103, 104, 106, 107, 108, 109, 111, 113, 117, 119, 121, 123, 124, 126, 127, 128, 137, 145, 146, 148, 156, 157, 242, 243, 253, 254, 263, 264, 273, 274, 287, 294, 295, 304, 305, 310, 316, 322, 323, 325, 328, 329, 331, 332, 333, 334, 335], "foxes_opt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 332, 333], "foxes_opt_yaml": [0, 330], "foxes_out": 0, "foxes_yaml": 334, "fr": 333, "frac": 203, "frame": 333, "framework": 330, "fraunhof": [330, 332], "fraunhoferiw": [0, 325, 330, 331, 335], "from": [0, 51, 54, 55, 87, 96, 103, 109, 124, 146, 203, 287, 294, 310, 325, 332, 333, 334], "front": 325, "ftol": 332, "full": [0, 1, 2], "fullfil": [1, 22, 24, 31, 51, 61, 62, 96, 146, 160, 165, 170, 175, 181, 186, 188, 189, 192, 198, 242, 253, 263, 273, 287, 294, 310], "fulli": [242, 243, 253, 254, 263, 264, 273, 274, 330], "func": [51, 60, 70, 96, 146, 242, 253, 263, 273, 287, 294, 310], "function": [1, 13, 20, 21, 22, 24, 29, 30, 31, 37, 42, 43, 44, 51, 60, 65, 66, 68, 69, 70, 81, 82, 92, 93, 96, 101, 102, 106, 118, 119, 121, 124, 127, 128, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 160, 164, 165, 169, 170, 174, 175, 180, 181, 185, 186, 192, 197, 198, 202, 203, 204, 210, 211, 216, 217, 222, 223, 228, 229, 234, 235, 238, 239, 241, 242, 253, 263, 273, 287, 291, 292, 294, 296, 306, 307, 310, 317, 325, 330, 332, 334], "fund": 330, "furthermor": 330, "fv": [332, 333], "fvar": 60, "g": 203, "ga": [332, 333, 334], "gener": [10, 69, 326, 332], "genet": 332, "geom2d": [1, 2, 242, 243, 253, 254, 263, 264, 273, 274, 332], "geom_layout": [31, 43, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 325], "geometr": [160, 161, 165, 166, 170, 171, 175, 176, 181, 192, 193, 198, 199, 204, 205, 211, 212, 217, 218, 223, 224, 229, 230, 235, 236, 242, 253, 326, 327], "geometri": [1, 2, 242, 243, 253, 254, 263, 264, 273, 274, 325, 327, 332], "geomlayout": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 327], "geomlayoutgrid": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 327], "geomreggrid": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 327], "germani": 332, "get": [1, 3, 20, 21, 22, 24, 30, 31, 42, 43, 51, 63, 74, 78, 91, 96, 103, 116, 127, 135, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "get_bound": [1, 22, 24, 31, 160, 165, 170, 175, 181, 186, 190, 192, 198], "get_data": [103, 109], "get_fig": [242, 246, 253, 257, 263, 267, 273, 277], "get_figur": [332, 333, 334], "get_gradi": [51, 60, 70, 96, 146, 242, 253, 263, 273, 287, 294, 310], "get_mean_fig_xi": [332, 333], "getter": [103, 109], "git": [330, 331, 335], "github": [0, 325, 329, 330, 331, 335], "given": [1, 9, 10, 22, 24, 31, 43, 51, 61, 62, 68, 69, 96, 127, 131, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 188, 189, 192, 198, 203, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 296, 310, 317, 325], "gm": 332, "gradient": [51, 60, 70, 96, 146, 242, 253, 263, 273, 287, 294, 310], "grant": 330, "greedi": 333, "grid": [176, 205, 211, 253, 254, 263, 273, 274, 294, 295, 310, 326, 327], "grid25": 333, "grid_spac": [253, 254], "gt": 332, "gw": 330, "h2digit": 330, "ha": [12, 112, 113, 294, 330, 334], "ham": 203, "have": [203, 332], "helper": [103, 325], "here": [113, 121, 124, 330, 332, 334], "hit": 333, "home": 332, "horizon": 330, "how": [0, 333], "html": 325, "http": [0, 325, 328, 330, 331, 335], "i": [51, 70, 81, 82, 92, 93, 96, 101, 102, 103, 106, 109, 113, 119, 127, 146, 203, 239, 242, 253, 263, 273, 287, 291, 292, 294, 306, 307, 310, 330, 332, 333, 334], "id": [103, 114, 330], "idata": 113, "idea": 333, "identifi": 109, "iecti2019k_quadratic_ambka02": 333, "ij": 203, "imag": 334, "implement": 332, "impli": 332, "implicit": 332, "import": [203, 332, 333], "imput": 330, "includ": [332, 333], "index": [4, 51, 87, 91, 96, 103, 109, 110, 118, 121, 124, 146, 287, 294, 310, 325, 333], "indic": [60, 90, 110], "individu": [1, 5, 6, 22, 24, 26, 27, 31, 34, 35, 43, 51, 61, 65, 66, 96, 127, 129, 130, 136, 138, 140, 141, 144, 146, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 188, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 242, 253, 263, 273, 287, 294, 310, 332], "ineffici": 203, "inf": [75, 79, 152, 154, 190, 249, 250, 270, 271, 281, 283, 289, 290, 300, 302, 320, 321], "inflow": 333, "info": [1, 3, 22, 24, 31, 43, 51, 96, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "init": [97, 146, 148, 151, 299, 319, 333, 334], "initi": [1, 11, 12, 22, 24, 28, 31, 43, 51, 71, 72, 73, 96, 97, 103, 107, 111, 112, 127, 132, 136, 138, 144, 146, 148, 149, 150, 151, 160, 165, 170, 175, 179, 181, 186, 192, 196, 198, 204, 208, 211, 217, 223, 229, 235, 238, 242, 247, 248, 253, 258, 259, 263, 268, 269, 273, 278, 279, 280, 287, 288, 294, 297, 298, 299, 310, 318, 319, 332, 333], "initial_values_float": [51, 71, 96, 146, 149, 242, 247, 253, 263, 268, 273, 278, 287, 288, 294, 297, 310, 318], "initial_values_int": [51, 72, 96, 146, 150, 242, 253, 258, 263, 273, 279, 287, 294, 298, 310], "inlin": [332, 333], "input": [0, 119, 203, 330, 332, 333], "insid": [1, 2, 22, 325], "instal": [330, 332, 335], "instead": [51, 60, 96, 146, 203, 242, 253, 263, 273, 287, 294, 310, 334], "int": [1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 43, 44, 47, 50, 51, 53, 54, 55, 60, 61, 62, 64, 68, 69, 70, 72, 73, 76, 80, 81, 82, 83, 84, 85, 87, 90, 91, 96, 97, 100, 103, 104, 108, 109, 111, 113, 114, 118, 121, 122, 124, 127, 129, 130, 131, 132, 134, 136, 138, 140, 141, 143, 144, 146, 148, 150, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 210, 211, 213, 214, 216, 217, 219, 220, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 238, 239, 242, 243, 248, 253, 254, 258, 259, 260, 261, 262, 263, 264, 269, 273, 274, 279, 280, 282, 284, 286, 287, 294, 295, 296, 298, 299, 301, 303, 305, 309, 310, 317, 319, 323], "int64": 332, "int_inf": [51, 52, 76, 80, 96, 146, 153, 155, 242, 253, 263, 273, 282, 284, 287, 294, 301, 303, 310], "integ": [1, 4, 5, 6, 9, 10, 17, 19, 22, 24, 26, 27, 31, 34, 35, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 72, 76, 80, 92, 93, 95, 96, 99, 100, 101, 102, 110, 127, 129, 130, 131, 136, 138, 140, 141, 144, 146, 153, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 244, 245, 255, 256, 263, 265, 266, 273, 275, 276, 282, 284, 287, 291, 292, 294, 296, 301, 303, 304, 305, 306, 307, 310, 317, 322, 323], "interfac": [330, 332, 333], "intern": 330, "introduc": 0, "inv": 203, "invers": 203, "invok": 330, "involv": [242, 253, 263, 273], "io": 325, "ipynb": 0, "isel": [103, 121, 124], "issu": 330, "iter": 109, "its": [203, 310, 326, 330], "ivar": [51, 60, 96, 146, 242, 253, 263, 273, 287, 294, 310], "iw": [330, 332], "iwopi": [2, 25, 32, 44, 51, 53, 54, 55, 60, 70, 186, 238, 239, 242, 253, 263, 273, 325, 327, 330, 332, 333], "j": 203, "jaccard": 203, "jensen": 203, "jensenshannon": 203, "jona": [328, 332], "joss": 328, "journal": 328, "jupyt": 329, "keep": [24, 325], "kei": [16, 17, 54, 55, 97, 99, 100, 106, 109, 121, 124, 127, 148, 156, 157, 304, 305, 322, 323], "keyword": 147, "kulczynski": 203, "kulczynski1": 203, "kullback": 203, "kwarg": [1, 2, 22, 23, 24, 25, 31, 32, 33, 39, 43, 44, 45, 48, 51, 53, 56, 86, 96, 97, 98, 103, 115, 127, 128, 136, 137, 138, 139, 144, 145, 146, 147, 151, 160, 161, 165, 166, 170, 171, 175, 176, 181, 182, 186, 187, 191, 192, 193, 198, 199, 203, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 295, 299, 310, 316, 319], "label": 110, "lambda": 203, "larg": [103, 121, 124], "later": 332, "latest": [51, 92, 93, 96, 101, 102, 146, 287, 291, 292, 294, 306, 307, 310], "latter": 332, "layout": [1, 22, 24, 31, 33, 43, 45, 51, 56, 96, 127, 136, 138, 144, 146, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 330, 334], "layout_opt": 332, "layout_optim": 0, "least": [24, 203, 325], "leibler": 203, "length": [103, 325], "let": [332, 333, 334], "level": [8, 9, 10, 11, 28, 54, 55, 60, 61, 62, 68, 69, 70, 73, 97, 108, 111, 113, 118, 121, 124, 131, 132, 146, 148, 151, 179, 188, 189, 196, 208, 248, 259, 269, 280, 296, 299, 317, 319, 333, 334], "lib": 332, "librari": 203, "line": [0, 334], "link": [51, 70, 96, 146, 242, 253, 263, 273, 287, 294, 310, 330, 332], "list": [1, 2, 4, 5, 6, 7, 18, 19, 22, 24, 25, 26, 27, 31, 32, 34, 35, 41, 43, 44, 50, 53, 60, 70, 88, 89, 90, 94, 95, 97, 103, 110, 117, 118, 119, 123, 127, 128, 129, 130, 136, 137, 138, 140, 141, 144, 145, 148, 158, 159, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 194, 195, 200, 201, 203, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 239, 252, 262, 272, 285, 286, 293, 308, 309, 324, 333, 334], "load": [103, 113, 330, 332, 333], "load_data": [103, 113], "loc": 118, "local": 330, "locat": 331, "look": [332, 333, 334], "lookup": [103, 109], "lower": 190, "lt": 332, "luka": 328, "m": [24, 25, 109, 203], "m_a": 203, "m_b": 203, "mahalanobi": 203, "main": [103, 106], "maintain": 330, "make": 332, "manhattan": 203, "map": [16, 17, 54, 55, 239], "martin": 328, "match": 203, "matplotlib": [33, 45, 56, 332, 333], "matrix": 203, "max": [127, 128, 137, 145, 146, 148, 190, 217, 218, 327, 333, 334], "max_dens": [204, 205], "max_dist": [263, 264, 273, 274, 295], "max_dxdi": [211, 212], "max_i": 203, "max_n_row": 294, "max_n_turbin": [138, 139], "max_values_constraint": [51, 74, 96, 146, 242, 253, 263, 273, 287, 294, 310], "max_values_float": [51, 75, 96, 146, 152, 242, 249, 253, 263, 270, 273, 281, 287, 289, 294, 300, 310, 320], "max_values_int": [51, 76, 96, 146, 153, 242, 253, 260, 263, 273, 282, 287, 294, 301, 310], "maxdens": [204, 205, 206, 207, 208, 209, 210, 327], "maxfarmpow": [0, 136, 137, 325, 332, 333, 334], "maxgridspac": [211, 212, 213, 214, 215, 216, 327], "maxim": [43, 51, 74, 75, 76, 77, 96, 127, 128, 133, 136, 137, 138, 142, 144, 145, 146, 152, 153, 170, 171, 204, 209, 211, 215, 217, 221, 223, 227, 229, 233, 235, 237, 238, 240, 242, 249, 253, 260, 263, 264, 270, 273, 274, 281, 282, 287, 289, 294, 295, 300, 301, 310, 320, 325, 327, 332, 333], "maximize_obj": [51, 77, 96, 146, 242, 253, 263, 273, 287, 294, 310], "maximize_pow": [136, 137, 332, 333], "maximum": 203, "maxn": [229, 230], "maxnturbin": [138, 139, 140, 141, 142, 143, 325], "mdata": [103, 106, 107, 109, 113], "mean": [0, 128, 136, 137, 145, 203, 217, 218, 325, 327, 332], "mean_no_weight": [0, 127, 334], "memimadist": [217, 218, 219, 220, 221, 222, 327], "memori": [113, 203], "messag": 330, "metric": 203, "michen": 203, "mimamean": [217, 218], "min": [127, 128, 137, 145, 146, 148, 190, 217, 218, 327, 333, 334], "min_dens": [175, 176], "min_dist": [24, 25, 192, 193, 204, 205, 242, 243, 253, 254, 263, 264, 273, 274, 294, 295, 332], "min_dist_unit": [24, 25, 332], "min_spac": [294, 310, 316], "min_valu": [175, 176], "min_values_constraint": [51, 78, 96, 146, 242, 253, 263, 273, 287, 294, 310], "min_values_float": [51, 79, 96, 146, 154, 242, 250, 253, 263, 271, 273, 283, 287, 290, 294, 302, 310, 321], "min_values_int": [51, 80, 96, 146, 155, 242, 253, 261, 263, 273, 284, 287, 294, 303, 310], "mindist": [192, 193, 194, 195, 196, 197, 327], "mindistconstraint": [24, 25, 26, 27, 28, 29, 30, 325, 332], "minim": [24, 25, 51, 78, 79, 80, 96, 127, 128, 137, 144, 145, 146, 154, 155, 175, 176, 181, 192, 193, 205, 235, 242, 243, 250, 253, 254, 261, 263, 264, 271, 273, 274, 283, 284, 287, 290, 294, 295, 302, 303, 310, 316, 321, 325, 327, 332], "minimalmaxti": [144, 145, 325], "minimize_ti": [144, 145], "ministri": 330, "minkowski": 203, "misalign": 333, "mit": 330, "mix": 294, "model": [1, 22, 24, 31, 40, 43, 49, 96, 97, 103, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 127, 136, 138, 144, 148, 325, 332, 333, 334], "model_id": [103, 114], "model_kei": [148, 333], "modifi": [103, 117, 325], "more": 203, "move": [103, 121, 332], "multioptresultswrit": 0, "multipl": [330, 331], "must": [24, 325], "n": [14, 15, 84, 85, 165, 166, 170, 171, 181, 182, 203, 223, 224], "n_compon": [1, 9, 10, 13, 20, 21, 22, 24, 29, 30, 31, 37, 42, 43, 60, 61, 62, 69, 70, 127, 131, 133, 134, 135, 136, 138, 142, 143, 144, 160, 164, 165, 169, 170, 174, 175, 180, 181, 185, 186, 188, 189, 190, 192, 197, 198, 202, 204, 209, 210, 211, 215, 216, 217, 221, 222, 223, 227, 228, 229, 233, 234, 235, 237, 238, 240], "n_con": 81, "n_con_cmptn": [332, 333], "n_constraint": [51, 63, 65, 66, 68, 69, 74, 78, 81, 96, 146, 242, 253, 263, 273, 287, 294, 296, 310, 317, 332, 333], "n_eval": [332, 333], "n_gen": [332, 333, 334], "n_grid": [273, 274, 294, 295], "n_max": [273, 274], "n_max_gen": 332, "n_obj": 82, "n_obj_cmptn": [332, 333], "n_object": [51, 65, 66, 68, 77, 82, 96, 146, 242, 253, 263, 273, 287, 294, 296, 310, 317, 332, 333], "n_point": [51, 53, 106, 246, 257, 267, 277], "n_pop": [6, 10, 27, 35, 59, 62, 66, 69, 93, 100, 102, 103, 104, 130, 141, 157, 163, 168, 173, 178, 184, 189, 195, 201, 207, 214, 220, 226, 232, 245, 256, 266, 276, 292, 305, 307, 323, 325], "n_row_max": [273, 274, 295], "n_sel_compon": [4, 5, 6, 26, 27, 34, 35, 129, 130, 140, 141, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 194, 195, 200, 201, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232], "n_sel_turbin": [1, 22, 24, 31, 38, 43, 47, 51, 83, 96, 99, 100, 127, 136, 138, 144, 146, 156, 157, 287, 294, 304, 305, 310, 322, 323], "n_state": [51, 53, 96, 99, 100, 103, 106, 126, 146, 156, 157, 294, 304, 305, 310, 322, 323, 325], "n_turbin": [126, 160, 161, 192, 193, 242, 243, 253, 254, 263, 264, 332], "n_var": 70, "n_vars_float": [1, 4, 5, 6, 9, 10, 14, 20, 22, 24, 26, 27, 30, 31, 34, 35, 42, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 71, 75, 79, 84, 92, 93, 96, 99, 100, 101, 102, 127, 129, 130, 131, 135, 136, 138, 140, 141, 144, 146, 149, 152, 154, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 244, 245, 247, 249, 250, 253, 255, 256, 263, 265, 266, 268, 270, 271, 273, 275, 276, 278, 281, 283, 287, 288, 289, 290, 291, 292, 294, 296, 297, 300, 302, 304, 305, 306, 307, 310, 317, 318, 320, 321, 322, 323, 332, 333], "n_vars_int": [1, 4, 5, 6, 9, 10, 15, 21, 22, 24, 26, 27, 31, 34, 35, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 72, 76, 80, 85, 92, 93, 96, 99, 100, 101, 102, 127, 129, 130, 131, 136, 138, 140, 141, 144, 146, 150, 153, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 244, 245, 253, 255, 256, 258, 260, 261, 263, 265, 266, 273, 275, 276, 279, 282, 284, 287, 291, 292, 294, 296, 298, 301, 303, 304, 305, 306, 307, 310, 317, 322, 323, 332, 333], "n_vr": 60, "name": [1, 2, 7, 16, 17, 18, 19, 22, 23, 24, 25, 31, 32, 39, 40, 43, 44, 48, 49, 51, 53, 86, 87, 91, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 121, 124, 125, 127, 128, 136, 137, 138, 139, 144, 145, 146, 148, 156, 157, 158, 159, 160, 161, 165, 166, 170, 171, 175, 176, 181, 182, 186, 191, 192, 193, 198, 199, 204, 205, 211, 212, 217, 218, 223, 224, 229, 230, 235, 236, 238, 239, 241, 242, 251, 252, 253, 262, 263, 272, 273, 285, 286, 287, 293, 294, 295, 304, 305, 308, 309, 310, 316, 322, 323, 324, 332, 333, 334], "name_str": 113, "nan": [4, 103, 107, 109], "nc": 334, "ndarari": [246, 257, 267, 277], "ndarrai": [4, 20, 21, 30, 42, 51, 53, 60, 63, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 88, 89, 99, 100, 106, 109, 126, 135, 148, 149, 150, 152, 153, 154, 155, 156, 157, 203, 246, 247, 249, 250, 257, 258, 260, 261, 267, 268, 270, 271, 277, 278, 279, 281, 282, 283, 284, 288, 289, 290, 297, 298, 300, 301, 302, 303, 304, 305, 318, 320, 321, 322, 323], "need": [0, 109, 330, 332, 334], "netcdf": 334, "new": [0, 1, 16, 17, 22, 24, 31, 39, 43, 48, 51, 58, 59, 86, 96, 98, 103, 115, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 242, 244, 245, 251, 253, 255, 256, 263, 265, 266, 273, 275, 276, 287, 294, 310, 332, 333], "new_branch": 330, "next": [332, 333], "nice": 332, "non": [100, 157, 190, 203, 305, 323, 330], "none": [1, 2, 4, 5, 6, 22, 24, 25, 26, 27, 31, 32, 34, 35, 43, 44, 51, 53, 54, 55, 60, 70, 96, 103, 109, 110, 118, 121, 124, 127, 128, 129, 130, 136, 137, 138, 140, 141, 144, 145, 146, 148, 160, 161, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 287, 294, 295, 310, 332], "norm": 203, "normal": 203, "note": 294, "notebook": [0, 329], "notic": [332, 333, 334], "now": [0, 332, 333], "np": [4, 5, 6, 9, 10, 26, 27, 34, 35, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 92, 93, 101, 102, 109, 129, 130, 131, 133, 140, 141, 142, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 188, 189, 190, 194, 195, 200, 201, 203, 206, 207, 209, 213, 214, 215, 219, 220, 221, 225, 226, 227, 231, 232, 233, 237, 240, 244, 245, 255, 256, 265, 266, 275, 276, 291, 292, 296, 306, 307, 317, 332, 333], "nrel5mw": [332, 333, 334], "number": [1, 13, 14, 15, 22, 24, 29, 31, 37, 43, 51, 81, 82, 84, 85, 96, 100, 103, 122, 127, 134, 136, 138, 143, 144, 146, 157, 160, 161, 164, 165, 166, 169, 170, 171, 174, 175, 180, 181, 185, 186, 192, 193, 197, 198, 202, 203, 204, 210, 211, 216, 217, 222, 223, 224, 228, 229, 234, 235, 238, 239, 242, 243, 253, 254, 263, 264, 273, 274, 287, 294, 295, 305, 310, 323, 325, 327, 328, 332], "numer": [1, 22, 24, 31, 38, 43, 47, 51, 83, 96, 127, 136, 138, 144, 146, 287, 294, 310], "numpi": [4, 20, 21, 30, 42, 51, 53, 60, 63, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 88, 89, 99, 100, 106, 109, 126, 135, 148, 149, 150, 152, 153, 154, 155, 156, 157, 203, 246, 247, 249, 250, 257, 258, 260, 261, 267, 268, 270, 271, 277, 278, 279, 281, 282, 283, 284, 288, 289, 290, 297, 298, 300, 301, 302, 303, 304, 305, 318, 320, 321, 322, 323, 332, 333], "o": [332, 333], "obj": [65, 66, 68, 69, 296, 317], "object": [0, 1, 8, 11, 22, 24, 31, 43, 44, 48, 51, 54, 55, 60, 65, 66, 68, 69, 70, 73, 77, 82, 88, 89, 96, 97, 103, 109, 113, 114, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 160, 165, 170, 175, 179, 181, 186, 192, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 253, 259, 263, 269, 273, 280, 287, 294, 296, 299, 310, 317, 319, 326, 332, 333, 334], "objective_typ": [43, 48, 127, 136, 138, 144, 204, 211, 217, 223, 229, 235, 238, 241, 334], "observ": 203, "obtain": [51, 70, 96, 146, 242, 253, 263, 273, 287, 294, 310], "off": 332, "offset_i": [310, 313], "offset_x": [310, 312], "ofixn": [223, 224, 225, 226, 227, 228, 327], "old": [16, 17], "omaxn": [229, 230, 231, 232, 233, 234, 235, 327], "ominn": [235, 236, 237, 327], "onc": 332, "one": [203, 334], "onli": [60, 203, 332], "open": [328, 330], "opt": [0, 51, 86, 96, 98, 103, 146, 287, 294, 310, 325, 331, 332, 334, 335], "opt2farm_vars_individu": [96, 99, 146, 156, 294, 304, 310, 322], "opt2farm_vars_popul": [96, 100, 146, 157, 294, 305, 310, 323], "opt_yawm": [333, 334], "optfarmvar": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 326, 333, 334], "optfunct": [186, 238], "optfunctionlist": [60, 70], "optim": [0, 2, 9, 23, 25, 31, 32, 44, 51, 53, 57, 68, 92, 93, 96, 99, 100, 101, 102, 128, 131, 136, 137, 139, 144, 145, 146, 156, 157, 161, 166, 171, 176, 186, 193, 199, 203, 205, 212, 218, 224, 230, 236, 239, 242, 253, 263, 273, 287, 291, 292, 294, 296, 304, 305, 306, 307, 310, 317, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334], "optimizer_pymoo": [332, 333, 334], "optimizer_typ": 334, "option": [2, 5, 6, 23, 25, 26, 27, 32, 34, 35, 39, 44, 48, 53, 54, 55, 60, 65, 66, 70, 86, 97, 98, 103, 109, 115, 118, 119, 121, 124, 128, 129, 130, 136, 137, 139, 140, 141, 144, 145, 147, 148, 151, 161, 162, 163, 166, 167, 168, 171, 172, 173, 176, 177, 178, 183, 184, 191, 193, 194, 195, 199, 200, 201, 203, 205, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 239, 241, 243, 246, 251, 254, 257, 264, 267, 274, 277, 295, 299, 316, 319, 332], "order": [60, 70, 109, 332], "order_inv": 332, "order_ssel": 332, "org": 328, "orient": 333, "origin": [100, 103, 104, 157, 203, 305, 323, 330], "other": [51, 92, 93, 96, 101, 102, 146, 287, 291, 292, 294, 306, 307, 310], "otherwis": [109, 239], "our": 332, "out": [203, 333], "out_var": [103, 119], "output": [0, 103, 106, 109, 116, 117, 119, 203, 332, 333, 334], "output_coord": [103, 116], "output_point_var": [103, 117], "output_typ": 334, "output_var": [117, 332], "outside_whit": 332, "over": [203, 332], "overload": 60, "ow": 330, "p": [203, 330, 333], "p_max": 332, "p_min": 332, "packag": [0, 325, 330, 332], "page": 328, "pair": 203, "panda": 118, "paper": 328, "parallel": [103, 119, 203, 330], "paramet": [0, 51, 294, 310, 326, 330, 332], "pareto": 325, "pars": [51, 87, 96, 146, 287, 294, 310], "pars_dist": 332, "parse_tvar": [51, 87, 96, 146, 287, 294, 310], "part": [113, 332], "partial_wak": 332, "particular": 330, "pass": 203, "pdata": [103, 106], "per": [294, 334], "perform": 330, "person": 331, "pip": [331, 332, 335], "place": [148, 294, 310, 326, 332], "pleas": [325, 328, 330, 331, 335], "plot": [246, 257, 267, 277, 332, 334], "plotli": [242, 246, 253, 257, 263, 267, 273, 277], "plt": [332, 333, 334], "png": 334, "point": [51, 53, 106, 107, 109, 203, 242, 243, 246, 253, 254, 257, 263, 264, 267, 273, 274, 277, 295, 327, 332], "pointwis": 203, "polar": 334, "polygon": 332, "pop": [60, 70, 100, 157, 305, 323], "pop_siz": [332, 333, 334], "popstat": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 325], "popul": [1, 6, 10, 22, 24, 27, 31, 35, 43, 51, 59, 60, 62, 66, 69, 70, 96, 103, 104, 127, 130, 136, 138, 141, 144, 146, 160, 163, 165, 168, 170, 173, 175, 178, 181, 184, 186, 189, 192, 195, 198, 201, 204, 207, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 242, 245, 253, 256, 263, 266, 273, 276, 287, 294, 310, 325, 332], "posit": [1, 22, 287, 325, 326], "possibl": [1, 4, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 203, 204, 211, 217, 223, 229, 235, 238], "post_rotor": 97, "post_rotor_var": [96, 97], "power": [136, 325, 330, 332, 333], "pre_rotor": [97, 148, 333], "pre_rotor_var": [96, 97], "precis": 203, "predecessor": 330, "previou": 109, "previous": 70, "print": [1, 22, 24, 31, 40, 43, 49, 127, 136, 138, 144, 332, 333], "print_info": [332, 333], "print_model": [1, 22, 24, 31, 40, 43, 49, 127, 136, 138, 144], "prob_r": [65, 66, 88, 89], "prob_res_einsum_individu": [51, 88, 96, 146, 242, 253, 263, 273, 287, 294, 310], "prob_res_einsum_popul": [51, 89, 96, 146, 242, 253, 263, 273, 287, 294, 310], "prob_res_list": [51, 88, 89, 96, 146, 242, 253, 263, 273, 287, 294, 310], "probabl": 203, "probe": [51, 53], "problem": [0, 1, 2, 5, 6, 9, 10, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 43, 44, 51, 53, 54, 55, 58, 59, 60, 65, 66, 68, 69, 70, 86, 88, 89, 96, 98, 127, 128, 129, 130, 131, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 332, 333, 334], "problem_par": [332, 333, 334], "problem_result": [1, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 43, 58, 59, 68, 69, 127, 129, 130, 131, 136, 138, 140, 141, 144, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 244, 245, 255, 256, 265, 266, 275, 276, 296, 317, 332, 333], "problem_typ": [51, 86, 96, 98, 146, 242, 251, 253, 263, 273, 287, 294, 310, 334], "problemdefaultfunc": 70, "process": [332, 333, 334], "produc": 334, "product": 203, "project": 330, "properti": [1, 7, 12, 14, 15, 18, 19, 22, 24, 31, 36, 38, 41, 43, 46, 47, 50, 51, 57, 63, 64, 67, 74, 77, 78, 81, 82, 83, 84, 85, 90, 96, 103, 112, 114, 120, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "proport": 203, "provid": [103, 109, 113, 330, 332], "public": 330, "publicli": 330, "publish": 328, "pull": 330, "puor": 334, "pure": [160, 165, 170, 175, 181, 192, 198, 204, 211, 217, 223, 229, 235, 242, 253, 326, 327], "purpos": [332, 334], "push": 330, "pymoo": [332, 333], "pyplot": [33, 45, 56, 246, 257, 267, 277, 332, 333], "pytest": 335, "python": [0, 203, 330, 332, 334], "python3": 332, "q": 203, "quasi": 203, "question": 332, "radiu": [1, 2], "rang": 118, "rao": 203, "rather": 334, "read": 332, "realiz": 333, "reason": 113, "recov": [103, 124], "refer": 203, "reggridslayoutoptproblem": [294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 326], "regualar": 333, "regular": [263, 273, 294, 310, 326, 327], "regularlayoutoptproblem": [310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326], "remot": 330, "renam": [0, 1, 16, 17, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "rename_vars_float": [1, 16, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "rename_vars_int": [1, 17, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "render": 332, "repeat": 148, "replac": 331, "report": 330, "repositori": [329, 330, 331, 334, 335], "repr": [103, 105], "repres": 333, "request": 330, "requir": [332, 335], "research": 330, "reset": [103, 118], "resolut": [332, 333], "respect": 203, "result": [5, 6, 9, 10, 26, 27, 34, 35, 51, 58, 59, 61, 62, 65, 66, 68, 69, 88, 89, 96, 106, 109, 119, 129, 130, 131, 140, 141, 146, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 188, 189, 194, 195, 200, 201, 203, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 242, 244, 245, 253, 255, 256, 263, 265, 266, 273, 275, 276, 287, 294, 296, 310, 317, 332, 333, 334], "result_label": 334, "ret_prob_r": [51, 65, 66, 96, 146, 242, 253, 263, 273, 287, 294, 310], "return": [1, 22, 24, 31, 43, 103, 105, 121, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 188, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273], "rew": 333, "rho": [332, 333, 334], "roger": 203, "rogerstanimoto": 203, "roject": 330, "root": 332, "rose": [332, 334], "roseplotoutput": 334, "rotor": [1, 2, 148, 161, 332, 333], "rotor_model": [332, 333], "row": [203, 273, 274, 294, 295], "rule": [0, 127, 128, 137, 145], "run": [0, 1, 22, 24, 31, 39, 43, 48, 51, 86, 92, 93, 96, 98, 101, 102, 103, 115, 120, 121, 124, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 191, 192, 198, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 291, 292, 294, 295, 306, 307, 310, 330, 332, 333, 334, 335], "run_calcul": [103, 119], "runner": 295, "russel": 203, "russellrao": 203, "same": [148, 203, 334], "sampl": [332, 333], "save": [203, 334], "savefig": 334, "sbeta_factor": 332, "scalar": 203, "scale": [127, 128, 137, 145, 217, 218], "scan": 334, "scanstat": 334, "schmidt": 328, "schmidt2023": 328, "scipi": 203, "script": [0, 330, 334], "search": 109, "section": [325, 334], "see": [203, 325, 332], "seed": [332, 333, 334], "sel": [103, 121, 124, 148], "sel_turbin": [1, 2, 22, 24, 25, 31, 32, 41, 43, 44, 50, 51, 53, 90, 96, 127, 136, 138, 144, 146, 287, 294, 310, 333], "select": [1, 2, 4, 5, 6, 22, 24, 25, 26, 27, 31, 32, 34, 35, 38, 39, 41, 43, 44, 47, 48, 50, 51, 53, 60, 70, 83, 86, 90, 96, 98, 103, 109, 115, 118, 121, 124, 127, 129, 130, 136, 138, 140, 141, 144, 146, 148, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 191, 194, 195, 200, 201, 206, 207, 213, 214, 219, 220, 225, 226, 231, 232, 241, 251, 287, 294, 310, 326, 332, 333], "self": [76, 80, 103, 105, 109, 113, 153, 155, 246, 257, 267, 277, 282, 284, 301, 303], "serv": 109, "set": [103, 121, 124, 333], "set_run": [103, 121], "setup": [325, 332, 333, 334], "setup_par": [332, 333], "seuclidean": 203, "sever": [294, 326], "shannon": 203, "shape": [4, 5, 6, 9, 10, 20, 21, 26, 27, 30, 34, 35, 42, 51, 53, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 92, 93, 99, 100, 101, 102, 106, 126, 129, 130, 131, 133, 135, 140, 141, 142, 149, 150, 152, 153, 154, 155, 156, 157, 162, 163, 167, 168, 172, 173, 177, 178, 183, 184, 188, 189, 190, 194, 195, 200, 201, 206, 207, 209, 213, 214, 215, 219, 220, 221, 225, 226, 227, 231, 232, 233, 237, 240, 244, 245, 246, 247, 249, 250, 255, 256, 257, 258, 260, 261, 265, 266, 267, 268, 270, 271, 275, 276, 277, 278, 279, 281, 282, 283, 284, 288, 289, 290, 291, 292, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 317, 318, 320, 321, 322, 323], "shortli": [332, 333, 334], "should": [106, 113, 203, 332], "show": [332, 333, 334], "shutdown": 333, "silent": [8, 9, 10, 11, 28, 54, 55, 60, 61, 62, 68, 69, 70, 73, 97, 108, 111, 113, 118, 121, 124, 131, 132, 151, 179, 188, 189, 196, 208, 248, 259, 269, 280, 296, 299, 317, 319], "similarli": 334, "simpli": [330, 334], "singl": [1, 5, 22, 24, 26, 31, 34, 43, 51, 65, 96, 106, 127, 129, 136, 138, 140, 144, 146, 160, 162, 165, 167, 170, 172, 175, 177, 181, 183, 186, 192, 194, 198, 200, 204, 206, 211, 213, 217, 219, 223, 225, 229, 231, 235, 238, 242, 253, 263, 273, 287, 294, 310], "singleobjresultswrit": 334, "singleoptresultswrit": 0, "singlestatest": 333, "sinlg": 333, "site": 332, "size": [103, 104, 122, 332], "slice": 118, "small": 333, "smart": 330, "smdl": 123, "smfp": [103, 109], "smoother": 332, "sneath": 203, "softwar": [328, 330], "sokal": 203, "sokalmichen": 203, "sokalsneath": 203, "solv": [332, 333], "solver": [332, 333], "some": [203, 332], "sourc": [1, 2, 5, 6, 13, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 43, 44, 45, 48, 49, 51, 53, 56, 58, 59, 73, 86, 87, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 111, 113, 117, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330], "space": [176, 203, 205, 211, 253, 254, 294, 310, 316, 327], "spacing_i": [310, 315], "spacing_x": [310, 314], "spatial": [24, 203, 325], "specif": [103, 125, 334], "specifi": [239, 332], "speed": 332, "sqeuclidean": 203, "sqrt": 203, "squar": 203, "standard": [203, 330, 332], "start": [103, 119], "stash": [103, 121, 124], "state": [0, 100, 103, 104, 109, 110, 115, 118, 122, 126, 128, 137, 145, 148, 157, 305, 323, 325, 332, 333, 334], "state_target": 109, "state_target_tpoint": 109, "state_turbin": 109, "states_loc": [103, 118], "states_sel": [103, 118], "states_typ": [103, 115, 334], "statesroseplotoutput": 332, "statest": 332, "static": 332, "statist": [103, 126], "statu": [103, 121, 124], "steer": [329, 330], "step": [333, 334], "step_vector": [333, 334], "stoevesandt": 328, "store": [113, 203], "str": [2, 3, 7, 16, 17, 18, 19, 23, 24, 25, 32, 44, 53, 54, 55, 70, 87, 91, 94, 95, 97, 106, 109, 115, 116, 117, 119, 125, 127, 128, 136, 137, 139, 144, 145, 148, 158, 159, 161, 166, 171, 176, 191, 193, 199, 203, 205, 212, 218, 224, 230, 236, 239, 241, 246, 251, 252, 257, 262, 267, 272, 277, 285, 286, 293, 295, 308, 309, 316, 324], "string": [1, 3, 22, 24, 31, 39, 43, 48, 51, 86, 96, 98, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 203, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "sub": [0, 97, 103, 123, 148, 332], "sub_model": [103, 123], "subject": [57, 103, 113], "subplot": 332, "subsequ": 325, "subset": [118, 121, 124], "subtract": 332, "success": [332, 333], "successfulli": [332, 333], "sum": [51, 81, 82, 88, 89, 96, 127, 128, 137, 145, 146, 203, 242, 253, 263, 273, 287, 294, 310], "sum_i": 203, "super": [97, 151, 299, 319], "suppli": 203, "support": [0, 203, 330], "sure": 332, "switch": [127, 128, 137, 145, 332], "synonym": 203, "syntax": 203, "t": [109, 203], "t0": 332, "t1": 332, "t2": 332, "t3": 332, "t4": 332, "t5": 332, "t6": 332, "t7": 332, "t8": 332, "t9": 332, "tackl": 332, "tanimoto": 203, "target": [103, 107, 109], "task": 332, "tdata": [103, 107, 109], "term_par": [332, 333, 334], "termin": [332, 333, 334], "test": [0, 330], "th": 203, "thei": 332, "them": 203, "thi": [1, 2, 70, 92, 93, 101, 102, 103, 106, 109, 119, 121, 124, 148, 203, 242, 253, 263, 273, 291, 292, 294, 306, 307, 332, 333, 334], "those": 203, "three": 330, "through": [0, 330], "throw": 109, "thrown": 203, "thrust": 333, "ti": [144, 325, 332, 333, 334], "time": [0, 1, 22, 24, 31, 39, 43, 48, 51, 86, 96, 98, 103, 115, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 191, 192, 198, 203, 204, 211, 217, 223, 229, 235, 238, 241, 242, 251, 253, 263, 273, 287, 294, 310, 325], "titl": [242, 246, 253, 257, 263, 267, 273, 277, 328, 334], "tname": 332, "to_datafram": 333, "tol": [182, 186, 187], "toler": [51, 63, 96, 146, 182, 186, 187, 242, 253, 263, 273, 287, 294, 310], "tool": 334, "total": [51, 81, 82, 96, 103, 122, 146, 242, 253, 263, 273, 287, 294, 310, 332], "tpoint": 109, "tracker": 330, "translat": [96, 99, 100, 146, 156, 157, 294, 304, 305, 310, 322, 323, 333], "true": [12, 57, 109, 112, 120, 138, 139, 246, 257, 267, 277, 332, 333, 334], "true_circl": [246, 257, 267, 277], "try": 333, "tupl": [39, 48, 86, 98, 115, 116, 119, 147, 191, 241, 251], "turbin": [1, 2, 22, 24, 25, 31, 32, 38, 41, 43, 44, 47, 50, 51, 53, 57, 83, 87, 90, 91, 96, 109, 127, 128, 136, 137, 138, 144, 145, 146, 148, 161, 165, 166, 170, 171, 175, 176, 181, 193, 204, 223, 224, 229, 235, 242, 243, 253, 254, 263, 264, 287, 294, 310, 316, 325, 326, 327, 332, 333, 334], "turbine_i": [51, 87, 91, 96, 146, 287, 294, 310], "turbine_model": [332, 333, 334], "turrbin": [138, 325], "tvar": [51, 91, 96, 146, 287, 294, 310], "tvr": [51, 87, 96, 146, 287, 294, 310], "two": [113, 203, 332], "typ": [146, 148, 334], "type": [103, 114, 148, 203, 332, 333, 334], "typic": [70, 119], "u": [203, 332], "u2": 332, "u_i": 203, "unbound": [75, 76, 79, 80, 152, 153, 154, 155, 249, 250, 270, 271, 281, 282, 283, 284, 289, 290, 300, 301, 302, 303, 320, 321], "under": [113, 330], "underli": [1, 2, 5, 22, 23, 24, 25, 26, 31, 32, 34, 43, 44, 127, 128, 129, 136, 137, 138, 139, 140, 144, 145, 160, 161, 162, 165, 166, 167, 170, 171, 172, 175, 176, 177, 181, 183, 186, 192, 193, 194, 198, 199, 200, 204, 205, 206, 211, 212, 213, 217, 218, 219, 223, 224, 225, 229, 230, 231, 235, 236, 238, 239], "uniform": [146, 148, 333], "uniqu": [103, 114], "unit": [24, 25, 203], "unset_run": [103, 121, 124], "unweight": 203, "upcast": 109, "updat": [0, 51, 92, 93, 96, 101, 102, 146, 287, 291, 292, 294, 306, 307, 310, 332], "update_problem_individu": [51, 92, 96, 101, 146, 287, 291, 294, 306, 310], "update_problem_popul": [51, 93, 96, 102, 146, 287, 292, 294, 307, 310], "upper": 190, "url": 328, "us": [0, 1, 2, 4, 51, 75, 76, 79, 80, 92, 93, 96, 101, 102, 146, 152, 153, 154, 155, 203, 239, 249, 250, 270, 271, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 300, 301, 302, 303, 306, 307, 310, 320, 321, 325, 331, 332, 333], "usag": 334, "user": [203, 330, 332], "util": [1, 2, 242, 243, 253, 254, 263, 264, 273, 274, 332], "v": [103, 125, 203], "v_i": 203, "valid": [138, 139, 198, 199, 200, 201, 202, 242, 243, 246, 253, 257, 263, 267, 273, 277, 327], "valu": [1, 4, 5, 6, 9, 10, 16, 17, 22, 24, 26, 27, 31, 34, 35, 43, 51, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 92, 93, 96, 97, 99, 100, 101, 102, 106, 121, 124, 127, 129, 130, 131, 136, 138, 140, 141, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 188, 189, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 242, 244, 245, 247, 249, 250, 253, 255, 256, 258, 260, 261, 263, 265, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 310, 317, 318, 320, 321, 322, 323, 325, 333], "valueerror": 203, "var": [1, 4, 22, 24, 31, 43, 51, 70, 87, 91, 96, 97, 98, 99, 100, 103, 125, 127, 136, 138, 144, 146, 156, 157, 160, 165, 170, 175, 181, 186, 192, 198, 203, 204, 211, 217, 223, 229, 235, 238, 287, 294, 304, 305, 310, 322, 323, 333], "var2col": 332, "var_names_float": [1, 18, 22, 24, 31, 43, 51, 94, 96, 127, 136, 138, 144, 146, 158, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 252, 253, 263, 272, 273, 285, 287, 293, 294, 308, 310, 324], "var_names_int": [1, 19, 22, 24, 31, 43, 51, 95, 96, 127, 136, 138, 144, 146, 159, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 262, 263, 273, 286, 287, 294, 309, 310], "vardeps_float": [1, 20, 22, 24, 30, 31, 42, 43, 127, 135, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "vardeps_int": [1, 21, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "variabl": [1, 4, 5, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 30, 31, 34, 35, 42, 43, 51, 54, 55, 58, 59, 60, 65, 66, 68, 69, 70, 71, 72, 75, 76, 79, 80, 84, 85, 87, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 106, 107, 109, 117, 119, 125, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 203, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 239, 242, 244, 245, 247, 249, 250, 252, 253, 255, 256, 258, 260, 261, 262, 263, 265, 266, 268, 270, 271, 272, 273, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 317, 318, 320, 321, 322, 323, 324, 325, 326, 332, 333, 334], "varianc": 203, "varmap": [1, 16, 17, 22, 24, 31, 43, 127, 136, 138, 144, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238], "varmap_float": [51, 54, 55, 96, 146, 242, 253, 263, 273, 287, 294, 310], "varmap_int": [51, 54, 55, 96, 146, 242, 253, 263, 273, 287, 294, 310], "vars_float": [1, 4, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 92, 93, 96, 99, 100, 101, 102, 127, 129, 130, 131, 136, 138, 140, 141, 144, 146, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 242, 244, 245, 253, 255, 256, 263, 265, 266, 273, 275, 276, 287, 291, 292, 294, 296, 304, 305, 306, 307, 310, 317, 322, 323], "vars_int": [1, 4, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 43, 51, 58, 59, 60, 65, 66, 68, 69, 70, 92, 93, 96, 99, 100, 101, 102, 127, 129, 130, 131, 136, 138, 140, 141, 144, 146, 156, 157, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 181, 183, 184, 186, 192, 194, 195, 198, 200, 201, 204, 206, 207, 211, 213, 214, 217, 219, 220, 223, 225, 226, 229, 231, 232, 235, 238, 242, 244, 245, 253, 255, 256, 263, 265, 266, 273, 275, 276, 287, 291, 292, 294, 296, 304, 305, 306, 307, 310, 317, 322, 323], "vector": [60, 70, 103, 203, 325, 330, 332, 333, 334], "venv": 332, "verbos": [1, 8, 9, 10, 11, 22, 24, 28, 31, 43, 51, 54, 55, 60, 61, 62, 68, 69, 70, 73, 96, 97, 103, 108, 111, 113, 118, 121, 124, 127, 131, 132, 136, 138, 144, 146, 151, 160, 165, 170, 175, 179, 181, 186, 188, 189, 192, 196, 198, 204, 208, 211, 217, 223, 229, 235, 238, 242, 248, 253, 259, 263, 269, 273, 280, 287, 294, 296, 299, 310, 317, 319, 332, 333], "veri": 332, "version": [203, 330], "vi": 203, "via": [60, 70, 103, 118, 119, 325, 330, 331, 332, 334], "violat": [182, 186, 187], "visual": [332, 333], "vmax": 334, "vmin": 334, "vnames_float": 239, "vnames_int": 239, "vollmer": 328, "volum": 328, "vr": 60, "vstack": 203, "w": [109, 203, 332, 333, 334], "wai": 331, "wake": [109, 242, 253, 326, 327, 329, 330, 332], "wake_fram": [333, 334], "wake_model": [332, 333, 334], "wake_st": 0, "want": 331, "wd": [332, 333, 334], "wd_sector": 334, "we": [203, 330, 332, 333, 334], "weight": [0, 88, 89, 103, 126, 127, 128, 137, 145, 203, 218, 332], "well": 330, "were": 70, "where": [203, 332], "which": [60, 70, 103, 117, 127, 128, 137, 145, 148, 203, 330, 332, 333], "whole": [51, 59, 96, 146, 242, 245, 253, 256, 263, 266, 273, 276, 287, 294, 310], "wind": [1, 22, 24, 31, 36, 43, 46, 51, 67, 96, 127, 136, 138, 144, 146, 242, 253, 263, 273, 287, 294, 310, 325, 326, 330, 332, 333, 334], "wind_farm": 334, "wind_rose_bremen": 332, "windfarm": [1, 24, 36, 46, 67, 332, 333], "windrosebinplot": 334, "wise": 203, "wish": 332, "within": [242, 243, 253, 254, 263, 264, 273, 274, 327, 332], "without": 332, "workflow": 0, "would": 203, "write": 334, "write_nc": 334, "wrt": [60, 70], "ws_bin": 334, "ws_var": 334, "x": [203, 330, 332, 333], "x_0000": 332, "x_0001": 332, "x_0002": 332, "x_0003": 332, "x_0004": 332, "x_0005": 332, "x_0006": 332, "x_0007": 332, "x_0008": 332, "x_0009": 332, "x_i": 203, "xa": 203, "xarrai": [103, 119, 332], "xb": 203, "xmax": [332, 333], "xmin": 332, "xtol": 332, "xy": [242, 246, 253, 257, 263, 267, 273, 277, 332], "xy_bas": [332, 333, 334], "xy_step": 332, "y": [203, 332, 333], "y_0000": 332, "y_0001": 332, "y_0002": 332, "y_0003": 332, "y_0004": 332, "y_0005": 332, "y_0006": 332, "y_0007": 332, "y_0008": 332, "y_0009": 332, "yaml": [0, 330, 334], "yaml_input": 0, "yaw": [0, 332, 333, 334], "yawm": [333, 334], "yawm2yaw": [333, 334], "yawm_0000": 333, "yawm_0001": 333, "yawm_0002": 333, "yawm_0003": 333, "yawm_0004": 333, "yawm_0005": 333, "yawm_0006": 333, "yawm_0007": 333, "yawm_0008": 333, "year": 328, "yield": [328, 330], "ymax": 332, "ymin": 332, "you": [203, 331], "your": [330, 331], "yule": 203, "zero": 203, "zorder": 332}, "titles": ["Changelog", "foxes_opt.constraints.AreaGeometryConstraint", "foxes_opt.constraints.AreaGeometryConstraint.__init__", "foxes_opt.constraints.AreaGeometryConstraint.__str__", "foxes_opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes_opt.constraints.AreaGeometryConstraint.calc_individual", "foxes_opt.constraints.AreaGeometryConstraint.calc_population", "foxes_opt.constraints.AreaGeometryConstraint.component_names", "foxes_opt.constraints.AreaGeometryConstraint.finalize", "foxes_opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes_opt.constraints.AreaGeometryConstraint.finalize_population", "foxes_opt.constraints.AreaGeometryConstraint.initialize", "foxes_opt.constraints.AreaGeometryConstraint.initialized", "foxes_opt.constraints.AreaGeometryConstraint.n_components", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.var_names_float", "foxes_opt.constraints.AreaGeometryConstraint.var_names_int", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes_opt.constraints.FarmBoundaryConstraint", "foxes_opt.constraints.FarmBoundaryConstraint.__init__", "foxes_opt.constraints.MinDistConstraint", "foxes_opt.constraints.MinDistConstraint.__init__", "foxes_opt.constraints.MinDistConstraint.calc_individual", "foxes_opt.constraints.MinDistConstraint.calc_population", "foxes_opt.constraints.MinDistConstraint.initialize", "foxes_opt.constraints.MinDistConstraint.n_components", "foxes_opt.constraints.MinDistConstraint.vardeps_float", "foxes_opt.core.FarmConstraint", "foxes_opt.core.FarmConstraint.__init__", "foxes_opt.core.FarmConstraint.add_to_layout_figure", "foxes_opt.core.FarmConstraint.calc_individual", "foxes_opt.core.FarmConstraint.calc_population", "foxes_opt.core.FarmConstraint.farm", "foxes_opt.core.FarmConstraint.n_components", "foxes_opt.core.FarmConstraint.n_sel_turbines", "foxes_opt.core.FarmConstraint.new", "foxes_opt.core.FarmConstraint.print_models", "foxes_opt.core.FarmConstraint.sel_turbines", "foxes_opt.core.FarmConstraint.vardeps_float", "foxes_opt.core.FarmObjective", "foxes_opt.core.FarmObjective.__init__", "foxes_opt.core.FarmObjective.add_to_layout_figure", "foxes_opt.core.FarmObjective.farm", "foxes_opt.core.FarmObjective.n_sel_turbines", "foxes_opt.core.FarmObjective.new", "foxes_opt.core.FarmObjective.print_models", "foxes_opt.core.FarmObjective.sel_turbines", "foxes_opt.core.FarmOptProblem", "foxes_opt.core.FarmOptProblem.INT_INF", "foxes_opt.core.FarmOptProblem.__init__", "foxes_opt.core.FarmOptProblem.add_constraint", "foxes_opt.core.FarmOptProblem.add_objective", "foxes_opt.core.FarmOptProblem.add_to_layout_figure", "foxes_opt.core.FarmOptProblem.all_turbines", "foxes_opt.core.FarmOptProblem.apply_individual", "foxes_opt.core.FarmOptProblem.apply_population", "foxes_opt.core.FarmOptProblem.calc_gradients", "foxes_opt.core.FarmOptProblem.check_constraints_individual", "foxes_opt.core.FarmOptProblem.check_constraints_population", "foxes_opt.core.FarmOptProblem.constraints_tol", "foxes_opt.core.FarmOptProblem.counter", "foxes_opt.core.FarmOptProblem.evaluate_individual", "foxes_opt.core.FarmOptProblem.evaluate_population", "foxes_opt.core.FarmOptProblem.farm", "foxes_opt.core.FarmOptProblem.finalize_individual", "foxes_opt.core.FarmOptProblem.finalize_population", "foxes_opt.core.FarmOptProblem.get_gradients", "foxes_opt.core.FarmOptProblem.initial_values_float", "foxes_opt.core.FarmOptProblem.initial_values_int", "foxes_opt.core.FarmOptProblem.initialize", "foxes_opt.core.FarmOptProblem.max_values_constraints", "foxes_opt.core.FarmOptProblem.max_values_float", "foxes_opt.core.FarmOptProblem.max_values_int", "foxes_opt.core.FarmOptProblem.maximize_objs", "foxes_opt.core.FarmOptProblem.min_values_constraints", "foxes_opt.core.FarmOptProblem.min_values_float", "foxes_opt.core.FarmOptProblem.min_values_int", "foxes_opt.core.FarmOptProblem.n_constraints", "foxes_opt.core.FarmOptProblem.n_objectives", "foxes_opt.core.FarmOptProblem.n_sel_turbines", "foxes_opt.core.FarmOptProblem.n_vars_float", "foxes_opt.core.FarmOptProblem.n_vars_int", "foxes_opt.core.FarmOptProblem.new", "foxes_opt.core.FarmOptProblem.parse_tvar", "foxes_opt.core.FarmOptProblem.prob_res_einsum_individual", "foxes_opt.core.FarmOptProblem.prob_res_einsum_population", "foxes_opt.core.FarmOptProblem.sel_turbines", "foxes_opt.core.FarmOptProblem.tvar", "foxes_opt.core.FarmOptProblem.update_problem_individual", "foxes_opt.core.FarmOptProblem.update_problem_population", "foxes_opt.core.FarmOptProblem.var_names_float", "foxes_opt.core.FarmOptProblem.var_names_int", "foxes_opt.core.FarmVarsProblem", "foxes_opt.core.FarmVarsProblem.initialize", "foxes_opt.core.FarmVarsProblem.new", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes_opt.core.FarmVarsProblem.update_problem_individual", "foxes_opt.core.FarmVarsProblem.update_problem_population", "foxes_opt.core.PopStates", "foxes_opt.core.PopStates.__init__", "foxes_opt.core.PopStates.__repr__", "foxes_opt.core.PopStates.calculate", "foxes_opt.core.PopStates.ensure_variables", "foxes_opt.core.PopStates.finalize", "foxes_opt.core.PopStates.get_data", "foxes_opt.core.PopStates.index", "foxes_opt.core.PopStates.initialize", "foxes_opt.core.PopStates.initialized", "foxes_opt.core.PopStates.load_data", "foxes_opt.core.PopStates.model_id", "foxes_opt.core.PopStates.new", "foxes_opt.core.PopStates.output_coords", "foxes_opt.core.PopStates.output_point_vars", "foxes_opt.core.PopStates.reset", "foxes_opt.core.PopStates.run_calculation", "foxes_opt.core.PopStates.running", "foxes_opt.core.PopStates.set_running", "foxes_opt.core.PopStates.size", "foxes_opt.core.PopStates.sub_models", "foxes_opt.core.PopStates.unset_running", "foxes_opt.core.PopStates.var", "foxes_opt.core.PopStates.weights", "foxes_opt.objectives.FarmVarObjective", "foxes_opt.objectives.FarmVarObjective.__init__", "foxes_opt.objectives.FarmVarObjective.calc_individual", "foxes_opt.objectives.FarmVarObjective.calc_population", "foxes_opt.objectives.FarmVarObjective.finalize_individual", "foxes_opt.objectives.FarmVarObjective.initialize", "foxes_opt.objectives.FarmVarObjective.maximize", "foxes_opt.objectives.FarmVarObjective.n_components", "foxes_opt.objectives.FarmVarObjective.vardeps_float", "foxes_opt.objectives.MaxFarmPower", "foxes_opt.objectives.MaxFarmPower.__init__", "foxes_opt.objectives.MaxNTurbines", "foxes_opt.objectives.MaxNTurbines.__init__", "foxes_opt.objectives.MaxNTurbines.calc_individual", "foxes_opt.objectives.MaxNTurbines.calc_population", "foxes_opt.objectives.MaxNTurbines.maximize", "foxes_opt.objectives.MaxNTurbines.n_components", "foxes_opt.objectives.MinimalMaxTI", "foxes_opt.objectives.MinimalMaxTI.__init__", "foxes_opt.problems.OptFarmVars", "foxes_opt.problems.OptFarmVars.__init__", "foxes_opt.problems.OptFarmVars.add_var", "foxes_opt.problems.OptFarmVars.initial_values_float", "foxes_opt.problems.OptFarmVars.initial_values_int", "foxes_opt.problems.OptFarmVars.initialize", "foxes_opt.problems.OptFarmVars.max_values_float", "foxes_opt.problems.OptFarmVars.max_values_int", "foxes_opt.problems.OptFarmVars.min_values_float", "foxes_opt.problems.OptFarmVars.min_values_int", "foxes_opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes_opt.problems.OptFarmVars.opt2farm_vars_population", "foxes_opt.problems.OptFarmVars.var_names_float", "foxes_opt.problems.OptFarmVars.var_names_int", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.new", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Valid", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.cdist", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.Objective", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.new", "foxes_opt.problems.layout.geom_layouts.GeomLayout", "foxes_opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.new", "foxes_opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes_opt.problems.layout.FarmLayoutOptProblem", "foxes_opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes_opt.problems.layout.RegularLayoutOptProblem", "foxes_opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegularLayoutOptProblem.var_names_float", "API", "foxes_opt.problems", "foxes_opt.problems.layout.geom_layouts", "Citation", "Examples", "Welcome to <em>foxes-opt</em>", "Installation", "Layout optimization", "Wake steering", "Input parameter files", "Testing"], "titleterms": {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "acknowledg": 330, "api": 325, "attribut": [1, 24, 51, 103, 127, 138, 186, 242, 253, 263, 273, 294, 310], "changelog": 0, "citat": 328, "command": 334, "constraint": [325, 327], "content": 330, "contribut": 330, "core": 325, "develop": 331, "exampl": [203, 329], "file": 334, "fox": 330, "foxes_opt": [325, 326, 327], "foxes_opt_yaml": 334, "geom_layout": [326, 327], "input": 334, "instal": 331, "layout": [326, 327, 332], "licens": 330, "member": [1, 22, 24, 31, 43, 51, 96, 103, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "note": 203, "object": [325, 327], "opt": 330, "optim": 332, "option": 334, "paramet": [2, 4, 5, 6, 8, 9, 10, 11, 16, 17, 23, 25, 26, 27, 28, 32, 33, 34, 35, 39, 44, 45, 48, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 73, 86, 87, 88, 89, 91, 92, 93, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 115, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 131, 132, 136, 137, 139, 140, 141, 144, 145, 147, 148, 151, 156, 157, 161, 162, 163, 166, 167, 168, 171, 172, 173, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 191, 193, 194, 195, 196, 199, 200, 201, 203, 205, 206, 207, 208, 212, 213, 214, 218, 219, 220, 224, 225, 226, 230, 231, 232, 236, 239, 241, 243, 244, 245, 246, 248, 251, 254, 255, 256, 257, 259, 264, 265, 266, 267, 269, 274, 275, 276, 277, 280, 291, 292, 295, 296, 299, 304, 305, 306, 307, 316, 317, 319, 322, 323, 334], "problem": [325, 326, 327], "public": [1, 22, 24, 31, 43, 51, 96, 103, 127, 136, 138, 144, 146, 160, 165, 170, 175, 181, 186, 192, 198, 204, 211, 217, 223, 229, 235, 238, 242, 253, 263, 273, 287, 294, 310], "rais": 203, "return": [3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 26, 27, 29, 30, 34, 35, 36, 37, 38, 41, 42, 46, 47, 50, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 99, 100, 106, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 140, 141, 142, 143, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 168, 169, 172, 173, 174, 177, 178, 180, 183, 184, 185, 189, 190, 194, 195, 197, 200, 201, 202, 203, 206, 207, 209, 210, 213, 214, 215, 216, 219, 220, 221, 222, 225, 226, 227, 228, 231, 232, 233, 234, 237, 240, 244, 245, 246, 247, 249, 250, 252, 255, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 270, 271, 272, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 293, 296, 297, 298, 300, 301, 302, 303, 304, 305, 308, 309, 317, 318, 320, 321, 322, 323, 324], "standard": 331, "steer": 333, "structur": 334, "test": 335, "user": 331, "v0": 0, "wake": 333, "welcom": 330}})