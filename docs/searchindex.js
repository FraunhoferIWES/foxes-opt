Search.setIndex({"alltitles": {"API": [[318, null]], "Acknowledgements": [[323, "acknowledgements"]], "Attributes": [[1, null], [24, null], [49, null], [99, null], [123, null], [134, null], [182, null], [236, null], [246, null], [256, null], [266, null], [287, null], [303, null]], "Citation": [[321, null]], "Contents": [[323, "contents"]], "Contributing": [[323, "contributing"]], "Examples": [[198, "examples"], [322, null]], "History": [[0, null]], "Installation": [[324, null]], "Installation as developer": [[324, "installation-as-developer"]], "Installation as standard user": [[324, "installation-as-standard-user"]], "Layout optimization": [[325, null]], "License": [[323, "license"]], "Notes": [[198, "notes"]], "Parameters": [[2, null], [4, null], [5, null], [6, null], [8, null], [9, null], [10, null], [11, null], [16, null], [17, null], [23, null], [25, null], [26, null], [27, null], [28, null], [32, null], [33, null], [34, null], [35, null], [43, null], [44, null], [51, null], [52, null], [53, null], [54, null], [56, null], [57, null], [58, null], [59, null], [60, null], [63, null], [64, null], [66, null], [67, null], [68, null], [71, null], [84, null], [85, null], [86, null], [88, null], [89, null], [90, null], [94, null], [95, null], [96, null], [97, null], [98, null], [100, null], [102, null], [103, null], [104, null], [105, null], [107, null], [109, null], [111, null], [113, null], [114, null], [115, null], [117, null], [120, null], [121, null], [122, null], [124, null], [125, null], [126, null], [127, null], [128, null], [132, null], [133, null], [135, null], [136, null], [137, null], [140, null], [141, null], [143, null], [144, null], [147, null], [152, null], [153, null], [157, null], [158, null], [159, null], [162, null], [163, null], [164, null], [167, null], [168, null], [169, null], [172, null], [173, null], [174, null], [175, null], [178, null], [179, null], [180, null], [183, null], [184, null], [185, null], [188, null], [189, null], [190, null], [191, null], [194, null], [195, null], [196, null], [198, null], [200, null], [201, null], [202, null], [203, null], [207, null], [208, null], [209, null], [213, null], [214, null], [215, null], [219, null], [220, null], [221, null], [225, null], [226, null], [227, null], [231, null], [234, null], [237, null], [238, null], [239, null], [240, null], [242, null], [247, null], [248, null], [249, null], [250, null], [252, null], [257, null], [258, null], [259, null], [260, null], [262, null], [267, null], [268, null], [269, null], [270, null], [273, null], [284, null], [285, null], [288, null], [289, null], [292, null], [297, null], [298, null], [299, null], [300, null], [309, null], [310, null], [312, null], [315, null], [316, null]], "Public members": [[1, "public-members"], [22, null], [24, "public-members"], [31, null], [42, null], [49, "public-members"], [93, null], [99, "public-members"], [123, "public-members"], [132, "public-members"], [134, "public-members"], [140, "public-members"], [142, null], [156, null], [161, null], [166, null], [171, null], [177, null], [182, "public-members"], [187, null], [193, null], [199, null], [206, null], [212, null], [218, null], [224, null], [230, null], [233, null], [236, "public-members"], [246, "public-members"], [256, "public-members"], [266, "public-members"], [280, null], [287, "public-members"], [303, "public-members"]], "Raises": [[198, "raises"]], "Returns": [[3, null], [4, "returns"], [5, "returns"], [6, "returns"], [7, null], [9, "returns"], [10, "returns"], [12, null], [13, null], [14, null], [15, null], [18, null], [19, null], [20, null], [21, null], [26, "returns"], [27, "returns"], [29, null], [30, null], [34, "returns"], [35, "returns"], [36, null], [37, null], [38, null], [40, null], [41, null], [45, null], [46, null], [48, null], [55, null], [56, "returns"], [57, "returns"], [58, "returns"], [59, "returns"], [60, "returns"], [61, null], [62, null], [63, "returns"], [64, "returns"], [65, null], [66, "returns"], [67, "returns"], [68, "returns"], [69, null], [70, null], [72, null], [73, null], [74, null], [75, null], [76, null], [77, null], [78, null], [79, null], [80, null], [81, null], [82, null], [83, null], [84, "returns"], [85, "returns"], [86, "returns"], [87, null], [88, "returns"], [91, null], [92, null], [95, "returns"], [96, "returns"], [102, "returns"], [106, null], [108, null], [109, "returns"], [110, null], [112, null], [113, "returns"], [115, "returns"], [116, null], [118, null], [119, null], [121, "returns"], [122, "returns"], [125, "returns"], [126, "returns"], [127, "returns"], [129, null], [130, null], [131, null], [136, "returns"], [137, "returns"], [138, null], [139, null], [145, null], [146, null], [148, null], [149, null], [150, null], [151, null], [152, "returns"], [153, "returns"], [154, null], [155, null], [158, "returns"], [159, "returns"], [160, null], [163, "returns"], [164, "returns"], [165, null], [168, "returns"], [169, "returns"], [170, null], [173, "returns"], [174, "returns"], [176, null], [179, "returns"], [180, "returns"], [181, null], [185, "returns"], [186, null], [189, "returns"], [190, "returns"], [192, null], [195, "returns"], [196, "returns"], [197, null], [198, "returns"], [201, "returns"], [202, "returns"], [204, null], [205, null], [208, "returns"], [209, "returns"], [210, null], [211, null], [214, "returns"], [215, "returns"], [216, null], [217, null], [220, "returns"], [221, "returns"], [222, null], [223, null], [226, "returns"], [227, "returns"], [228, null], [229, null], [232, null], [235, null], [238, "returns"], [239, "returns"], [240, "returns"], [241, null], [243, null], [244, null], [245, null], [248, "returns"], [249, "returns"], [250, "returns"], [251, null], [253, null], [254, null], [255, null], [258, "returns"], [259, "returns"], [260, "returns"], [261, null], [263, null], [264, null], [265, null], [268, "returns"], [269, "returns"], [270, "returns"], [271, null], [272, null], [274, null], [275, null], [276, null], [277, null], [278, null], [279, null], [281, null], [282, null], [283, null], [286, null], [289, "returns"], [290, null], [291, null], [293, null], [294, null], [295, null], [296, null], [297, "returns"], [298, "returns"], [301, null], [302, null], [310, "returns"], [311, null], [313, null], [314, null], [315, "returns"], [316, "returns"], [317, null]], "Testing": [[326, null]], "Welcome to foxes-opt": [[323, null]], "foxes_opt.constraints": [[318, "foxes-opt-constraints"]], "foxes_opt.core": [[318, "foxes-opt-core"]], "foxes_opt.objectives": [[318, "foxes-opt-objectives"]], "foxes_opt.problems": [[318, "foxes-opt-problems"], [319, null]], "foxes_opt.problems.layout": [[319, "foxes-opt-problems-layout"]], "foxes_opt.problems.layout.geom_layouts": [[319, "foxes-opt-problems-layout-geom-layouts"], [320, null]], "foxes_opt.problems.layout.geom_layouts.constraints": [[320, "foxes-opt-problems-layout-geom-layouts-constraints"]], "foxes_opt.problems.layout.geom_layouts.objectives": [[320, "foxes-opt-problems-layout-geom-layouts-objectives"]], "v0.1": [[0, "v0-1"]], "v0.1.3": [[0, "v0-1-3"]], "v0.1.4": [[0, "v0-1-4"]], "v0.1.5": [[0, "v0-1-5"]], "v0.1.6": [[0, "v0-1-6"]], "v0.1.7": [[0, "v0-1-7"]], "v0.2": [[0, "v0-2"]]}, "docurls": ["CHANGELOG.html", "_foxesopt/constraints/AreaGeometryConstraint.html", "_foxesopt/constraints/AreaGeometryConstraint.__init__.html", "_foxesopt/constraints/AreaGeometryConstraint.__str__.html", "_foxesopt/constraints/AreaGeometryConstraint.ana_deriv.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.calc_population.html", "_foxesopt/constraints/AreaGeometryConstraint.component_names.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_individual.html", "_foxesopt/constraints/AreaGeometryConstraint.finalize_population.html", "_foxesopt/constraints/AreaGeometryConstraint.initialize.html", "_foxesopt/constraints/AreaGeometryConstraint.initialized.html", "_foxesopt/constraints/AreaGeometryConstraint.n_components.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.n_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_float.html", "_foxesopt/constraints/AreaGeometryConstraint.rename_vars_int.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_float.html", "_foxesopt/constraints/AreaGeometryConstraint.var_names_int.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_float.html", "_foxesopt/constraints/AreaGeometryConstraint.vardeps_int.html", "_foxesopt/constraints/FarmBoundaryConstraint.html", "_foxesopt/constraints/FarmBoundaryConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.html", "_foxesopt/constraints/MinDistConstraint.__init__.html", "_foxesopt/constraints/MinDistConstraint.calc_individual.html", "_foxesopt/constraints/MinDistConstraint.calc_population.html", "_foxesopt/constraints/MinDistConstraint.initialize.html", "_foxesopt/constraints/MinDistConstraint.n_components.html", "_foxesopt/constraints/MinDistConstraint.vardeps_float.html", "_foxesopt/core/FarmConstraint.html", "_foxesopt/core/FarmConstraint.__init__.html", "_foxesopt/core/FarmConstraint.add_to_layout_figure.html", "_foxesopt/core/FarmConstraint.calc_individual.html", "_foxesopt/core/FarmConstraint.calc_population.html", "_foxesopt/core/FarmConstraint.farm.html", "_foxesopt/core/FarmConstraint.n_components.html", "_foxesopt/core/FarmConstraint.n_sel_turbines.html", "_foxesopt/core/FarmConstraint.print_models.html", "_foxesopt/core/FarmConstraint.sel_turbines.html", "_foxesopt/core/FarmConstraint.vardeps_float.html", "_foxesopt/core/FarmObjective.html", "_foxesopt/core/FarmObjective.__init__.html", "_foxesopt/core/FarmObjective.add_to_layout_figure.html", "_foxesopt/core/FarmObjective.farm.html", "_foxesopt/core/FarmObjective.n_sel_turbines.html", "_foxesopt/core/FarmObjective.print_models.html", "_foxesopt/core/FarmObjective.sel_turbines.html", "_foxesopt/core/FarmOptProblem.html", "_foxesopt/core/FarmOptProblem.INT_INF.html", "_foxesopt/core/FarmOptProblem.__init__.html", "_foxesopt/core/FarmOptProblem.add_constraint.html", "_foxesopt/core/FarmOptProblem.add_objective.html", "_foxesopt/core/FarmOptProblem.add_to_layout_figure.html", "_foxesopt/core/FarmOptProblem.all_turbines.html", "_foxesopt/core/FarmOptProblem.apply_individual.html", "_foxesopt/core/FarmOptProblem.apply_population.html", "_foxesopt/core/FarmOptProblem.calc_gradients.html", "_foxesopt/core/FarmOptProblem.check_constraints_individual.html", "_foxesopt/core/FarmOptProblem.check_constraints_population.html", "_foxesopt/core/FarmOptProblem.constraints_tol.html", "_foxesopt/core/FarmOptProblem.counter.html", "_foxesopt/core/FarmOptProblem.evaluate_individual.html", "_foxesopt/core/FarmOptProblem.evaluate_population.html", "_foxesopt/core/FarmOptProblem.farm.html", "_foxesopt/core/FarmOptProblem.finalize_individual.html", "_foxesopt/core/FarmOptProblem.finalize_population.html", "_foxesopt/core/FarmOptProblem.get_gradients.html", "_foxesopt/core/FarmOptProblem.initial_values_float.html", "_foxesopt/core/FarmOptProblem.initial_values_int.html", "_foxesopt/core/FarmOptProblem.initialize.html", "_foxesopt/core/FarmOptProblem.max_values_constraints.html", "_foxesopt/core/FarmOptProblem.max_values_float.html", "_foxesopt/core/FarmOptProblem.max_values_int.html", "_foxesopt/core/FarmOptProblem.maximize_objs.html", "_foxesopt/core/FarmOptProblem.min_values_constraints.html", "_foxesopt/core/FarmOptProblem.min_values_float.html", "_foxesopt/core/FarmOptProblem.min_values_int.html", "_foxesopt/core/FarmOptProblem.n_constraints.html", "_foxesopt/core/FarmOptProblem.n_objectives.html", "_foxesopt/core/FarmOptProblem.n_sel_turbines.html", "_foxesopt/core/FarmOptProblem.n_vars_float.html", "_foxesopt/core/FarmOptProblem.n_vars_int.html", "_foxesopt/core/FarmOptProblem.parse_tvar.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_individual.html", "_foxesopt/core/FarmOptProblem.prob_res_einsum_population.html", "_foxesopt/core/FarmOptProblem.sel_turbines.html", "_foxesopt/core/FarmOptProblem.tvar.html", "_foxesopt/core/FarmOptProblem.update_problem_individual.html", "_foxesopt/core/FarmOptProblem.update_problem_population.html", "_foxesopt/core/FarmOptProblem.var_names_float.html", "_foxesopt/core/FarmOptProblem.var_names_int.html", "_foxesopt/core/FarmVarsProblem.html", "_foxesopt/core/FarmVarsProblem.initialize.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_individual.html", "_foxesopt/core/FarmVarsProblem.opt2farm_vars_population.html", "_foxesopt/core/FarmVarsProblem.update_problem_individual.html", "_foxesopt/core/FarmVarsProblem.update_problem_population.html", "_foxesopt/core/PopStates.html", "_foxesopt/core/PopStates.__init__.html", "_foxesopt/core/PopStates.__repr__.html", "_foxesopt/core/PopStates.calculate.html", "_foxesopt/core/PopStates.ensure_variables.html", "_foxesopt/core/PopStates.finalize.html", "_foxesopt/core/PopStates.get_data.html", "_foxesopt/core/PopStates.index.html", "_foxesopt/core/PopStates.initialize.html", "_foxesopt/core/PopStates.initialized.html", "_foxesopt/core/PopStates.load_data.html", "_foxesopt/core/PopStates.model_id.html", "_foxesopt/core/PopStates.new.html", "_foxesopt/core/PopStates.output_coords.html", "_foxesopt/core/PopStates.output_point_vars.html", "_foxesopt/core/PopStates.reset.html", "_foxesopt/core/PopStates.run_calculation.html", "_foxesopt/core/PopStates.running.html", "_foxesopt/core/PopStates.set_running.html", "_foxesopt/core/PopStates.size.html", "_foxesopt/core/PopStates.sub_models.html", "_foxesopt/core/PopStates.unset_running.html", "_foxesopt/core/PopStates.var.html", "_foxesopt/core/PopStates.weights.html", "_foxesopt/objectives/FarmVarObjective.html", "_foxesopt/objectives/FarmVarObjective.__init__.html", "_foxesopt/objectives/FarmVarObjective.calc_individual.html", "_foxesopt/objectives/FarmVarObjective.calc_population.html", "_foxesopt/objectives/FarmVarObjective.finalize_individual.html", "_foxesopt/objectives/FarmVarObjective.initialize.html", "_foxesopt/objectives/FarmVarObjective.maximize.html", "_foxesopt/objectives/FarmVarObjective.n_components.html", "_foxesopt/objectives/FarmVarObjective.vardeps_float.html", "_foxesopt/objectives/MaxFarmPower.html", "_foxesopt/objectives/MaxFarmPower.__init__.html", "_foxesopt/objectives/MaxNTurbines.html", "_foxesopt/objectives/MaxNTurbines.__init__.html", "_foxesopt/objectives/MaxNTurbines.calc_individual.html", "_foxesopt/objectives/MaxNTurbines.calc_population.html", "_foxesopt/objectives/MaxNTurbines.maximize.html", "_foxesopt/objectives/MaxNTurbines.n_components.html", "_foxesopt/objectives/MinimalMaxTI.html", "_foxesopt/objectives/MinimalMaxTI.__init__.html", "_foxesopt/problems/OptFarmVars.html", "_foxesopt/problems/OptFarmVars.__init__.html", "_foxesopt/problems/OptFarmVars.add_var.html", "_foxesopt/problems/OptFarmVars.initial_values_float.html", "_foxesopt/problems/OptFarmVars.initial_values_int.html", "_foxesopt/problems/OptFarmVars.initialize.html", "_foxesopt/problems/OptFarmVars.max_values_float.html", "_foxesopt/problems/OptFarmVars.max_values_int.html", "_foxesopt/problems/OptFarmVars.min_values_float.html", "_foxesopt/problems/OptFarmVars.min_values_int.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_individual.html", "_foxesopt/problems/OptFarmVars.opt2farm_vars_population.html", "_foxesopt/problems/OptFarmVars.var_names_float.html", "_foxesopt/problems/OptFarmVars.var_names_int.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsBoundary.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsCMinN.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.check_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsConstraint.get_bounds.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.initialize.html", "_foxesopt/problems/layout/geom_layouts/constraintsMinDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.__init__.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.calc_population.html", "_foxesopt/problems/layout/geom_layouts/constraintsValid.n_components.html", "_foxesopt/problems/layout/geom_layouts/constraintscdist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.initialize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxDensity.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMaxGridSpacing.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesMeMiMaDist.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOFixN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_individual.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.calc_population.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMaxN.n_components.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesOMinN.maximize.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.__init__.html", "_foxesopt/problems/layout/geom_layouts/objectivesObjective.maximize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayout.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomLayoutGridded.var_names_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrid.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.__init__.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_individual.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.apply_population.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.get_fig.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initial_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.initialize.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.max_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.min_values_int.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_float.html", "_foxesopt/problems/layout/geom_layoutsGeomRegGrids.var_names_int.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutFarmLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initial_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.max_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.min_values_int.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_individual.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.update_problem_population.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_float.html", "_foxesopt/problems/layoutRegGridsLayoutOptProblem.var_names_int.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.ANGLE.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.OFFSET_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_X.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.SPACING_Y.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.__init__.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.finalize_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initial_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.initialize.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.max_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.min_values_float.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_individual.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.opt2farm_vars_population.html", "_foxesopt/problems/layoutRegularLayoutOptProblem.var_names_float.html", "api.html", "api_problems.html", "api_problems_geom.html", "citation.html", "examples.html", "index.html", "installation.html", "notebooks/layout_opt.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"foxes_opt.constraints": [[1, 0, 1, "", "AreaGeometryConstraint", "Constrains turbine positions to the inside of a given area geometry."], [22, 0, 1, "", "FarmBoundaryConstraint", "Constrains turbine positions to the inside of the wind farm boundary"], [24, 0, 1, "", "MinDistConstraint", "Turbines must keep at least a minimal spatial distance."]], "foxes_opt.constraints.AreaGeometryConstraint": [[2, 1, 1, "", "__init__", "Constructor."], [3, 1, 1, "", "__str__", "Get info string"], [4, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [5, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [6, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [7, 3, 1, "", "component_names", "The names of the components"], [8, 1, 1, "", "finalize", "Finalize the object."], [9, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [10, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [11, 1, 1, "", "initialize", "Initialize the object."], [12, 3, 1, "", "initialized", "Flag for finished initialization"], [13, 1, 1, "", "n_components", "Returns the number of components of the function."], [14, 3, 1, "", "n_vars_float", "The number of float variables"], [15, 3, 1, "", "n_vars_int", "The number of int variables"], [16, 1, 1, "", "rename_vars_float", "Rename float variables."], [17, 1, 1, "", "rename_vars_int", "Rename integer variables."], [18, 3, 1, "", "var_names_float", "The names of the float variables"], [19, 3, 1, "", "var_names_int", "The names of the integer variables"], [20, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [21, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "foxes_opt.constraints.AreaGeometryConstraint.__init__": [[2, 2, 2, "", "D", "Constructor."], [2, 2, 2, "", "disc_inside", "Constructor."], [2, 2, 2, "", "geometry", "Constructor."], [2, 2, 2, "", "kwargs", "Constructor."], [2, 2, 2, "", "name", "Constructor."], [2, 2, 2, "", "problem", "Constructor."], [2, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.constraints.AreaGeometryConstraint.ana_deriv": [[4, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [4, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "foxes_opt.constraints.AreaGeometryConstraint.calc_individual": [[5, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [5, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.constraints.AreaGeometryConstraint.calc_population": [[6, 2, 2, "", "components", "Calculate values for all individuals of a population."], [6, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [6, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [6, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize": [[8, 2, 2, "", "verbosity", "Finalize the object."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize_individual": [[9, 2, 2, "", "problem_results", "Finalization, given the champion data."], [9, 2, 2, "", "vars_float", "Finalization, given the champion data."], [9, 2, 2, "", "vars_int", "Finalization, given the champion data."], [9, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.constraints.AreaGeometryConstraint.finalize_population": [[10, 2, 2, "", "problem_results", "Finalization, given the final population data."], [10, 2, 2, "", "vars_float", "Finalization, given the final population data."], [10, 2, 2, "", "vars_int", "Finalization, given the final population data."], [10, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "foxes_opt.constraints.AreaGeometryConstraint.initialize": [[11, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_float": [[16, 2, 2, "", "varmap", "Rename float variables."]], "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_int": [[17, 2, 2, "", "varmap", "Rename integer variables."]], "foxes_opt.constraints.FarmBoundaryConstraint": [[23, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.constraints.FarmBoundaryConstraint.__init__": [[23, 2, 2, "", "kwargs", "Constructor."], [23, 2, 2, "", "name", "Constructor."], [23, 2, 2, "", "problem", "Constructor."]], "foxes_opt.constraints.MinDistConstraint": [[25, 1, 1, "", "__init__", "Constructor."], [26, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [27, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [28, 1, 1, "", "initialize", "Initialize the constaint."], [29, 1, 1, "", "n_components", "Returns the number of components of the function."], [30, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.constraints.MinDistConstraint.__init__": [[25, 2, 2, "", "kwargs", "Constructor."], [25, 2, 2, "", "min_dist", "Constructor."], [25, 2, 2, "", "min_dist_unit", "Constructor."], [25, 2, 2, "", "name", "Constructor."], [25, 2, 2, "", "problem", "Constructor."], [25, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.constraints.MinDistConstraint.calc_individual": [[26, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [26, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.constraints.MinDistConstraint.calc_population": [[27, 2, 2, "", "components", "Calculate values for all individuals of a population."], [27, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [27, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [27, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.constraints.MinDistConstraint.initialize": [[28, 2, 2, "", "verbosity", "Initialize the constaint."]], "foxes_opt.core": [[31, 0, 1, "", "FarmConstraint", "Abstract base class for foxes wind farm optimization constraints."], [42, 0, 1, "", "FarmObjective", "Abstract base class for foxes wind farm objective functions."], [49, 0, 1, "", "FarmOptProblem", "Abstract base class of wind farm optimization problems."], [93, 0, 1, "", "FarmVarsProblem", "Abstract base class for models that optimize farm variables."], [99, 0, 1, "", "PopStates", "Helper class for vectorized opt population calculation, via artificial states of length n_pop times n_states."]], "foxes_opt.core.FarmConstraint": [[32, 1, 1, "", "__init__", "Constructor."], [33, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [34, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [35, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [36, 3, 1, "", "farm", "The wind farm"], [37, 1, 1, "", "n_components", "Returns the number of components of the function."], [38, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [39, 1, 1, "", "print_models", "Prints all model names."], [40, 3, 1, "", "sel_turbines", "The list of selected turbines"], [41, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.core.FarmConstraint.__init__": [[32, 2, 2, "", "kwargs", "Constructor."], [32, 2, 2, "", "name", "Constructor."], [32, 2, 2, "", "problem", "Constructor."], [32, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.core.FarmConstraint.add_to_layout_figure": [[33, 2, 2, "", "ax", "Add to a layout figure"], [33, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmConstraint.calc_individual": [[34, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [34, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.core.FarmConstraint.calc_population": [[35, 2, 2, "", "components", "Calculate values for all individuals of a population."], [35, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [35, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [35, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.core.FarmObjective": [[43, 1, 1, "", "__init__", "Constraints."], [44, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [45, 3, 1, "", "farm", "The wind farm"], [46, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [47, 1, 1, "", "print_models", "Prints all model names."], [48, 3, 1, "", "sel_turbines", "The list of selected turbines"]], "foxes_opt.core.FarmObjective.__init__": [[43, 2, 2, "", "kwargs", "Constraints."], [43, 2, 2, "", "name", "Constraints."], [43, 2, 2, "", "problem", "Constraints."], [43, 2, 2, "", "sel_turbines", "Constraints."]], "foxes_opt.core.FarmObjective.add_to_layout_figure": [[44, 2, 2, "", "ax", "Add to a layout figure"], [44, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmOptProblem": [[50, 4, 1, "", "INT_INF", ""], [51, 1, 1, "", "__init__", "Constructor."], [52, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [53, 1, 1, "", "add_objective", "Add an objective to the problem."], [54, 1, 1, "", "add_to_layout_figure", "Add to a layout figure"], [55, 3, 1, "", "all_turbines", "Flag for all turbines optimization"], [56, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [57, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [58, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [59, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [60, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [61, 3, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [62, 3, 1, "", "counter", "The current value of the application counter"], [63, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [64, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [65, 3, 1, "", "farm", "The wind farm"], [66, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [67, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [68, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [69, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [70, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [71, 1, 1, "", "initialize", "Initialize the object."], [72, 3, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [73, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [74, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [75, 3, 1, "", "maximize_objs", "Flags for objective maximization"], [76, 3, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [77, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [78, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [79, 3, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [80, 3, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [81, 3, 1, "", "n_sel_turbines", "The numer of selected turbines"], [82, 3, 1, "", "n_vars_float", "The number of float variables"], [83, 3, 1, "", "n_vars_int", "The number of int variables"], [84, 1, 1, "", "parse_tvar", "Parse foxes variable name and turbine index from turbine variable"], [85, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [86, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [87, 3, 1, "", "sel_turbines", "The selected turbines"], [88, 1, 1, "", "tvar", "Gets turbine variable name"], [89, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [90, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [91, 1, 1, "", "var_names_float", "The names of float variables."], [92, 1, 1, "", "var_names_int", "The names of integer variables."]], "foxes_opt.core.FarmOptProblem.__init__": [[51, 2, 2, "", "algo", "Constructor."], [51, 2, 2, "", "calc_farm_args", "Constructor."], [51, 2, 2, "", "kwargs", "Constructor."], [51, 2, 2, "", "name", "Constructor."], [51, 2, 2, "", "points", "Constructor."], [51, 2, 2, "", "sel_turbines", "Constructor."]], "foxes_opt.core.FarmOptProblem.add_constraint": [[52, 2, 2, "", "constraint", "Add a constraint to the problem."], [52, 2, 2, "", "varmap_float", "Add a constraint to the problem."], [52, 2, 2, "", "varmap_int", "Add a constraint to the problem."], [52, 2, 2, "", "verbosity", "Add a constraint to the problem."]], "foxes_opt.core.FarmOptProblem.add_objective": [[53, 2, 2, "", "objective", "Add an objective to the problem."], [53, 2, 2, "", "varmap_float", "Add an objective to the problem."], [53, 2, 2, "", "varmap_int", "Add an objective to the problem."], [53, 2, 2, "", "verbosity", "Add an objective to the problem."]], "foxes_opt.core.FarmOptProblem.add_to_layout_figure": [[54, 2, 2, "", "ax", "Add to a layout figure"], [54, 2, 2, "", "kwargs", "Add to a layout figure"]], "foxes_opt.core.FarmOptProblem.apply_individual": [[56, 2, 2, "", "vars_float", "Apply new variables to the problem."], [56, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.core.FarmOptProblem.apply_population": [[57, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [57, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.core.FarmOptProblem.calc_gradients": [[58, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [58, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "foxes_opt.core.FarmOptProblem.check_constraints_individual": [[59, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [59, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "foxes_opt.core.FarmOptProblem.check_constraints_population": [[60, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [60, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "foxes_opt.core.FarmOptProblem.evaluate_individual": [[63, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [63, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [63, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "foxes_opt.core.FarmOptProblem.evaluate_population": [[64, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [64, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [64, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "foxes_opt.core.FarmOptProblem.finalize_individual": [[66, 2, 2, "", "vars_float", "Finalization, given the champion data."], [66, 2, 2, "", "vars_int", "Finalization, given the champion data."], [66, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.core.FarmOptProblem.finalize_population": [[67, 2, 2, "", "vars_float", "Finalization, given the final population data."], [67, 2, 2, "", "vars_int", "Finalization, given the final population data."], [67, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "foxes_opt.core.FarmOptProblem.get_gradients": [[68, 2, 2, "", "components", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "func", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "pop", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "vars", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "vars_float", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "vars_int", "Obtain gradients of a function that is linked to the problem."], [68, 2, 2, "", "verbosity", "Obtain gradients of a function that is linked to the problem."]], "foxes_opt.core.FarmOptProblem.initialize": [[71, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.core.FarmOptProblem.parse_tvar": [[84, 2, 2, "", "tvr", "Parse foxes variable name and turbine index from turbine variable"]], "foxes_opt.core.FarmOptProblem.prob_res_einsum_individual": [[85, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [85, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "foxes_opt.core.FarmOptProblem.prob_res_einsum_population": [[86, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [86, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "foxes_opt.core.FarmOptProblem.tvar": [[88, 2, 2, "", "turbine_i", "Gets turbine variable name"], [88, 2, 2, "", "var", "Gets turbine variable name"]], "foxes_opt.core.FarmOptProblem.update_problem_individual": [[89, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [89, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmOptProblem.update_problem_population": [[90, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [90, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem": [[94, 1, 1, "", "initialize", "Initialize the object."], [95, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [96, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [97, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [98, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem.initialize": [[94, 2, 2, "", "kwargs", "Initialize the object."], [94, 2, 2, "", "post_rotor_vars", "Initialize the object."], [94, 2, 2, "", "pre_rotor_vars", "Initialize the object."], [94, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.core.FarmVarsProblem.opt2farm_vars_individual": [[95, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [95, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.core.FarmVarsProblem.opt2farm_vars_population": [[96, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [96, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [96, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.core.FarmVarsProblem.update_problem_individual": [[97, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [97, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.FarmVarsProblem.update_problem_population": [[98, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [98, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.core.PopStates": [[100, 1, 1, "", "__init__", "Constructor."], [101, 1, 1, "", "__repr__", "Return repr(self)."], [102, 1, 1, "", "calculate", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [103, 1, 1, "", "ensure_variables", "Add variables to tdata, initialized with NaN"], [104, 1, 1, "", "finalize", "Finalizes the model."], [105, 1, 1, "", "get_data", "Getter for a data entry in the model object or provided data sources"], [106, 1, 1, "", "index", "The index list"], [107, 1, 1, "", "initialize", "Initializes the model."], [108, 3, 1, "", "initialized", "Initialization flag."], [109, 1, 1, "", "load_data", "Load and/or create all model data that is subject to chunking."], [110, 3, 1, "", "model_id", "Unique id based on the model type."], [111, 1, 1, "", "new", "Run-time states factory."], [112, 1, 1, "", "output_coords", "Gets the coordinates of all output arrays"], [113, 1, 1, "", "output_point_vars", "The variables which are being modified by the model."], [114, 1, 1, "", "reset", "Reset the states, optionally select states"], [115, 1, 1, "", "run_calculation", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [116, 3, 1, "", "running", "Flag for currently running models"], [117, 1, 1, "", "set_running", "Sets this model status to running, and moves all large data to stash."], [118, 1, 1, "", "size", "The total number of states."], [119, 1, 1, "", "sub_models", "List of all sub-models"], [120, 1, 1, "", "unset_running", "Sets this model status to not running, recovering large data from stash"], [121, 1, 1, "", "var", "Creates a model specific variable name."], [122, 1, 1, "", "weights", "The statistical weights of all states."]], "foxes_opt.core.PopStates.__init__": [[100, 2, 2, "", "n_pop", "Constructor."], [100, 2, 2, "", "states", "Constructor."]], "foxes_opt.core.PopStates.calculate": [[102, 2, 2, "", "algo", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [102, 2, 2, "", "fdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [102, 2, 2, "", "mdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."], [102, 2, 2, "", "pdata", "Possible incomplete section title. Treating the overline as ordinary text because it's so short."]], "foxes_opt.core.PopStates.ensure_variables": [[103, 2, 2, "", "algo", "Add variables to tdata, initialized with NaN"], [103, 2, 2, "", "fdata", "Add variables to tdata, initialized with NaN"], [103, 2, 2, "", "mdata", "Add variables to tdata, initialized with NaN"], [103, 2, 2, "", "tdata", "Add variables to tdata, initialized with NaN"]], "foxes_opt.core.PopStates.finalize": [[104, 2, 2, "", "algo", "Finalizes the model."], [104, 2, 2, "", "verbosity", "Finalizes the model."]], "foxes_opt.core.PopStates.get_data": [[105, 2, 2, "", "accept_nan", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "accept_none", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "algo", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "downwind_index", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "fdata", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "lookup", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "mdata", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "target", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "tdata", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "upcast", "Getter for a data entry in the model object or provided data sources"], [105, 2, 2, "", "variable", "Getter for a data entry in the model object or provided data sources"]], "foxes_opt.core.PopStates.initialize": [[107, 2, 2, "", "algo", "Initializes the model."], [107, 2, 2, "", "verbosity", "Initializes the model."]], "foxes_opt.core.PopStates.load_data": [[109, 2, 2, "", "algo", "Load and/or create all model data that is subject to chunking."], [109, 2, 2, "", "verbosity", "Load and/or create all model data that is subject to chunking."]], "foxes_opt.core.PopStates.new": [[111, 2, 2, "", "args", "Run-time states factory."], [111, 2, 2, "", "kwargs", "Run-time states factory."], [111, 2, 2, "", "states_type", "Run-time states factory."]], "foxes_opt.core.PopStates.output_point_vars": [[113, 2, 2, "", "algo", "The variables which are being modified by the model."]], "foxes_opt.core.PopStates.reset": [[114, 2, 2, "", "algo", "Reset the states, optionally select states"], [114, 2, 2, "", "states_loc", "Reset the states, optionally select states"], [114, 2, 2, "", "states_sel", "Reset the states, optionally select states"], [114, 2, 2, "", "verbosity", "Reset the states, optionally select states"]], "foxes_opt.core.PopStates.run_calculation": [[115, 2, 2, "", "algo", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [115, 2, 2, "", "calc_pars", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [115, 2, 2, "", "data", "Starts the model calculation in parallel, via xarray's apply_ufunc."], [115, 2, 2, "", "out_vars", "Starts the model calculation in parallel, via xarray's apply_ufunc."]], "foxes_opt.core.PopStates.set_running": [[117, 2, 2, "", "algo", "Sets this model status to running, and moves all large data to stash."], [117, 2, 2, "", "data_stash", "Sets this model status to running, and moves all large data to stash."], [117, 2, 2, "", "isel", "Sets this model status to running, and moves all large data to stash."], [117, 2, 2, "", "sel", "Sets this model status to running, and moves all large data to stash."], [117, 2, 2, "", "verbosity", "Sets this model status to running, and moves all large data to stash."]], "foxes_opt.core.PopStates.unset_running": [[120, 2, 2, "", "algo", "Sets this model status to not running, recovering large data from stash"], [120, 2, 2, "", "data_stash", "Sets this model status to not running, recovering large data from stash"], [120, 2, 2, "", "isel", "Sets this model status to not running, recovering large data from stash"], [120, 2, 2, "", "sel", "Sets this model status to not running, recovering large data from stash"], [120, 2, 2, "", "verbosity", "Sets this model status to not running, recovering large data from stash"]], "foxes_opt.core.PopStates.var": [[121, 2, 2, "", "v", "Creates a model specific variable name."]], "foxes_opt.core.PopStates.weights": [[122, 2, 2, "", "algo", "The statistical weights of all states."]], "foxes_opt.objectives": [[123, 0, 1, "", "FarmVarObjective", "Objectives based on farm variables."], [132, 0, 1, "", "MaxFarmPower", "Maximize the mean wind farm power"], [134, 0, 1, "", "MaxNTurbines", "Maximizes the number of turrbines."], [140, 0, 1, "", "MinimalMaxTI", "Minimize the maximal turbine TI"]], "foxes_opt.objectives.FarmVarObjective": [[124, 1, 1, "", "__init__", "Constructor."], [125, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [126, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [127, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [128, 1, 1, "", "initialize", "Initialize the object."], [129, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [130, 1, 1, "", "n_components", "Returns the number of components of the function."], [131, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"]], "foxes_opt.objectives.FarmVarObjective.__init__": [[124, 2, 2, "", "contract_states", "Constructor."], [124, 2, 2, "", "contract_turbines", "Constructor."], [124, 2, 2, "", "deps", "Constructor."], [124, 2, 2, "", "kwargs", "Constructor."], [124, 2, 2, "", "minimize", "Constructor."], [124, 2, 2, "", "name", "Constructor."], [124, 2, 2, "", "problem", "Constructor."], [124, 2, 2, "", "scale", "Constructor."], [124, 2, 2, "", "variable", "Constructor."]], "foxes_opt.objectives.FarmVarObjective.calc_individual": [[125, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [125, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [125, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [125, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.objectives.FarmVarObjective.calc_population": [[126, 2, 2, "", "components", "Calculate values for all individuals of a population."], [126, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [126, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [126, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.objectives.FarmVarObjective.finalize_individual": [[127, 2, 2, "", "problem_results", "Finalization, given the champion data."], [127, 2, 2, "", "vars_float", "Finalization, given the champion data."], [127, 2, 2, "", "vars_int", "Finalization, given the champion data."], [127, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.objectives.FarmVarObjective.initialize": [[128, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.objectives.MaxFarmPower": [[133, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.objectives.MaxFarmPower.__init__": [[133, 2, 2, "", "kwargs", "Constructor."], [133, 2, 2, "", "name", "Constructor."], [133, 2, 2, "", "problem", "Constructor."]], "foxes_opt.objectives.MaxNTurbines": [[135, 1, 1, "", "__init__", "Constructor."], [136, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [137, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [138, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [139, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.objectives.MaxNTurbines.__init__": [[135, 2, 2, "", "check_valid", "Constructor."], [135, 2, 2, "", "kwargs", "Constructor."], [135, 2, 2, "", "name", "Constructor."], [135, 2, 2, "", "problem", "Constructor."]], "foxes_opt.objectives.MaxNTurbines.calc_individual": [[136, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [136, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [136, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [136, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.objectives.MaxNTurbines.calc_population": [[137, 2, 2, "", "components", "Calculate values for all individuals of a population."], [137, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [137, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [137, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.objectives.MinimalMaxTI": [[141, 1, 1, "", "__init__", "Constructor."]], "foxes_opt.objectives.MinimalMaxTI.__init__": [[141, 2, 2, "", "kwargs", "Constructor."], [141, 2, 2, "", "name", "Constructor."], [141, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems": [[142, 0, 1, "", "OptFarmVars", "Optimize a selection of farm variables."]], "foxes_opt.problems.OptFarmVars": [[143, 1, 1, "", "__init__", "Constructor."], [144, 1, 1, "", "add_var", "Add a variable."], [145, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [146, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [147, 1, 1, "", "initialize", "Initialize the object."], [148, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [149, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [150, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [151, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [152, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [153, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [154, 1, 1, "", "var_names_float", "The names of float variables."], [155, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.OptFarmVars.__init__": [[143, 2, 2, "", "args", "Constructor."], [143, 2, 2, "", "kwargs", "Constructor."]], "foxes_opt.problems.OptFarmVars.add_var": [[144, 2, 2, "", "init", "Add a variable."], [144, 2, 2, "", "level", "Add a variable."], [144, 2, 2, "", "max", "Add a variable."], [144, 2, 2, "", "min", "Add a variable."], [144, 2, 2, "", "model_key", "Add a variable."], [144, 2, 2, "", "name", "Add a variable."], [144, 2, 2, "", "pre_rotor", "Add a variable."], [144, 2, 2, "", "sel", "Add a variable."], [144, 2, 2, "", "typ", "Add a variable."]], "foxes_opt.problems.OptFarmVars.initialize": [[147, 2, 2, "", "kwargs", "Initialize the object."], [147, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.OptFarmVars.opt2farm_vars_individual": [[152, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [152, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.OptFarmVars.opt2farm_vars_population": [[153, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [153, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [153, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout": [[280, 0, 1, "", "FarmLayoutOptProblem", "The turbine positioning optimization problem"], [287, 0, 1, "", "RegGridsLayoutOptProblem", "Places turbines on several regular grids and optimizes their parameters."], [303, 0, 1, "", "RegularLayoutOptProblem", "Places turbines on a regular grid and optimizes its parameters."]], "foxes_opt.problems.layout.FarmLayoutOptProblem": [[281, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [282, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [283, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [284, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [285, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [286, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_individual": [[284, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [284, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_population": [[285, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [285, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem": [[288, 1, 1, "", "__init__", "Constraints."], [289, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [290, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [291, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [292, 1, 1, "", "initialize", "Initialize the object."], [293, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [294, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [295, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [296, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [297, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [298, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [299, 1, 1, "", "update_problem_individual", "Update the algo and other data using the latest optimization variables."], [300, 1, 1, "", "update_problem_population", "Update the algo and other data using the latest optimization variables."], [301, 1, 1, "", "var_names_float", "The names of float variables."], [302, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.__init__": [[288, 2, 2, "", "algo", "Constraints."], [288, 2, 2, "", "kwargs", "Constraints."], [288, 2, 2, "", "max_dist", "Constraints."], [288, 2, 2, "", "min_dist", "Constraints."], [288, 2, 2, "", "n_grids", "Constraints."], [288, 2, 2, "", "n_row_max", "Constraints."], [288, 2, 2, "", "name", "Constraints."], [288, 2, 2, "", "runner", "Constraints."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual": [[289, 2, 2, "", "vars_float", "Finalization, given the champion data."], [289, 2, 2, "", "vars_int", "Finalization, given the champion data."], [289, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initialize": [[292, 2, 2, "", "kwargs", "Initialize the object."], [292, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual": [[297, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [297, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population": [[298, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [298, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [298, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual": [[299, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [299, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population": [[300, 2, 2, "", "vars_float", "Update the algo and other data using the latest optimization variables."], [300, 2, 2, "", "vars_int", "Update the algo and other data using the latest optimization variables."]], "foxes_opt.problems.layout.RegularLayoutOptProblem": [[304, 4, 1, "", "ANGLE", ""], [305, 4, 1, "", "OFFSET_X", ""], [306, 4, 1, "", "OFFSET_Y", ""], [307, 4, 1, "", "SPACING_X", ""], [308, 4, 1, "", "SPACING_Y", ""], [309, 1, 1, "", "__init__", "Constructor."], [310, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [311, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [312, 1, 1, "", "initialize", "Initialize the object."], [313, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [314, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [315, 1, 1, "", "opt2farm_vars_individual", "Translates optimization variables to farm variables"], [316, 1, 1, "", "opt2farm_vars_population", "Translates optimization variables to farm variables"], [317, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.__init__": [[309, 2, 2, "", "algo", "Constructor."], [309, 2, 2, "", "kwargs", "Constructor."], [309, 2, 2, "", "min_spacing", "Constructor."], [309, 2, 2, "", "name", "Constructor."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.finalize_individual": [[310, 2, 2, "", "vars_float", "Finalization, given the champion data."], [310, 2, 2, "", "vars_int", "Finalization, given the champion data."], [310, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.initialize": [[312, 2, 2, "", "kwargs", "Initialize the object."], [312, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual": [[315, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [315, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population": [[316, 2, 2, "", "n_states", "Translates optimization variables to farm variables"], [316, 2, 2, "", "vars_float", "Translates optimization variables to farm variables"], [316, 2, 2, "", "vars_int", "Translates optimization variables to farm variables"]], "foxes_opt.problems.layout.geom_layouts": [[236, 0, 1, "", "GeomLayout", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes)."], [246, 0, 1, "", "GeomLayoutGridded", "A layout within a boundary geometry, purely defined by geometrical optimization (no wakes), on a fixes background point grid."], [256, 0, 1, "", "GeomRegGrid", "A regular grid within a boundary geometry."], [266, 0, 1, "", "GeomRegGrids", "A regular grid within a boundary geometry."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout": [[237, 1, 1, "", "__init__", "Constructor."], [238, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [239, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [240, 1, 1, "", "get_fig", "Return plotly figure axis."], [241, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [242, 1, 1, "", "initialize", "Initialize the object."], [243, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [244, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [245, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.__init__": [[237, 2, 2, "", "D", "Constructor."], [237, 2, 2, "", "boundary", "Constructor."], [237, 2, 2, "", "calc_valid", "Constructor."], [237, 2, 2, "", "min_dist", "Constructor."], [237, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_individual": [[238, 2, 2, "", "vars_float", "Apply new variables to the problem."], [238, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_population": [[239, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [239, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.get_fig": [[240, 2, 2, "", "ax", "Return plotly figure axis."], [240, 2, 2, "", "bargs", "Return plotly figure axis."], [240, 2, 2, "", "title", "Return plotly figure axis."], [240, 2, 2, "", "true_circle", "Return plotly figure axis."], [240, 2, 2, "", "valid", "Return plotly figure axis."], [240, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomLayout.initialize": [[242, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded": [[247, 1, 1, "", "__init__", "Constructor."], [248, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [249, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [250, 1, 1, "", "get_fig", "Return plotly figure axis."], [251, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [252, 1, 1, "", "initialize", "Initialize the object."], [253, 1, 1, "", "max_values_int", "The maximal values of the int variables."], [254, 1, 1, "", "min_values_int", "The minimal values of the int variables."], [255, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__": [[247, 2, 2, "", "D", "Constructor."], [247, 2, 2, "", "boundary", "Constructor."], [247, 2, 2, "", "grid_spacing", "Constructor."], [247, 2, 2, "", "min_dist", "Constructor."], [247, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual": [[248, 2, 2, "", "vars_float", "Apply new variables to the problem."], [248, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population": [[249, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [249, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig": [[250, 2, 2, "", "ax", "Return plotly figure axis."], [250, 2, 2, "", "bargs", "Return plotly figure axis."], [250, 2, 2, "", "title", "Return plotly figure axis."], [250, 2, 2, "", "true_circle", "Return plotly figure axis."], [250, 2, 2, "", "valid", "Return plotly figure axis."], [250, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize": [[252, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid": [[257, 1, 1, "", "__init__", "Constructor."], [258, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [259, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [260, 1, 1, "", "get_fig", "Return plotly figure axis."], [261, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [262, 1, 1, "", "initialize", "Initialize the object."], [263, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [264, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [265, 1, 1, "", "var_names_float", "The names of float variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.__init__": [[257, 2, 2, "", "D", "Constructor."], [257, 2, 2, "", "boundary", "Constructor."], [257, 2, 2, "", "max_dist", "Constructor."], [257, 2, 2, "", "min_dist", "Constructor."], [257, 2, 2, "", "n_turbines", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual": [[258, 2, 2, "", "vars_float", "Apply new variables to the problem."], [258, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_population": [[259, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [259, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.get_fig": [[260, 2, 2, "", "ax", "Return plotly figure axis."], [260, 2, 2, "", "bargs", "Return plotly figure axis."], [260, 2, 2, "", "title", "Return plotly figure axis."], [260, 2, 2, "", "true_circle", "Return plotly figure axis."], [260, 2, 2, "", "valid", "Return plotly figure axis."], [260, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initialize": [[262, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids": [[267, 1, 1, "", "__init__", "Constructor."], [268, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [269, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [270, 1, 1, "", "get_fig", "Return plotly figure axis."], [271, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [272, 1, 1, "", "initial_values_int", "The initial values of the int variables."], [273, 1, 1, "", "initialize", "Initialize the object."], [274, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [275, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [276, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [277, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [278, 1, 1, "", "var_names_float", "The names of float variables."], [279, 1, 1, "", "var_names_int", "The names of int variables."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.__init__": [[267, 2, 2, "", "D", "Constructor."], [267, 2, 2, "", "boundary", "Constructor."], [267, 2, 2, "", "max_dist", "Constructor."], [267, 2, 2, "", "min_dist", "Constructor."], [267, 2, 2, "", "n_grids", "Constructor."], [267, 2, 2, "", "n_max", "Constructor."], [267, 2, 2, "", "n_row_max", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual": [[268, 2, 2, "", "vars_float", "Apply new variables to the problem."], [268, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_population": [[269, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [269, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.get_fig": [[270, 2, 2, "", "ax", "Return plotly figure axis."], [270, 2, 2, "", "bargs", "Return plotly figure axis."], [270, 2, 2, "", "title", "Return plotly figure axis."], [270, 2, 2, "", "true_circle", "Return plotly figure axis."], [270, 2, 2, "", "valid", "Return plotly figure axis."], [270, 2, 2, "", "xy", "Return plotly figure axis."]], "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initialize": [[273, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.constraints": [[156, 0, 1, "", "Boundary", "Boundary constraint for purely geometrical layouts problems."], [161, 0, 1, "", "CFixN", "Fixed number of turbines constraint for purely geometrical layouts problems."], [166, 0, 1, "", "CMaxN", "Maximal number of turbines constraint for purely geometrical layouts problems."], [171, 0, 1, "", "CMinDensity", "Minimal turbine density constraint for purely geometrical layouts problems."], [177, 0, 1, "", "CMinN", "Minimal number of turbines constraint for purely geometrical layouts problems."], [182, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [187, 0, 1, "", "MinDist", "Minimal distance constraint for purely geometrical layouts problems."], [193, 0, 1, "", "Valid", "Validity constraint for purely geometrical layouts problems."], [198, 5, 1, "", "cdist", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary": [[157, 1, 1, "", "__init__", "Constructor."], [158, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [159, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [160, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.__init__": [[157, 2, 2, "", "D", "Constructor."], [157, 2, 2, "", "kwargs", "Constructor."], [157, 2, 2, "", "n_turbines", "Constructor."], [157, 2, 2, "", "name", "Constructor."], [157, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual": [[158, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [158, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [158, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [158, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_population": [[159, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [159, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [159, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [159, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN": [[162, 1, 1, "", "__init__", "Constructor."], [163, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [164, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [165, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.__init__": [[162, 2, 2, "", "N", "Constructor."], [162, 2, 2, "", "kwargs", "Constructor."], [162, 2, 2, "", "name", "Constructor."], [162, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual": [[163, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [163, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [163, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [163, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_population": [[164, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [164, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [164, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [164, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN": [[167, 1, 1, "", "__init__", "Constructor."], [168, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [169, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [170, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.__init__": [[167, 2, 2, "", "N", "Constructor."], [167, 2, 2, "", "kwargs", "Constructor."], [167, 2, 2, "", "name", "Constructor."], [167, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual": [[168, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [168, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [168, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [168, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population": [[169, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [169, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [169, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [169, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity": [[172, 1, 1, "", "__init__", "Constructor."], [173, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [174, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [175, 1, 1, "", "initialize", "Initialize the object."], [176, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__": [[172, 2, 2, "", "dfactor", "Constructor."], [172, 2, 2, "", "min_value", "Constructor."], [172, 2, 2, "", "name", "Constructor."], [172, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual": [[173, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [173, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [173, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [173, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population": [[174, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [174, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [174, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [174, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize": [[175, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN": [[178, 1, 1, "", "__init__", "Constructor"], [179, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [180, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [181, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.__init__": [[178, 2, 2, "", "N", "Constructor"], [178, 2, 2, "", "kwargs", "Constructor"], [178, 2, 2, "", "name", "Constructor"], [178, 2, 2, "", "problem", "Constructor"]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual": [[179, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [179, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [179, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [179, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_population": [[180, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [180, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [180, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [180, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint": [[183, 1, 1, "", "__init__", "Constructor"], [184, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [185, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [186, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.__init__": [[183, 2, 2, "", "args", "Constructor"], [183, 2, 2, "", "kwargs", "Constructor"], [183, 2, 2, "", "tol", "Constructor"]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_individual": [[184, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [184, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_population": [[185, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [185, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist": [[188, 1, 1, "", "__init__", "Constructor."], [189, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [190, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [191, 1, 1, "", "initialize", "Initialize the constaint."], [192, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.__init__": [[188, 2, 2, "", "kwargs", "Constructor."], [188, 2, 2, "", "min_dist", "Constructor."], [188, 2, 2, "", "n_turbines", "Constructor."], [188, 2, 2, "", "name", "Constructor."], [188, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual": [[189, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [189, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [189, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [189, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_population": [[190, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [190, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [190, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [190, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.initialize": [[191, 2, 2, "", "verbosity", "Initialize the constaint."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid": [[194, 1, 1, "", "__init__", "Constructor."], [195, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [196, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [197, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.__init__": [[194, 2, 2, "", "kwargs", "Constructor."], [194, 2, 2, "", "name", "Constructor."], [194, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_individual": [[195, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [195, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [195, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [195, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_population": [[196, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [196, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [196, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [196, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.constraints.cdist": [[198, 2, 2, "", "XA", "Compute distance between each pair of the two collections of inputs."], [198, 2, 2, "", "XB", "Compute distance between each pair of the two collections of inputs."], [198, 2, 2, "", "kwargs", "Compute distance between each pair of the two collections of inputs."], [198, 2, 2, "", "metric", "Compute distance between each pair of the two collections of inputs."], [198, 2, 2, "", "out", "Compute distance between each pair of the two collections of inputs."]], "foxes_opt.problems.layout.geom_layouts.objectives": [[199, 0, 1, "", "MaxDensity", "Maximal turbine density objective for purely geometrical layouts problems."], [206, 0, 1, "", "MaxGridSpacing", "Maximal grid spacing objective for purely geometrical layouts problems."], [212, 0, 1, "", "MeMiMaDist", "Mean-min-max distance objective for purely geometrical layouts problems."], [218, 0, 1, "", "OFixN", "Fixed number of turbines objective for purely geometrical layouts problems."], [224, 0, 1, "", "OMaxN", "Maximal number of turbines objective for purely geometrical layouts problems."], [230, 0, 1, "", "OMinN", "Minimal number of turbines objective for purely geometrical layouts problems."], [233, 0, 1, "", "Objective", "Abstract base class for objective functions."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity": [[200, 1, 1, "", "__init__", "Constructor."], [201, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [202, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [203, 1, 1, "", "initialize", "Initialize the object."], [204, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [205, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__": [[200, 2, 2, "", "dfactor", "Constructor."], [200, 2, 2, "", "min_dist", "Constructor."], [200, 2, 2, "", "name", "Constructor."], [200, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual": [[201, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [201, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [201, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [201, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population": [[202, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [202, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [202, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [202, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize": [[203, 2, 2, "", "verbosity", "Initialize the object."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing": [[207, 1, 1, "", "__init__", "Constructor."], [208, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [209, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [210, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [211, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__": [[207, 2, 2, "", "name", "Constructor."], [207, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual": [[208, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [208, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [208, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [208, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population": [[209, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [209, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [209, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [209, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist": [[213, 1, 1, "", "__init__", "Constructor."], [214, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [215, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [216, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [217, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__": [[213, 2, 2, "", "c1", "Constructor."], [213, 2, 2, "", "c2", "Constructor."], [213, 2, 2, "", "c3", "Constructor."], [213, 2, 2, "", "name", "Constructor."], [213, 2, 2, "", "problem", "Constructor."], [213, 2, 2, "", "scale", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual": [[214, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [214, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [214, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [214, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population": [[215, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [215, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [215, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [215, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN": [[219, 1, 1, "", "__init__", "Constructor."], [220, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [221, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [222, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [223, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.__init__": [[219, 2, 2, "", "N", "Constructor."], [219, 2, 2, "", "name", "Constructor."], [219, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual": [[220, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [220, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [220, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [220, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_population": [[221, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [221, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [221, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [221, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN": [[225, 1, 1, "", "__init__", "Constructor."], [226, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [227, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [228, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [229, 1, 1, "", "n_components", "Returns the number of components of the function."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.__init__": [[225, 2, 2, "", "name", "Constructor."], [225, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual": [[226, 2, 2, "", "cmpnts", "Calculate values for a single individual of the underlying problem."], [226, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [226, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [226, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population": [[227, 2, 2, "", "cmpnts", "Calculate values for all individuals of a population."], [227, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [227, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [227, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMinN": [[231, 1, 1, "", "__init__", "Constructor."], [232, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.__init__": [[231, 2, 2, "", "name", "Constructor."], [231, 2, 2, "", "problem", "Constructor."]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective": [[234, 1, 1, "", "__init__", "Constructor"], [235, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "foxes_opt.problems.layout.geom_layouts.objectives.Objective.__init__": [[234, 2, 2, "", "cnames", "Constructor"], [234, 2, 2, "", "n_vars_float", "Constructor"], [234, 2, 2, "", "n_vars_int", "Constructor"], [234, 2, 2, "", "name", "Constructor"], [234, 2, 2, "", "problem", "Constructor"], [234, 2, 2, "", "vnames_float", "Constructor"], [234, 2, 2, "", "vnames_int", "Constructor"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [51, 58, 68, 99, 105, 115, 288, 309, 325], "0": [1, 8, 9, 10, 11, 22, 24, 28, 31, 42, 49, 52, 53, 58, 59, 60, 66, 67, 68, 71, 93, 94, 99, 104, 107, 109, 114, 117, 120, 123, 124, 127, 128, 132, 134, 140, 142, 147, 156, 161, 166, 171, 175, 177, 182, 184, 185, 187, 191, 193, 198, 199, 203, 206, 212, 213, 218, 224, 230, 233, 236, 242, 246, 252, 256, 262, 266, 273, 280, 287, 289, 292, 303, 310, 312, 325], "00": 325, "000000e": 325, "00013": 325, "00042": 325, "001": 325, "00158": 325, "00244": 325, "002709e": 325, "00319": 325, "0036700002": 325, "00_layout_single_st": 0, "01": 325, "011095e": 325, "011586e": 325, "012944e": 325, "017820e": 325, "019366e": 325, "02": 325, "027015e": 325, "0289892170": 325, "03": 325, "0325397b": 323, "0325851b": 323, "03ee3008a": 323, "03sf0635": 323, "04": 325, "041244e": 325, "044156e": 325, "0456": 198, "05": [182, 183, 325], "051430e": 325, "05464": 321, "06": 325, "071983e": 325, "081": 325, "087410e": 325, "0893": 198, "094916e": 325, "097684e": 325, "098324e": 325, "1": [9, 10, 49, 66, 71, 93, 94, 105, 124, 127, 142, 147, 171, 172, 198, 199, 200, 212, 213, 236, 242, 246, 252, 256, 262, 266, 273, 280, 287, 288, 289, 292, 303, 310, 312, 325], "10": [321, 325], "100": 325, "1000": 325, "101084205": 323, "1050": 325, "108843e": 325, "109": 325, "11": 325, "1100": 325, "114235e": 325, "1150": 325, "1174": 198, "12": 325, "1200": 325, "1250": 325, "13": 325, "1300": 325, "1350": 325, "135664e": 325, "137290e": 325, "137620e": 325, "14": 325, "1400": 325, "141458e": 325, "1450": 325, "15": 325, "150": 325, "1500": 325, "151751e": 325, "1550": 325, "16": 325, "1600": 325, "1650": 325, "1667": 198, "168690e": 325, "17": 325, "1700": 325, "1750": 325, "17kb": 325, "18": 325, "1800": 325, "180728e": 325, "182467e": 325, "1850": 325, "1859595870": 325, "19": 325, "1900": 325, "193676e": 325, "194822e": 325, "1950": 325, "197274e": 325, "198486e": 325, "1e": [182, 183, 325], "2": [198, 240, 250, 260, 270, 325], "20": 325, "200": 325, "2000": 325, "20000": 325, "2023": 321, "2050": 325, "209": 325, "21": 325, "210": 325, "2100": 325, "211": 325, "21105": 321, "212": 325, "213": 325, "214": 325, "215": 325, "2150": 325, "215227e": 325, "216": 325, "22": 325, "2200": 325, "225": 325, "2250": 325, "23": 325, "2300": 325, "232537e": 325, "2350": 325, "238949e": 325, "24": 325, "2400": 325, "2450": 325, "245126e": 325, "25": 325, "250": 325, "2500": 325, "250281e": 325, "2550": 325, "255097e": 325, "257950e": 325, "26": 325, "2600": 325, "2650": 325, "266611e": 325, "2672": 198, "268625e": 325, "27": 325, "2700": 325, "2750": 325, "277672268847": 325, "28": 325, "2800": 325, "2850": 325, "28783": 325, "29": 325, "2900": 325, "293245e": 325, "2950": 325, "298466e": 325, "2kb": 325, "3": [49, 51, 198, 325], "30": 325, "300": 325, "3000": 325, "3050": 325, "31": 325, "3100": 325, "311872e": 325, "313328e": 325, "3150": 325, "32": 325, "3200": 325, "322396e": 325, "3250": 325, "33": 325, "3300": 325, "3350": 325, "339020e": 325, "34": 325, "3400": 325, "3450": 325, "349004e": 325, "35": [198, 325], "350": 325, "3500": 325, "3550": 325, "3561": 198, "36": [198, 325], "3600": 325, "3650": 325, "365731e": 325, "369663e": 325, "37": 325, "3700": 325, "374803e": 325, "3750": 325, "377881e": 325, "38": 325, "3800": 325, "381264e": 325, "3850": 325, "385391e": 325, "389183e": 325, "39": 325, "3900": 325, "391898e": 325, "394927e": 325, "3950": 325, "4": [198, 325], "40": 325, "400": 325, "4000": 325, "4050": 325, "41": 325, "4100": 325, "4150": 325, "42": 325, "4200": 325, "421784e": 325, "421938e": 325, "4250": 325, "426929e": 325, "43": 325, "4300": 325, "434586e": 325, "4350": 325, "439414e": 325, "44": 325, "4400": 325, "440080e": 325, "4405916400": 325, "4450": 325, "446678e": 325, "45": 325, "450": 325, "4500": 325, "451kb": 325, "4550": 325, "46": 325, "4600": 325, "461710e": 325, "4650": 325, "468598e": 325, "47": 325, "4700": 325, "4750": 325, "48": 325, "4800": 325, "482376e": 325, "484456e": 325, "4850": 325, "49": 325, "4900": 325, "494226e": 325, "4950": 325, "495002e": 325, "498619e": 325, "5": [198, 325], "50": 325, "500": [212, 213, 325], "5000": 325, "500554e": 325, "507834e": 325, "508672e": 325, "51": 325, "511013e": 325, "512055e": 325, "52": 325, "53": 325, "54": 325, "544626e": 325, "5464": 321, "55": 325, "550": 325, "56": 325, "566637e": 325, "57": 325, "571793e": 325, "572399e": 325, "573154e": 325, "58": 325, "585859e": 325, "589298e": 325, "59": 325, "592622e": 325, "5e": 325, "6": [198, 325], "60": 325, "600": 325, "61": 325, "6172": 198, "6172307553": 325, "62": 325, "623231e": 325, "623456e": 325, "623859e": 325, "629958e": 325, "63": 325, "630865e": 325, "632250e": 325, "633040e": 325, "635398e": 325, "636295e": 325, "637392e": 325, "639116e": 325, "639242e": 325, "639713e": 325, "64": 325, "642970e": 325, "647586e": 325, "648299e": 325, "65": 325, "650": 325, "651638e": 325, "656008e": 325, "659120e": 325, "66": 325, "660144e": 325, "664176e": 325, "664510e": 325, "667086e": 325, "668302e": 325, "668654e": 325, "67": 325, "672131e": 325, "672340e": 325, "675730e": 325, "679336e": 325, "679345e": 325, "68": 325, "682198e": 325, "683192e": 325, "684352e": 325, "684436e": 325, "685910e": 325, "686737e": 325, "687477e": 325, "688213e": 325, "69": 325, "690648e": 325, "690953e": 325, "692379e": 325, "693244e": 325, "693554e": 325, "695093e": 325, "696589e": 325, "698961e": 325, "699951e": 325, "7": [198, 325], "70": 325, "700": 325, "701783e": 325, "702238e": 325, "703675e": 325, "703977e": 325, "704255e": 325, "7044": 198, "705554e": 325, "705714e": 325, "706153e": 325, "708070e": 325, "709566e": 325, "71": 325, "710990e": 325, "711365e": 325, "712767e": 325, "713617e": 325, "713903e": 325, "713924e": 325, "714727e": 325, "715063e": 325, "715763e": 325, "716309e": 325, "717583e": 325, "717715e": 325, "718699e": 325, "718967e": 325, "719379e": 325, "72": 325, "720381e": 325, "720750e": 325, "721396e": 325, "721825e": 325, "722662e": 325, "723489e": 325, "723719e": 325, "724960e": 325, "726276e": 325, "726414e": 325, "728228e": 325, "728523e": 325, "729573e": 325, "73": 325, "730297e": 325, "730764e": 325, "732604e": 325, "734725e": 325, "735820e": 325, "736205e": 325, "736656e": 325, "738042e": 325, "738912e": 325, "739408e": 325, "74": 325, "740628e": 325, "740851e": 325, "742020e": 325, "742672e": 325, "742883e": 325, "743480e": 325, "745263e": 325, "745662e": 325, "746462e": 325, "747639e": 325, "747658e": 325, "748825e": 325, "748826e": 325, "749469e": 325, "75": 325, "750": 325, "750088e": 325, "750244e": 325, "750263e": 325, "750365e": 325, "750442e": 325, "750600e": 325, "750688e": 325, "750885e": 325, "750976e": 325, "751208e": 325, "751212e": 325, "751361e": 325, "751561e": 325, "751994e": 325, "752174e": 325, "752418e": 325, "752654e": 325, "752717e": 325, "752956e": 325, "753058e": 325, "753560e": 325, "753591e": 325, "754149e": 325, "754853e": 325, "755239e": 325, "755318e": 325, "755383e": 325, "755434e": 325, "755540e": 325, "755761e": 325, "756008e": 325, "756107e": 325, "756331e": 325, "756656e": 325, "76": 325, "762303e": 325, "77": 325, "775495e": 325, "78": 325, "781952e": 325, "7833": 198, "787956e": 325, "79": 325, "8": [321, 325], "80": 325, "800": 325, "80b": 325, "81": 325, "818416e": 325, "82": 325, "83": [198, 325], "84": 325, "8477": 198, "85": [198, 325], "850": 325, "86": [198, 321, 325], "860049e": 325, "869307e": 325, "87": 325, "871628e": 325, "875224e": 325, "878328e": 325, "88": 325, "880748e": 325, "8856": 198, "89": [198, 325], "895907e": 325, "9": [198, 325], "90": 325, "900": 325, "91": 325, "916108e": 325, "917821e": 325, "92": 325, "93": 325, "932613e": 325, "94": 325, "9422": 198, "95": 325, "950": 325, "951248e": 325, "959411e": 325, "96": 325, "97": 325, "9711": 198, "971977e": 325, "9728": 198, "9794099827": 325, "98": 325, "99": 325, "995": 325, "998273e": 325, "998508e": 325, "998818e": 325, "999757e": 325, "999999": [49, 50, 93, 142, 236, 246, 256, 266, 280, 287, 303], "A": [198, 236, 246, 256, 266, 320], "As": 324, "By": 68, "For": [198, 325, 326], "If": [94, 198, 234, 324], "In": 325, "It": 325, "Such": 109, "The": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 325, 326], "There": 324, "These": 325, "To": 198, "_": 318, "_2": 198, "__repr__": [99, 101], "__str__": [1, 3, 22, 24, 31, 42, 49, 93, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "_p": 198, "about": 325, "abov": [323, 324, 325], "abstract": [31, 37, 42, 49, 93, 95, 96, 182, 233, 235, 318], "accept_nan": 105, "accept_non": 105, "action": 323, "actual": [49, 58, 93, 142, 236, 246, 256, 266, 280, 287, 303], "ad": [0, 68, 144, 318, 325], "add": [1, 22, 24, 31, 33, 42, 44, 49, 52, 53, 54, 93, 99, 103, 117, 120, 123, 132, 134, 140, 142, 144, 236, 246, 256, 266, 280, 287, 303, 325], "add_constraint": [49, 52, 93, 142, 236, 246, 256, 266, 280, 287, 303, 325], "add_object": [49, 53, 93, 142, 236, 246, 256, 266, 280, 287, 303, 325], "add_row": 325, "add_to_figur": 325, "add_to_layout_figur": [1, 22, 24, 31, 33, 42, 44, 49, 54, 93, 123, 132, 134, 140, 142, 280, 287, 303], "add_var": [142, 144], "addit": [2, 23, 25, 32, 43, 49, 51, 94, 111, 115, 124, 132, 133, 135, 140, 141, 147, 288, 292, 309, 312, 325], "additio": [157, 162, 167, 172, 188, 194], "addition": [63, 64], "affair": 323, "after": [117, 325], "again": 325, "algo": [49, 51, 89, 90, 93, 97, 98, 99, 102, 103, 104, 105, 107, 109, 113, 114, 115, 117, 120, 122, 142, 280, 284, 285, 287, 288, 299, 300, 303, 309, 325], "algo_par": 325, "algorithm": [49, 51, 102, 103, 104, 105, 107, 109, 113, 115, 117, 120, 122, 288, 309, 325], "all": [1, 4, 5, 6, 20, 21, 22, 24, 26, 27, 30, 31, 34, 35, 39, 41, 42, 47, 49, 51, 55, 58, 64, 68, 79, 80, 93, 99, 102, 109, 112, 117, 119, 122, 123, 124, 125, 126, 131, 132, 133, 134, 136, 137, 140, 141, 142, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 186, 187, 189, 190, 193, 195, 196, 198, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 246, 256, 266, 280, 287, 303, 323, 325], "all_turbin": [49, 55, 93, 142, 280, 287, 303], "allow": 325, "alpha": 325, "also": [323, 325], "am": 323, "amb_ct": 325, "amb_p": 325, "amb_rew": 325, "amb_rews2": 325, "amb_rews3": 325, "amb_rho": 325, "amb_w": 325, "an": [49, 53, 93, 105, 142, 198, 236, 246, 256, 266, 280, 287, 303], "ana_deriv": [1, 4, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "analyt": [1, 4, 22, 24, 31, 42, 58, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "angl": [303, 304], "ani": [5, 6, 9, 10, 26, 27, 34, 35, 56, 57, 66, 67, 125, 126, 127, 136, 137, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 189, 190, 195, 196, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 238, 239, 248, 249, 258, 259, 268, 269, 289, 310, 318], "anyth": 325, "api": 323, "appear": 325, "appli": [49, 56, 57, 93, 142, 144, 198, 236, 238, 239, 246, 248, 249, 256, 258, 259, 266, 268, 269, 280, 287, 303, 325], "applic": [5, 6, 9, 10, 26, 27, 34, 35, 49, 56, 57, 62, 66, 67, 93, 125, 126, 127, 136, 137, 142, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 189, 190, 195, 196, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 238, 239, 248, 249, 258, 259, 268, 269, 280, 287, 289, 303, 310, 318, 325], "apply_individu": [49, 56, 93, 142, 236, 238, 246, 248, 256, 258, 266, 268, 280, 287, 303], "apply_popul": [49, 57, 93, 142, 236, 239, 246, 249, 256, 259, 266, 269, 280, 287, 303], "apply_ufunc": [99, 115], "ar": [1, 22, 24, 31, 49, 55, 58, 59, 60, 68, 93, 99, 113, 142, 144, 156, 161, 166, 171, 177, 182, 184, 185, 186, 187, 193, 198, 236, 246, 256, 266, 280, 287, 303, 318, 319, 320, 322, 323, 324, 325, 326], "area": [1, 2, 318, 325], "areageometri": [1, 2, 236, 237, 246, 247, 256, 257, 266, 267], "areageometryconstraint": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 318], "arg": [99, 111, 142, 143, 182, 183], "argument": [115, 143, 198, 240, 250, 260, 270], "ariti": 198, "arrai": [4, 5, 6, 9, 10, 26, 27, 34, 35, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 89, 90, 97, 98, 99, 102, 112, 125, 126, 127, 129, 136, 137, 138, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 184, 185, 186, 189, 190, 195, 196, 198, 201, 202, 204, 208, 209, 210, 214, 215, 216, 220, 221, 222, 226, 227, 228, 232, 235, 238, 239, 240, 248, 249, 250, 258, 259, 260, 268, 269, 270, 284, 285, 289, 299, 300, 310, 325], "arrang": 198, "array_lik": [106, 198], "articl": 321, "artifici": [99, 318], "assum": 234, "atmospher": 323, "author": 321, "automat": [0, 109, 198], "avail": 322, "avoid": 198, "awesom": 323, "ax": [1, 22, 24, 31, 33, 42, 44, 49, 54, 93, 123, 132, 134, 140, 142, 236, 240, 246, 250, 256, 260, 266, 270, 280, 287, 303, 325], "axi": [33, 44, 54, 198, 236, 240, 246, 250, 256, 260, 266, 270], "b": [198, 323], "background": [246, 247, 320], "bar": [198, 240, 250, 260, 270], "barg": [240, 250, 260, 270], "base": [31, 42, 49, 58, 93, 99, 102, 110, 123, 157, 162, 167, 172, 182, 188, 194, 233, 318, 323, 325], "basic": [318, 325], "bastankhah025": 325, "bastankhah025_linear_k002": 325, "bastankhah2014": 325, "been": [12, 108, 323], "befor": [89, 90, 97, 98, 134, 135, 144, 284, 285, 299, 300, 325], "begin": 325, "being": [68, 99, 113, 198], "bernhard": 321, "best": 325, "between": [188, 198, 236, 237, 246, 247, 256, 257, 266, 267, 288, 325], "bibtex": 321, "bit": 325, "block": [198, 325], "bmbf": 323, "bmwk": 323, "book": 325, "bool": [1, 2, 12, 20, 21, 30, 41, 55, 58, 63, 64, 68, 105, 108, 116, 123, 124, 129, 131, 133, 134, 135, 138, 141, 144, 204, 210, 216, 222, 228, 232, 235, 236, 237, 240, 250, 260, 270], "boolean": [59, 60, 75, 184, 185, 198, 240, 250, 260, 270], "both": [287, 324, 325], "bound": [1, 22, 24, 31, 156, 161, 166, 171, 177, 182, 186, 187, 193], "boundari": [1, 2, 22, 23, 156, 157, 158, 159, 160, 236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 318, 320, 325], "boundary_0000": 325, "boundary_0001": 325, "boundary_0002": 325, "boundary_0003": 325, "boundary_0004": 325, "boundary_0005": 325, "boundary_0006": 325, "boundary_0007": 325, "boundary_0008": 325, "boundary_0009": 325, "brai": 198, "branch": 323, "braycurti": 198, "bremen": 325, "bug": 0, "c": [198, 324], "c1": [212, 213], "c2": [212, 213], "c3": [212, 213], "calc_farm": [49, 51], "calc_farm_arg": [49, 51], "calc_gradi": [49, 58, 93, 142, 236, 246, 256, 266, 280, 287, 303], "calc_individu": [1, 5, 22, 24, 26, 31, 34, 42, 123, 125, 132, 134, 136, 140, 156, 158, 161, 163, 166, 168, 171, 173, 177, 179, 182, 187, 189, 193, 195, 199, 201, 206, 208, 212, 214, 218, 220, 224, 226, 230, 233], "calc_par": [99, 115], "calc_popul": [1, 6, 22, 24, 27, 31, 35, 42, 123, 126, 132, 134, 137, 140, 156, 159, 161, 164, 166, 169, 171, 174, 177, 180, 182, 187, 190, 193, 196, 199, 202, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233], "calc_valid": [236, 237], "calcul": [1, 4, 5, 6, 22, 24, 26, 27, 31, 34, 35, 42, 49, 58, 68, 85, 86, 89, 90, 93, 97, 98, 99, 102, 103, 104, 107, 109, 113, 115, 117, 120, 122, 123, 125, 126, 132, 134, 136, 137, 140, 142, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 198, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 236, 246, 256, 266, 280, 284, 285, 287, 299, 300, 303, 318, 323, 325], "call": [49, 58, 89, 90, 93, 97, 98, 115, 142, 198, 236, 246, 256, 266, 280, 284, 285, 287, 299, 300, 303], "callabl": 198, "can": [58, 144, 198, 318, 325], "canberra": 198, "cannot": 4, "capabl": 323, "case": 325, "cd": 326, "cdist": 198, "cdot": 198, "centr": 325, "cf": 68, "cfixn": [161, 162, 163, 164, 165, 320], "champion": [1, 9, 22, 24, 31, 42, 49, 66, 93, 123, 127, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 289, 303, 310], "chang": 323, "changelog": 0, "chebyshev": 198, "check": [1, 22, 24, 31, 49, 59, 60, 93, 134, 135, 142, 156, 161, 166, 171, 177, 182, 184, 185, 187, 193, 236, 246, 256, 266, 280, 287, 303, 325], "check_constraints_individu": [49, 59, 93, 142, 236, 246, 256, 266, 280, 287, 303], "check_constraints_popul": [49, 60, 93, 142, 236, 246, 256, 266, 280, 287, 303], "check_individu": [1, 22, 24, 31, 156, 161, 166, 171, 177, 182, 184, 187, 193], "check_popul": [1, 22, 24, 31, 156, 161, 166, 171, 177, 182, 185, 187, 193], "check_valid": [134, 135], "checkout": 323, "choic": [144, 325], "choos": 198, "chunk": [99, 102, 109], "chunk_size_point": 325, "chunk_size_st": 325, "circl": [236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 325], "citat": 323, "cite": 321, "citi": 198, "cityblock": 198, "class": [1, 22, 24, 31, 42, 49, 58, 68, 93, 94, 99, 111, 123, 132, 134, 140, 142, 147, 156, 157, 161, 162, 166, 167, 171, 172, 177, 182, 187, 188, 193, 194, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 292, 303, 312, 318, 319, 320], "classmethod": [1, 22, 24, 31, 39, 42, 47, 49, 84, 88, 93, 99, 111, 123, 132, 134, 140, 142, 280, 287, 303], "climat": 323, "clone": [324, 326], "closedpolygon": 325, "cluster": 323, "cma": 72, "cmaxn": [166, 167, 168, 169, 170, 320], "cmi": 76, "cmindens": [171, 172, 173, 174, 175, 176, 320], "cminn": [177, 178, 179, 180, 181, 320], "cmpnt": [156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230], "cname": 234, "coars": 325, "code": [0, 323], "coeff": [49, 85, 86, 93, 142, 236, 246, 256, 266, 280, 287, 303], "coeffici": [85, 86], "collect": 198, "column": 198, "com": [0, 323, 324, 326], "combin": 105, "commit": [0, 323], "common": 198, "compon": [1, 4, 5, 6, 7, 9, 10, 13, 20, 21, 22, 24, 26, 27, 29, 30, 31, 34, 35, 37, 41, 42, 49, 58, 68, 79, 80, 93, 123, 125, 126, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 142, 156, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 246, 256, 266, 280, 287, 303, 325], "component_nam": [1, 7, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "comput": [102, 198], "con": [63, 64, 66, 67, 289, 310], "conda": 324, "condit": [1, 2, 325], "consid": [58, 68], "constaint": [24, 28, 187, 191], "constrain": [1, 22, 318], "constraint": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 42, 43, 49, 52, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 76, 79, 93, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 207, 213, 219, 225, 231, 236, 246, 256, 266, 280, 287, 288, 289, 303, 310, 319, 325], "constraint_valu": [1, 22, 24, 31, 49, 59, 60, 93, 142, 156, 161, 166, 171, 177, 182, 184, 185, 187, 193, 236, 246, 256, 266, 280, 287, 303], "constraints_tol": [49, 61, 93, 142, 236, 246, 256, 266, 280, 287, 303], "constructor": [1, 2, 22, 23, 24, 25, 31, 32, 49, 51, 93, 99, 100, 111, 123, 124, 132, 133, 134, 135, 140, 141, 142, 143, 156, 157, 161, 162, 166, 167, 171, 172, 177, 178, 182, 183, 187, 188, 193, 194, 199, 200, 206, 207, 212, 213, 218, 219, 224, 225, 230, 231, 233, 234, 236, 237, 246, 247, 256, 257, 266, 267, 280, 303, 309], "consult": 318, "contain": [68, 318, 325], "context": 325, "contract": [123, 124, 133, 141], "contract_st": [123, 124, 133, 141], "contract_turbin": [124, 133, 141], "contribut": 324, "conveni": 325, "convent": 198, "convert": 198, "coord": [109, 198], "coordin": [99, 112, 123, 198, 240, 250, 260, 270, 325], "copi": 0, "core": [1, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 142, 182, 233, 236, 246, 256, 266, 280, 287, 288, 303, 309, 319, 320], "corner": 198, "correl": 198, "correspond": 325, "cosin": 198, "could": 198, "count": [134, 135], "counter": [49, 62, 93, 142, 280, 287, 303], "cov": 198, "covari": 198, "creat": [99, 109, 121, 144, 323, 325], "csv": 325, "ctol": 61, "cube": 198, "current": [49, 62, 93, 99, 116, 142, 280, 287, 303], "curti": 198, "cv_avg": 325, "cv_min": 325, "d": [1, 2, 24, 25, 156, 157, 198, 236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 325], "dask": 323, "data": [1, 9, 10, 22, 24, 31, 42, 49, 66, 67, 89, 90, 93, 97, 98, 99, 102, 103, 105, 109, 115, 117, 120, 123, 127, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 284, 285, 287, 289, 299, 300, 303, 310, 325], "data_ndarrai": 109, "data_prio": 105, "data_sourc": 325, "data_stash": [99, 117, 120], "data_var": 109, "dataset": [115, 325], "ddof": 198, "default": [68, 106, 198, 234, 325], "defaultengin": 325, "defaultsingleobjectivetermin": 325, "deficit": 325, "defin": [198, 236, 246, 318, 320, 325], "delta": [172, 200], "demonstr": 325, "densiti": [171, 172, 199, 320], "dep": [20, 21, 30, 41, 123, 124, 131, 133, 141], "depend": [1, 20, 21, 22, 24, 30, 31, 41, 42, 123, 124, 131, 132, 133, 134, 140, 141, 144, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 234, 325, 326], "deriv": [1, 4, 22, 24, 31, 42, 58, 68, 111, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "descript": 318, "detail": [318, 325], "develop": [323, 325], "dfactor": [171, 172, 199, 200], "diamet": [157, 236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 325], "dice": 198, "dict": [2, 16, 17, 23, 25, 32, 43, 49, 51, 52, 53, 94, 95, 96, 102, 109, 111, 115, 117, 120, 123, 124, 132, 133, 135, 140, 141, 143, 147, 152, 153, 157, 162, 167, 172, 188, 194, 198, 240, 250, 260, 270, 288, 292, 297, 298, 309, 312, 315, 316, 325], "dictionari": [117, 120], "diff": 213, "differenti": [4, 58, 68], "dim": 112, "dim_arrai": 109, "dim_name_str": 109, "dim_tupl": 109, "dimens": [105, 325], "dimension": 198, "directli": [49, 58, 93, 142, 236, 246, 256, 266, 280, 287, 303], "disagre": 198, "disc": [1, 2], "disc_insid": [1, 2], "dist": [25, 198], "dist_0_1": 325, "dist_0_2": 325, "dist_0_3": 325, "dist_0_4": 325, "dist_0_5": 325, "dist_0_6": 325, "dist_0_7": 325, "dist_0_8": 325, "dist_0_9": 325, "dist_1_2": 325, "dist_1_3": 325, "dist_1_4": 325, "dist_1_5": 325, "dist_1_6": 325, "dist_1_7": 325, "dist_1_8": 325, "dist_1_9": 325, "dist_2_3": 325, "dist_2_4": 325, "dist_2_5": 325, "dist_2_6": 325, "dist_2_7": 325, "dist_2_8": 325, "dist_2_9": 325, "dist_3_4": 325, "dist_3_5": 325, "dist_3_6": 325, "dist_3_7": 325, "dist_3_8": 325, "dist_3_9": 325, "dist_4_5": 325, "dist_4_6": 325, "dist_4_7": 325, "dist_4_8": 325, "dist_4_9": 325, "dist_5_6": 325, "dist_5_7": 325, "dist_5_8": 325, "dist_5_9": 325, "dist_6_7": 325, "dist_6_8": 325, "dist_6_9": 325, "dist_7_8": 325, "dist_7_9": 325, "dist_8_9": 325, "dist_insid": 325, "dist_outsid": 325, "distanc": [24, 25, 187, 188, 198, 200, 212, 213, 236, 237, 246, 247, 256, 257, 266, 267, 288, 318, 320, 325], "diverg": 198, "dm": 198, "do": [105, 198, 325], "doc": 318, "document": [0, 198, 318], "doe": [236, 246, 256, 266], "doi": 321, "done": 12, "dot": 198, "downwind": [105, 325], "downwind_index": 105, "dpar": 325, "draw": [240, 250, 260, 270], "dtype": 325, "dure": [109, 325], "d\u00f6renk\u00e4mper": 321, "e": [49, 79, 80, 93, 142, 198, 236, 246, 256, 266, 280, 287, 303, 324, 325, 326], "each": [42, 123, 129, 132, 134, 138, 140, 198, 199, 204, 206, 210, 212, 216, 218, 222, 224, 228, 230, 232, 233, 235, 325], "econom": 323, "educ": 323, "effect": [319, 320], "effici": 198, "einsum": [49, 85, 86, 93, 142, 236, 246, 256, 266, 280, 287, 303], "either": [24, 25, 144], "element": 198, "enabl": 323, "energi": 323, "engin": [0, 325], "ensur": [1, 2, 105], "ensure_vari": [99, 103], "enter": 105, "entri": [99, 105, 109, 198], "error": 105, "etc": 325, "euclidean": 198, "europ": 323, "evalu": [49, 63, 64, 93, 142, 236, 237, 246, 256, 266, 280, 287, 303, 319, 320, 321, 323], "evaluate_individu": [49, 63, 93, 142, 236, 246, 256, 266, 280, 287, 303], "evaluate_popul": [49, 64, 93, 142, 236, 246, 256, 266, 280, 287, 303], "exactli": 109, "exampl": [0, 318, 323, 325], "except": 198, "execut": 102, "exist": 186, "express": 186, "extend": [321, 323], "extern": [], "extra": 198, "f": [105, 198], "f_avg": 325, "f_min": 325, "factor": [123, 124, 133, 141, 172, 200], "factori": [99, 111], "fals": [2, 49, 58, 63, 64, 68, 93, 105, 142, 144, 236, 246, 256, 266, 280, 287, 303], "farm": [1, 22, 24, 31, 36, 42, 45, 49, 65, 89, 90, 93, 94, 95, 96, 97, 98, 102, 103, 105, 123, 132, 134, 140, 142, 144, 152, 153, 236, 246, 256, 266, 280, 284, 285, 287, 297, 298, 299, 300, 303, 315, 316, 318, 319, 321, 323, 325], "farm_layout": 325, "farm_var": [95, 96, 152, 153, 297, 298, 315, 316], "farmboundaryconstraint": [22, 23, 318, 325], "farmconstraint": [1, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 318], "farmlayoutoptproblem": [280, 281, 282, 283, 284, 285, 286, 319, 325], "farmlayoutoutput": 325, "farmobject": [42, 43, 44, 45, 46, 47, 48, 123, 124, 133, 134, 135, 141, 318], "farmoptproblem": [2, 23, 25, 32, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 124, 132, 133, 135, 140, 141, 157, 162, 167, 172, 188, 194, 200, 207, 213, 219, 225, 231, 280, 318, 319], "farmvarobject": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 318], "farmvarsproblem": [93, 94, 95, 96, 97, 98, 142, 143, 287, 288, 303, 309, 318, 319], "fast": 323, "fc": [105, 134, 135], "fdata": [99, 102, 103, 105], "feder": 323, "fig": 325, "figsiz": 325, "figur": [1, 22, 24, 31, 33, 42, 44, 49, 54, 93, 123, 132, 134, 140, 142, 236, 240, 246, 250, 256, 260, 266, 270, 280, 287, 303, 325], "file": 325, "fill_mod": 325, "final": [1, 8, 9, 10, 22, 24, 31, 42, 49, 66, 67, 93, 99, 104, 123, 127, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 289, 303, 310, 318, 325], "finalize_individu": [1, 9, 22, 24, 31, 42, 49, 66, 93, 123, 127, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 289, 303, 310], "finalize_popul": [1, 10, 22, 24, 31, 42, 49, 67, 93, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "find": [198, 318], "finish": [1, 12, 22, 24, 31, 42, 49, 93, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303, 325], "first": [0, 105, 324, 325], "fix": [0, 161, 218, 246, 320], "fixed_var": 325, "flag": [1, 12, 22, 24, 31, 42, 49, 55, 58, 63, 64, 68, 75, 93, 99, 105, 108, 116, 123, 129, 132, 134, 138, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 204, 206, 210, 212, 216, 218, 222, 224, 228, 230, 232, 233, 235, 236, 246, 256, 266, 280, 287, 303, 324, 325], "flapfoam": 323, "flappi": 323, "float": [1, 2, 4, 5, 6, 9, 10, 14, 16, 18, 20, 22, 24, 25, 26, 27, 30, 31, 34, 35, 41, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 69, 73, 77, 82, 89, 90, 91, 93, 95, 96, 97, 98, 123, 124, 125, 126, 127, 131, 132, 133, 134, 136, 137, 140, 141, 142, 144, 145, 148, 150, 152, 153, 154, 156, 157, 158, 159, 161, 163, 164, 166, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 187, 188, 189, 190, 193, 195, 196, 198, 199, 200, 201, 202, 206, 208, 209, 212, 213, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 274, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 297, 298, 299, 300, 301, 303, 309, 310, 311, 313, 314, 315, 316, 317, 325], "float64": 325, "float_random": 325, "floatrandomsampl": 325, "flow": 323, "flowplots2d": 325, "folder": [322, 325], "follow": [198, 322, 325], "forg": 324, "fork": [323, 324], "form": 325, "found": [], "four": 198, "fox": [0, 1, 2, 24, 31, 36, 42, 45, 49, 51, 65, 84, 93, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 113, 115, 117, 119, 120, 122, 123, 124, 133, 141, 142, 144, 152, 153, 236, 237, 246, 247, 256, 257, 266, 267, 280, 287, 288, 297, 298, 303, 309, 315, 316, 318, 321, 322, 324, 325, 326], "foxes_opt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 325], "frac": 198, "framework": 323, "fraunhof": [323, 325], "fraunhoferiw": [0, 318, 323, 324, 326], "from": [0, 49, 52, 53, 84, 93, 99, 105, 120, 142, 198, 280, 287, 303, 318, 325], "front": 318, "ftol": 325, "full": [0, 1, 2], "fullfil": [1, 22, 24, 31, 49, 59, 60, 93, 142, 156, 161, 166, 171, 177, 182, 184, 185, 187, 193, 236, 246, 256, 266, 280, 287, 303], "fulli": [236, 237, 246, 247, 256, 257, 266, 267, 323], "func": [49, 58, 68, 93, 142, 236, 246, 256, 266, 280, 287, 303], "function": [1, 13, 20, 21, 22, 24, 29, 30, 31, 37, 41, 42, 43, 49, 58, 63, 64, 66, 67, 68, 79, 80, 89, 90, 93, 97, 98, 102, 114, 115, 117, 120, 123, 124, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 156, 160, 161, 165, 166, 170, 171, 176, 177, 181, 182, 187, 192, 193, 197, 198, 199, 205, 206, 211, 212, 217, 218, 223, 224, 229, 230, 233, 234, 236, 246, 256, 266, 280, 284, 285, 287, 289, 299, 300, 303, 310, 318, 323, 325], "fund": 323, "furthermor": 323, "fv": 325, "fvar": 58, "g": 198, "ga": 325, "gener": [10, 67, 319, 325], "genet": 325, "geom2d": [1, 2, 236, 237, 246, 247, 256, 257, 266, 267, 325], "geom_layout": [31, 42, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 318], "geometr": [156, 157, 161, 162, 166, 167, 171, 172, 177, 187, 188, 193, 194, 199, 200, 206, 207, 212, 213, 218, 219, 224, 225, 230, 231, 236, 246, 319, 320], "geometri": [1, 2, 236, 237, 246, 247, 256, 257, 266, 267, 318, 320, 325], "geomlayout": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 320], "geomlayoutgrid": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 320], "geomreggrid": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 320], "germani": 325, "get": [1, 3, 20, 21, 22, 24, 30, 31, 41, 42, 49, 61, 72, 76, 88, 93, 99, 112, 123, 131, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "get_bound": [1, 22, 24, 31, 156, 161, 166, 171, 177, 182, 186, 187, 193], "get_data": [99, 105], "get_fig": [236, 240, 246, 250, 256, 260, 266, 270], "get_figur": 325, "get_gradi": [49, 58, 68, 93, 142, 236, 246, 256, 266, 280, 287, 303], "get_mean_fig_xi": 325, "getter": [99, 105], "git": [323, 324, 325, 326], "github": [0, 318, 322, 323, 324, 326], "given": [1, 9, 10, 22, 24, 31, 42, 49, 59, 60, 66, 67, 93, 123, 127, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 184, 185, 187, 193, 198, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 289, 303, 310, 318], "gm": 325, "gradient": [49, 58, 68, 93, 142, 236, 246, 256, 266, 280, 287, 303], "grant": 323, "grid": [172, 200, 206, 246, 247, 256, 266, 267, 287, 288, 303, 319, 320], "grid_spac": [246, 247], "gt": 325, "gw": 323, "h2digit": 323, "ha": [12, 108, 109, 287, 323], "ham": 198, "have": [198, 325], "helper": [99, 318], "here": [109, 117, 120, 323, 325], "histori": 323, "home": 325, "horizon": 323, "html": 318, "http": [0, 318, 321, 323, 324, 326], "i": [49, 68, 79, 80, 89, 90, 93, 97, 98, 99, 102, 105, 109, 115, 123, 142, 198, 234, 236, 246, 256, 266, 280, 284, 285, 287, 299, 300, 303, 323, 325], "id": [99, 110, 323], "idata": 109, "identifi": 105, "ij": 198, "implement": 325, "impli": 325, "implicit": 325, "import": [198, 325], "includ": 325, "index": [4, 49, 84, 88, 93, 99, 105, 106, 114, 117, 120, 142, 280, 287, 303, 318], "indic": [58, 87, 106], "individu": [1, 5, 6, 22, 24, 26, 27, 31, 34, 35, 42, 49, 59, 63, 64, 93, 123, 125, 126, 132, 134, 136, 137, 140, 142, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 184, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 236, 246, 256, 266, 280, 287, 303, 325], "ineffici": 198, "inf": [73, 77, 148, 150, 186, 243, 244, 263, 264, 274, 276, 282, 283, 293, 295, 313, 314], "info": [1, 3, 22, 24, 31, 42, 49, 93, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "init": [94, 142, 144, 147, 292, 312], "initi": [1, 11, 12, 22, 24, 28, 31, 42, 49, 69, 70, 71, 93, 94, 99, 103, 107, 108, 123, 128, 132, 134, 140, 142, 144, 145, 146, 147, 156, 161, 166, 171, 175, 177, 182, 187, 191, 193, 199, 203, 206, 212, 218, 224, 230, 233, 236, 241, 242, 246, 251, 252, 256, 261, 262, 266, 271, 272, 273, 280, 281, 287, 290, 291, 292, 303, 311, 312, 325], "initial_values_float": [49, 69, 93, 142, 145, 236, 241, 246, 256, 261, 266, 271, 280, 281, 287, 290, 303, 311], "initial_values_int": [49, 70, 93, 142, 146, 236, 246, 251, 256, 266, 272, 280, 287, 291, 303], "inlin": 325, "input": [115, 198, 325], "insid": [1, 2, 22, 318], "instal": [323, 325, 326], "instead": [49, 58, 93, 142, 198, 236, 246, 256, 266, 280, 287, 303], "int": [1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 40, 42, 43, 46, 48, 49, 51, 52, 53, 58, 59, 60, 62, 66, 67, 68, 70, 71, 74, 78, 79, 80, 81, 82, 83, 84, 87, 88, 93, 94, 96, 99, 100, 104, 105, 107, 109, 110, 114, 117, 118, 120, 123, 125, 126, 127, 128, 130, 132, 134, 136, 137, 139, 140, 142, 144, 146, 147, 149, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 205, 206, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 233, 234, 236, 237, 242, 246, 247, 251, 252, 253, 254, 255, 256, 257, 262, 266, 267, 272, 273, 275, 277, 279, 280, 287, 288, 289, 291, 292, 294, 296, 298, 302, 303, 310, 312, 316], "int64": 325, "int_inf": [49, 50, 74, 78, 93, 142, 149, 151, 236, 246, 256, 266, 275, 277, 280, 287, 294, 296, 303], "integ": [1, 4, 5, 6, 9, 10, 17, 19, 22, 24, 26, 27, 31, 34, 35, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 70, 74, 78, 89, 90, 92, 93, 95, 96, 97, 98, 106, 123, 125, 126, 127, 132, 134, 136, 137, 140, 142, 149, 151, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 238, 239, 248, 249, 256, 258, 259, 266, 268, 269, 275, 277, 280, 284, 285, 287, 289, 294, 296, 297, 298, 299, 300, 303, 310, 315, 316], "interfac": [323, 325], "intern": 323, "inv": 198, "invers": 198, "invok": [323, 325], "involv": [236, 246, 256, 266], "io": 318, "ipynb": 0, "isel": [99, 117, 120], "issu": 323, "iter": 105, "its": [198, 303, 319, 323], "ivar": [49, 58, 93, 142, 236, 246, 256, 266, 280, 287, 303], "iw": [323, 325], "iwopi": [2, 25, 32, 43, 49, 51, 52, 53, 58, 68, 182, 233, 234, 236, 246, 256, 266, 318, 320, 323, 325], "j": 198, "jaccard": 198, "jensen": 198, "jensenshannon": 198, "jona": [321, 325], "joss": 321, "journal": 321, "jupyt": 322, "keep": [24, 318], "kei": [16, 17, 52, 53, 94, 95, 96, 102, 105, 117, 120, 123, 144, 152, 153, 297, 298, 315, 316], "keyword": 143, "kulczynski": 198, "kulczynski1": 198, "kullback": 198, "kwarg": [1, 2, 22, 23, 24, 25, 31, 32, 33, 42, 43, 44, 49, 51, 54, 93, 94, 99, 111, 123, 124, 132, 133, 134, 135, 140, 141, 142, 143, 147, 157, 161, 162, 166, 167, 172, 177, 178, 182, 183, 188, 193, 194, 198, 280, 287, 288, 292, 303, 309, 312], "label": 106, "lambda": 198, "larg": [99, 117, 120], "later": 325, "latest": [49, 89, 90, 93, 97, 98, 142, 280, 284, 285, 287, 299, 300, 303], "latter": 325, "layout": [1, 22, 24, 31, 33, 42, 44, 49, 54, 93, 123, 132, 134, 140, 142, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323], "layout_opt": 325, "layout_optim": 0, "least": [24, 198, 318], "leibler": 198, "length": [99, 318], "let": 325, "level": [8, 9, 10, 11, 28, 52, 53, 58, 59, 60, 66, 67, 68, 71, 94, 104, 107, 109, 114, 117, 120, 127, 128, 142, 144, 147, 175, 184, 185, 191, 203, 242, 252, 262, 273, 289, 292, 310, 312], "librari": 198, "link": [49, 68, 93, 142, 236, 246, 256, 266, 280, 287, 303, 323, 325], "list": [1, 2, 4, 5, 6, 7, 18, 19, 22, 24, 25, 26, 27, 31, 32, 34, 35, 40, 42, 43, 48, 51, 58, 68, 85, 86, 87, 91, 92, 94, 99, 106, 113, 114, 115, 119, 123, 124, 125, 126, 132, 133, 134, 136, 137, 140, 141, 144, 154, 155, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 189, 190, 195, 196, 198, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 234, 245, 255, 265, 278, 279, 286, 301, 302, 317], "load": [99, 109, 323, 325], "load_data": [99, 109], "loc": 114, "local": 323, "locat": 324, "look": 325, "lookup": [99, 105], "lower": 186, "lt": 325, "luka": 321, "m": [24, 25, 105, 198], "m_a": 198, "m_b": 198, "mahalanobi": 198, "main": [99, 102], "maintain": 323, "make": 325, "manhattan": 198, "map": [16, 17, 52, 53, 234], "martin": 321, "match": 198, "matplotlib": [33, 44, 54, 325], "matrix": 198, "max": [123, 124, 133, 141, 142, 144, 186, 212, 213, 320], "max_dens": [199, 200], "max_dist": [256, 257, 266, 267, 288], "max_dxdi": [206, 207], "max_i": 198, "max_n_row": 287, "max_n_turbin": [134, 135], "max_values_constraint": [49, 72, 93, 142, 236, 246, 256, 266, 280, 287, 303], "max_values_float": [49, 73, 93, 142, 148, 236, 243, 246, 256, 263, 266, 274, 280, 282, 287, 293, 303, 313], "max_values_int": [49, 74, 93, 142, 149, 236, 246, 253, 256, 266, 275, 280, 287, 294, 303], "maxdens": [199, 200, 201, 202, 203, 204, 205, 320], "maxfarmpow": [132, 133, 318, 325], "maxgridspac": [206, 207, 208, 209, 210, 211, 320], "maxim": [42, 49, 72, 73, 74, 75, 93, 123, 124, 129, 132, 133, 134, 138, 140, 141, 142, 148, 149, 166, 167, 199, 204, 206, 210, 212, 216, 218, 222, 224, 228, 230, 232, 233, 235, 236, 243, 246, 253, 256, 257, 263, 266, 267, 274, 275, 280, 282, 287, 288, 293, 294, 303, 313, 318, 320, 325], "maximize_obj": [49, 75, 93, 142, 236, 246, 256, 266, 280, 287, 303], "maximize_pow": [132, 133, 325], "maximum": 198, "maxn": [224, 225], "maxnturbin": [134, 135, 136, 137, 138, 139, 318], "mdata": [99, 102, 103, 105, 109], "mean": [123, 124, 132, 133, 141, 198, 212, 213, 318, 320, 325], "memimadist": [212, 213, 214, 215, 216, 217, 320], "memori": [109, 198], "messag": 323, "metric": 198, "michen": 198, "mimamean": [212, 213], "min": [123, 124, 133, 141, 142, 144, 186, 212, 213, 320], "min_dens": [171, 172], "min_dist": [24, 25, 187, 188, 199, 200, 236, 237, 246, 247, 256, 257, 266, 267, 287, 288, 325], "min_dist_unit": [24, 25, 325], "min_spac": [287, 303, 309], "min_valu": [171, 172], "min_values_constraint": [49, 76, 93, 142, 236, 246, 256, 266, 280, 287, 303], "min_values_float": [49, 77, 93, 142, 150, 236, 244, 246, 256, 264, 266, 276, 280, 283, 287, 295, 303, 314], "min_values_int": [49, 78, 93, 142, 151, 236, 246, 254, 256, 266, 277, 280, 287, 296, 303], "mindist": [187, 188, 189, 190, 191, 192, 320], "mindistconstraint": [24, 25, 26, 27, 28, 29, 30, 318, 325], "minim": [24, 25, 49, 76, 77, 78, 93, 123, 124, 133, 140, 141, 142, 150, 151, 171, 172, 177, 187, 188, 200, 230, 236, 237, 244, 246, 247, 254, 256, 257, 264, 266, 267, 276, 277, 280, 283, 287, 288, 295, 296, 303, 309, 314, 318, 320, 325], "minimalmaxti": [140, 141, 318], "minimize_ti": [140, 141], "ministri": 323, "minkowski": 198, "mit": 323, "mix": 287, "model": [1, 22, 24, 31, 39, 42, 47, 93, 94, 99, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 117, 119, 120, 121, 123, 132, 134, 140, 144, 318, 325], "model_id": [99, 110], "model_kei": 144, "modifi": [99, 113, 318], "more": 198, "move": [99, 117, 325], "multipl": [323, 324], "must": [24, 318], "n": [14, 15, 82, 83, 161, 162, 166, 167, 177, 178, 198, 218, 219], "n_compon": [1, 9, 10, 13, 20, 21, 22, 24, 29, 30, 31, 37, 41, 42, 58, 59, 60, 67, 68, 123, 127, 129, 130, 131, 132, 134, 138, 139, 140, 156, 160, 161, 165, 166, 170, 171, 176, 177, 181, 182, 184, 185, 186, 187, 192, 193, 197, 199, 204, 205, 206, 210, 211, 212, 216, 217, 218, 222, 223, 224, 228, 229, 230, 232, 233, 235], "n_con": 79, "n_con_cmptn": 325, "n_constraint": [49, 61, 63, 64, 66, 67, 72, 76, 79, 93, 142, 236, 246, 256, 266, 280, 287, 289, 303, 310, 325], "n_eval": 325, "n_gen": 325, "n_grid": [266, 267, 287, 288], "n_max": [266, 267], "n_max_gen": 325, "n_obj": 80, "n_obj_cmptn": 325, "n_object": [49, 63, 64, 66, 75, 80, 93, 142, 236, 246, 256, 266, 280, 287, 289, 303, 310, 325], "n_point": [49, 51, 102, 240, 250, 260, 270], "n_pop": [6, 10, 27, 35, 57, 60, 64, 67, 90, 96, 98, 99, 100, 126, 137, 153, 159, 164, 169, 174, 180, 185, 190, 196, 202, 209, 215, 221, 227, 239, 249, 259, 269, 285, 298, 300, 316, 318], "n_proc": 325, "n_row_max": [266, 267, 288], "n_sel_compon": [4, 5, 6, 26, 27, 34, 35, 125, 126, 136, 137, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 189, 190, 195, 196, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227], "n_sel_turbin": [1, 22, 24, 31, 38, 42, 46, 49, 81, 93, 95, 96, 123, 132, 134, 140, 142, 152, 153, 280, 287, 297, 298, 303, 315, 316], "n_state": [49, 51, 93, 95, 96, 99, 102, 122, 142, 152, 153, 287, 297, 298, 303, 315, 316, 318], "n_turbin": [122, 156, 157, 187, 188, 236, 237, 246, 247, 256, 257, 325], "n_var": 68, "n_vars_float": [1, 4, 5, 6, 9, 10, 14, 20, 22, 24, 26, 27, 30, 31, 34, 35, 41, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 69, 73, 77, 82, 89, 90, 93, 95, 96, 97, 98, 123, 125, 126, 127, 131, 132, 134, 136, 137, 140, 142, 145, 148, 150, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 238, 239, 241, 243, 244, 246, 248, 249, 256, 258, 259, 261, 263, 264, 266, 268, 269, 271, 274, 276, 280, 281, 282, 283, 284, 285, 287, 289, 290, 293, 295, 297, 298, 299, 300, 303, 310, 311, 313, 314, 315, 316, 325], "n_vars_int": [1, 4, 5, 6, 9, 10, 15, 21, 22, 24, 26, 27, 31, 34, 35, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 70, 74, 78, 83, 89, 90, 93, 95, 96, 97, 98, 123, 125, 126, 127, 132, 134, 136, 137, 140, 142, 146, 149, 151, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 238, 239, 246, 248, 249, 251, 253, 254, 256, 258, 259, 266, 268, 269, 272, 275, 277, 280, 284, 285, 287, 289, 291, 294, 296, 297, 298, 299, 300, 303, 310, 315, 316, 325], "n_vr": 58, "name": [1, 2, 7, 16, 17, 18, 19, 22, 23, 24, 25, 31, 32, 39, 42, 43, 47, 49, 51, 84, 88, 91, 92, 93, 94, 95, 96, 99, 111, 113, 117, 120, 121, 123, 124, 132, 133, 134, 135, 140, 141, 142, 144, 152, 153, 154, 155, 156, 157, 161, 162, 166, 167, 171, 172, 177, 178, 182, 187, 188, 193, 194, 199, 200, 206, 207, 212, 213, 218, 219, 224, 225, 230, 231, 233, 234, 236, 245, 246, 255, 256, 265, 266, 278, 279, 280, 286, 287, 288, 297, 298, 301, 302, 303, 309, 315, 316, 317, 325], "name_str": 109, "nan": [4, 99, 103, 105], "ndarari": [240, 250, 260, 270], "ndarrai": [4, 20, 21, 30, 41, 49, 51, 58, 61, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 85, 86, 95, 96, 102, 122, 131, 144, 145, 146, 148, 149, 150, 151, 152, 153, 198, 240, 241, 243, 244, 250, 251, 253, 254, 260, 261, 263, 264, 270, 271, 272, 274, 275, 276, 277, 281, 282, 283, 290, 291, 293, 294, 295, 296, 297, 298, 311, 313, 314, 315, 316], "need": [105, 325], "new": [16, 17, 49, 56, 57, 93, 99, 111, 142, 236, 238, 239, 246, 248, 249, 256, 258, 259, 266, 268, 269, 280, 287, 303, 325], "new_branch": 323, "next": 325, "nice": 325, "non": [96, 153, 186, 198, 298, 316, 323], "none": [1, 2, 4, 5, 6, 22, 24, 25, 26, 27, 31, 32, 34, 35, 42, 43, 49, 51, 52, 53, 58, 68, 93, 99, 105, 106, 114, 117, 120, 123, 124, 125, 126, 132, 133, 134, 136, 137, 140, 141, 142, 144, 156, 157, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 188, 189, 190, 193, 195, 196, 198, 199, 200, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 280, 287, 288, 303, 325], "norm": 198, "normal": 198, "note": [287, 325], "notebook": [0, 322], "notic": 325, "now": 325, "np": [4, 5, 6, 9, 10, 26, 27, 34, 35, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 89, 90, 97, 98, 105, 125, 126, 127, 129, 136, 137, 138, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 184, 185, 186, 189, 190, 195, 196, 198, 201, 202, 204, 208, 209, 210, 214, 215, 216, 220, 221, 222, 226, 227, 228, 232, 235, 238, 239, 248, 249, 258, 259, 268, 269, 284, 285, 289, 299, 300, 310, 325], "nrel5mw": 325, "number": [1, 13, 14, 15, 22, 24, 29, 31, 37, 42, 49, 79, 80, 82, 83, 93, 96, 99, 118, 123, 130, 132, 134, 139, 140, 142, 153, 156, 157, 160, 161, 162, 165, 166, 167, 170, 171, 176, 177, 181, 182, 187, 188, 192, 193, 197, 198, 199, 205, 206, 211, 212, 217, 218, 219, 223, 224, 229, 230, 233, 234, 236, 237, 246, 247, 256, 257, 266, 267, 280, 287, 288, 298, 303, 316, 318, 320, 321, 325], "numer": [1, 22, 24, 31, 38, 42, 46, 49, 81, 93, 123, 132, 134, 140, 142, 280, 287, 303], "numpi": [4, 20, 21, 30, 41, 49, 51, 58, 61, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 85, 86, 95, 96, 102, 122, 131, 144, 145, 146, 148, 149, 150, 151, 152, 153, 198, 240, 241, 243, 244, 250, 251, 253, 254, 260, 261, 263, 264, 270, 271, 272, 274, 275, 276, 277, 281, 282, 283, 290, 291, 293, 294, 295, 296, 297, 298, 311, 313, 314, 315, 316, 325], "o": 325, "obj": [63, 64, 66, 67, 289, 310], "object": [1, 8, 11, 22, 24, 31, 42, 43, 49, 52, 53, 58, 63, 64, 66, 67, 68, 71, 75, 80, 85, 86, 93, 94, 99, 105, 109, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 156, 161, 166, 171, 175, 177, 182, 187, 193, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 246, 252, 256, 262, 266, 273, 280, 287, 289, 292, 303, 310, 312, 319, 325], "observ": 198, "obtain": [49, 68, 93, 142, 236, 246, 256, 266, 280, 287, 303], "off": 325, "offset_i": [303, 306], "offset_x": [303, 305], "ofixn": [218, 219, 220, 221, 222, 223, 320], "old": [16, 17], "omaxn": [224, 225, 226, 227, 228, 229, 230, 320], "ominn": [230, 231, 232, 320], "onc": 325, "one": 198, "onli": [58, 198, 325], "open": [321, 323], "opt": [0, 99, 318, 324, 325, 326], "opt2farm_vars_individu": [93, 95, 142, 152, 287, 297, 303, 315], "opt2farm_vars_popul": [93, 96, 142, 153, 287, 298, 303, 316], "optfarmvar": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 319], "optfunct": [182, 233], "optfunctionlist": [58, 68], "optim": [2, 9, 23, 25, 31, 32, 43, 49, 51, 55, 66, 89, 90, 93, 95, 96, 97, 98, 124, 127, 132, 133, 135, 140, 141, 142, 152, 153, 157, 162, 167, 172, 182, 188, 194, 198, 200, 207, 213, 219, 225, 231, 234, 236, 246, 256, 266, 280, 284, 285, 287, 289, 297, 298, 299, 300, 303, 310, 315, 316, 318, 319, 320, 321, 322, 323], "optimizer_pymoo": 325, "option": [2, 5, 6, 23, 25, 26, 27, 32, 34, 35, 43, 51, 52, 53, 58, 63, 64, 68, 94, 99, 105, 111, 114, 115, 117, 120, 124, 125, 126, 132, 133, 135, 136, 137, 140, 141, 143, 144, 147, 157, 158, 159, 162, 163, 164, 167, 168, 169, 172, 173, 174, 179, 180, 188, 189, 190, 194, 195, 196, 198, 200, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 234, 237, 240, 247, 250, 257, 260, 267, 270, 288, 292, 309, 312, 325], "order": [58, 68, 105, 325], "order_inv": 325, "order_ssel": 325, "org": 321, "origin": [96, 99, 100, 153, 198, 298, 316, 323], "other": [49, 89, 90, 93, 97, 98, 142, 280, 284, 285, 287, 299, 300, 303], "otherwis": [105, 234], "our": 325, "out": 198, "out_var": [99, 115], "output": [99, 102, 105, 112, 113, 115, 198, 325], "output_coord": [99, 112], "output_point_var": [99, 113], "output_var": [113, 325], "outside_whit": 325, "over": [198, 325], "overload": 58, "ow": 323, "p": [198, 323], "p_max": 325, "p_min": 325, "packag": [318, 323, 325], "page": 321, "pair": 198, "panda": 114, "paper": 321, "parallel": [99, 115, 198, 323, 325], "paramet": [49, 287, 303, 319, 325], "pareto": 318, "pars": [49, 84, 93, 142, 280, 287, 303], "pars_dist": 325, "parse_tvar": [49, 84, 93, 142, 280, 287, 303], "part": [109, 325], "partial_wak": 325, "particular": 323, "pass": 198, "pdata": [99, 102], "per": 287, "perform": 323, "person": 324, "pip": [324, 325, 326], "place": [144, 287, 303, 319, 325], "pleas": [318, 321, 323, 324, 326], "plot": [240, 250, 260, 270, 325], "plotli": [236, 240, 246, 250, 256, 260, 266, 270], "plt": 325, "point": [49, 51, 102, 103, 105, 198, 236, 237, 240, 246, 247, 250, 256, 257, 260, 266, 267, 270, 288, 320, 325], "pointwis": 198, "polygon": 325, "pop": [58, 68, 96, 153, 298, 316], "pop_siz": 325, "popstat": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 318], "popul": [1, 6, 10, 22, 24, 27, 31, 35, 42, 49, 57, 58, 60, 64, 67, 68, 93, 99, 100, 123, 126, 132, 134, 137, 140, 142, 156, 159, 161, 164, 166, 169, 171, 174, 177, 180, 182, 185, 187, 190, 193, 196, 199, 202, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 246, 249, 256, 259, 266, 269, 280, 287, 303, 318, 325], "posit": [1, 22, 280, 318, 319], "possibl": [1, 4, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 198, 199, 206, 212, 218, 224, 230, 233], "post_rotor": 94, "post_rotor_var": [93, 94], "power": [132, 318, 323, 325], "pre_rotor": [94, 144], "pre_rotor_var": [93, 94], "precis": 198, "predecessor": 323, "previou": 105, "previous": 68, "print": [1, 22, 24, 31, 39, 42, 47, 123, 132, 134, 140, 325], "print_info": 325, "print_model": [1, 22, 24, 31, 39, 42, 47, 123, 132, 134, 140], "prob_r": [63, 64, 85, 86], "prob_res_einsum_individu": [49, 85, 93, 142, 236, 246, 256, 266, 280, 287, 303], "prob_res_einsum_popul": [49, 86, 93, 142, 236, 246, 256, 266, 280, 287, 303], "prob_res_list": [49, 85, 86, 93, 142, 236, 246, 256, 266, 280, 287, 303], "probabl": 198, "probe": [49, 51], "problem": [1, 2, 5, 6, 9, 10, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 42, 43, 49, 51, 52, 53, 56, 57, 58, 63, 64, 66, 67, 68, 85, 86, 93, 123, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 325], "problem_par": 325, "problem_result": [1, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 42, 56, 57, 66, 67, 123, 125, 126, 127, 132, 134, 136, 137, 140, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 238, 239, 248, 249, 258, 259, 268, 269, 289, 310, 325], "problemdefaultfunc": 68, "process": 325, "product": 198, "project": 323, "properti": [1, 7, 12, 14, 15, 18, 19, 22, 24, 31, 36, 38, 40, 42, 45, 46, 48, 49, 55, 61, 62, 65, 72, 75, 76, 79, 80, 81, 82, 83, 87, 93, 99, 108, 110, 116, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "proport": 198, "provid": [99, 105, 109, 323, 325], "public": 323, "publicli": 323, "publish": 321, "pull": 323, "pure": [156, 161, 166, 171, 177, 187, 193, 199, 206, 212, 218, 224, 230, 236, 246, 319, 320], "purpos": 325, "push": 323, "pymoo": 325, "pyplot": [33, 44, 54, 240, 250, 260, 270, 325], "pytest": 326, "python": [198, 323, 325], "q": 198, "quasi": 198, "question": 325, "radiu": [1, 2], "rang": 114, "rao": 198, "read": 325, "reason": 109, "recov": [99, 120], "refer": 198, "reggridslayoutoptproblem": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 319], "regular": [256, 266, 287, 303, 319, 320], "regularlayoutoptproblem": [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319], "remot": 323, "renam": [1, 16, 17, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "rename_vars_float": [1, 16, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "rename_vars_int": [1, 17, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "render": 325, "repeat": 144, "replac": 324, "report": 323, "repositori": [322, 323, 324, 326], "repr": [99, 101], "request": 323, "requir": [325, 326], "research": 323, "reset": [99, 114], "resolut": 325, "respect": 198, "result": [5, 6, 9, 10, 26, 27, 34, 35, 49, 56, 57, 59, 60, 63, 64, 66, 67, 85, 86, 93, 102, 115, 125, 126, 127, 136, 137, 142, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 184, 185, 189, 190, 195, 196, 198, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 236, 238, 239, 246, 248, 249, 256, 258, 259, 266, 268, 269, 280, 287, 289, 303, 310, 325], "ret_prob_r": [49, 63, 64, 93, 142, 236, 246, 256, 266, 280, 287, 303], "return": [1, 22, 24, 31, 42, 99, 101, 117, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 184, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266], "rho": 325, "roger": 198, "rogerstanimoto": 198, "roject": 323, "root": 325, "rose": 325, "rotor": [1, 2, 144, 157, 325], "rotor_model": 325, "row": [198, 266, 267, 287, 288], "rule": [123, 124, 133, 141], "run": [89, 90, 97, 98, 99, 111, 116, 117, 120, 284, 285, 288, 299, 300, 325, 326], "run_calcul": [99, 115], "runner": 288, "russel": 198, "russellrao": 198, "same": [144, 198], "sampl": 325, "save": 198, "sbeta_factor": 325, "scalar": 198, "scale": [123, 124, 133, 141, 212, 213], "schmidt": 321, "schmidt2023": 321, "scipi": 198, "search": 105, "section": 318, "see": [198, 318, 325], "seed": 325, "sel": [99, 117, 120, 142, 144], "sel_turbin": [1, 2, 22, 24, 25, 31, 32, 40, 42, 43, 48, 49, 51, 87, 93, 123, 132, 134, 140, 142, 280, 287, 303], "select": [1, 2, 4, 5, 6, 22, 24, 25, 26, 27, 31, 32, 34, 35, 38, 40, 42, 43, 46, 48, 49, 51, 58, 68, 81, 87, 93, 99, 111, 114, 117, 120, 123, 125, 126, 132, 134, 136, 137, 140, 142, 144, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 189, 190, 195, 196, 201, 202, 208, 209, 214, 215, 220, 221, 226, 227, 280, 287, 303, 319, 325], "self": [74, 78, 99, 101, 105, 109, 149, 151, 240, 250, 260, 270, 275, 277, 294, 296], "serv": 105, "set": [99, 117, 120, 325], "set_run": [99, 117], "setup": [318, 325], "setup_par": 325, "seuclidean": 198, "sever": [287, 319], "shannon": 198, "shape": [4, 5, 6, 9, 10, 20, 21, 26, 27, 30, 34, 35, 41, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 89, 90, 95, 96, 97, 98, 102, 122, 125, 126, 127, 129, 131, 136, 137, 138, 145, 146, 148, 149, 150, 151, 152, 153, 158, 159, 163, 164, 168, 169, 173, 174, 179, 180, 184, 185, 186, 189, 190, 195, 196, 201, 202, 204, 208, 209, 210, 214, 215, 216, 220, 221, 222, 226, 227, 228, 232, 235, 238, 239, 240, 241, 243, 244, 248, 249, 250, 251, 253, 254, 258, 259, 260, 261, 263, 264, 268, 269, 270, 271, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 310, 311, 313, 314, 315, 316], "shortli": 325, "should": [102, 109, 198, 325], "show": 325, "silent": [8, 9, 10, 11, 28, 52, 53, 58, 59, 60, 66, 67, 68, 71, 94, 104, 107, 109, 114, 117, 120, 127, 128, 147, 175, 184, 185, 191, 203, 242, 252, 262, 273, 289, 292, 310, 312], "singl": [1, 5, 22, 24, 26, 31, 34, 42, 49, 63, 93, 102, 123, 125, 132, 134, 136, 140, 142, 156, 158, 161, 163, 166, 168, 171, 173, 177, 179, 182, 187, 189, 193, 195, 199, 201, 206, 208, 212, 214, 218, 220, 224, 226, 230, 233, 236, 246, 256, 266, 280, 287, 303], "site": 325, "size": [99, 100, 118, 325], "slice": 114, "smart": 323, "smdl": 119, "smfp": [99, 105], "smoother": 325, "sneath": 198, "softwar": [321, 323], "sokal": 198, "sokalmichen": 198, "sokalsneath": 198, "solv": 325, "solver": 325, "some": [198, 325], "sourc": [1, 2, 5, 6, 13, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 42, 43, 44, 47, 49, 51, 54, 56, 57, 71, 84, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 107, 109, 113, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323], "space": [172, 198, 200, 206, 246, 247, 287, 303, 309, 320], "spacing_i": [303, 308], "spacing_x": [303, 307], "spatial": [24, 198, 318], "specif": [99, 121, 325], "specifi": [234, 325], "speed": 325, "sqeuclidean": 198, "sqrt": 198, "squar": 198, "standard": [198, 323, 325], "start": [99, 115], "stash": [99, 117, 120], "state": [96, 99, 100, 106, 111, 114, 118, 122, 124, 133, 141, 144, 153, 298, 316, 318, 325], "state_target": 105, "state_target_tpoint": 105, "state_turbin": 105, "states_loc": [99, 114], "states_sel": [99, 114], "states_typ": [99, 111], "statesroseplotoutput": 325, "statest": 325, "static": 325, "statist": [99, 122], "statu": [99, 117, 120], "stoevesandt": 321, "store": [109, 198], "str": [2, 3, 7, 16, 17, 18, 19, 23, 24, 25, 32, 43, 51, 52, 53, 68, 84, 88, 91, 92, 94, 102, 105, 111, 112, 113, 115, 121, 123, 124, 132, 133, 135, 140, 141, 144, 154, 155, 157, 162, 167, 172, 188, 194, 198, 200, 207, 213, 219, 225, 231, 234, 240, 245, 250, 255, 260, 265, 270, 278, 279, 286, 288, 301, 302, 309, 317], "string": [1, 3, 22, 24, 31, 42, 49, 93, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 198, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "sub": [94, 99, 119, 144, 325], "sub_model": [99, 119], "subject": [55, 99, 109], "subplot": 325, "subsequ": 318, "subset": [114, 117, 120], "subtract": 325, "success": 325, "successfulli": 325, "sum": [49, 79, 80, 85, 86, 93, 123, 124, 133, 141, 142, 198, 236, 246, 256, 266, 280, 287, 303], "sum_i": 198, "super": [94, 147, 292, 312], "suppli": 198, "support": [0, 198, 323], "sure": 325, "switch": [123, 124, 133, 141, 325], "synonym": 198, "syntax": 198, "t": [105, 198], "t0": 325, "t1": 325, "t2": 325, "t3": 325, "t4": 325, "t5": 325, "t6": 325, "t7": 325, "t8": 325, "t9": 325, "tackl": 325, "tanimoto": 198, "target": [99, 103, 105], "task": 325, "tdata": [99, 103, 105], "term_par": 325, "termin": 325, "test": [0, 323], "th": 198, "thei": 325, "them": 198, "thi": [1, 2, 68, 89, 90, 97, 98, 99, 102, 115, 117, 120, 144, 198, 236, 246, 256, 266, 284, 285, 287, 299, 300, 325], "those": 198, "three": 323, "through": 323, "throw": 105, "thrown": 198, "ti": [140, 318, 325], "time": [99, 111, 198, 318], "titl": [236, 240, 246, 250, 256, 260, 266, 270, 321], "tname": 325, "tol": [178, 182, 183], "toler": [49, 61, 93, 142, 178, 182, 183, 236, 246, 256, 266, 280, 287, 303], "total": [49, 79, 80, 93, 99, 118, 142, 236, 246, 256, 266, 280, 287, 303, 325], "tracker": 323, "translat": [93, 95, 96, 142, 152, 153, 287, 297, 298, 303, 315, 316], "true": [12, 55, 105, 108, 116, 134, 135, 240, 250, 260, 270, 325], "true_circl": [240, 250, 260, 270], "tupl": [111, 112, 115, 143], "turbin": [1, 2, 22, 24, 25, 31, 32, 38, 40, 42, 43, 46, 48, 49, 51, 55, 81, 84, 87, 88, 93, 123, 124, 132, 133, 134, 140, 141, 142, 144, 157, 161, 162, 166, 167, 171, 172, 177, 188, 199, 218, 219, 224, 230, 236, 237, 246, 247, 256, 257, 280, 287, 303, 309, 318, 319, 320, 325], "turbine_i": [49, 84, 88, 93, 142, 280, 287, 303], "turbine_model": 325, "turrbin": [134, 318], "tvar": [49, 88, 93, 142, 280, 287, 303], "tvr": [49, 84, 93, 142, 280, 287, 303], "two": [109, 198, 325], "typ": [142, 144], "type": [99, 110, 144, 198, 325], "typic": [68, 115], "u": [198, 325], "u2": 325, "u_i": 198, "unbound": [73, 74, 77, 78, 148, 149, 150, 151, 243, 244, 263, 264, 274, 275, 276, 277, 282, 283, 293, 294, 295, 296, 313, 314], "under": [109, 323], "underli": [1, 2, 5, 22, 23, 24, 25, 26, 31, 32, 34, 42, 43, 123, 124, 125, 132, 133, 134, 135, 136, 140, 141, 156, 157, 158, 161, 162, 163, 166, 167, 168, 171, 172, 173, 177, 179, 182, 187, 188, 189, 193, 194, 195, 199, 200, 201, 206, 207, 208, 212, 213, 214, 218, 219, 220, 224, 225, 226, 230, 231, 233, 234], "uniform": [142, 144], "uniqu": [99, 110], "unit": [24, 25, 198], "unset_run": [99, 117, 120], "unweight": 198, "upcast": 105, "updat": [0, 49, 89, 90, 93, 97, 98, 142, 280, 284, 285, 287, 299, 300, 303, 325], "update_problem_individu": [49, 89, 93, 97, 142, 280, 284, 287, 299, 303], "update_problem_popul": [49, 90, 93, 98, 142, 280, 285, 287, 300, 303], "upper": 186, "url": 321, "us": [1, 2, 4, 49, 73, 74, 77, 78, 89, 90, 93, 97, 98, 142, 148, 149, 150, 151, 198, 234, 243, 244, 263, 264, 274, 275, 276, 277, 280, 282, 283, 284, 285, 287, 293, 294, 295, 296, 299, 300, 303, 313, 314, 318, 324, 325], "user": [198, 323, 325], "util": [1, 2, 236, 237, 246, 247, 256, 257, 266, 267, 325], "v": [99, 121, 198], "v_i": 198, "valid": [134, 135, 193, 194, 195, 196, 197, 236, 237, 240, 246, 250, 256, 260, 266, 270, 320], "valu": [1, 4, 5, 6, 9, 10, 16, 17, 22, 24, 26, 27, 31, 34, 35, 42, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 89, 90, 93, 94, 95, 96, 97, 98, 102, 117, 120, 123, 125, 126, 127, 132, 134, 136, 137, 140, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 184, 185, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 236, 238, 239, 241, 243, 244, 246, 248, 249, 251, 253, 254, 256, 258, 259, 261, 263, 264, 266, 268, 269, 271, 272, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 303, 310, 311, 313, 314, 315, 316, 318], "valueerror": 198, "var": [1, 4, 22, 24, 31, 42, 49, 68, 84, 88, 93, 94, 95, 96, 99, 121, 123, 132, 134, 140, 142, 152, 153, 156, 161, 166, 171, 177, 182, 187, 193, 198, 199, 206, 212, 218, 224, 230, 233, 280, 287, 297, 298, 303, 315, 316], "var2col": 325, "var_names_float": [1, 18, 22, 24, 31, 42, 49, 91, 93, 123, 132, 134, 140, 142, 154, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 245, 246, 256, 265, 266, 278, 280, 286, 287, 301, 303, 317], "var_names_int": [1, 19, 22, 24, 31, 42, 49, 92, 93, 123, 132, 134, 140, 142, 155, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 255, 256, 266, 279, 280, 287, 302, 303], "vardeps_float": [1, 20, 22, 24, 30, 31, 41, 42, 123, 131, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "vardeps_int": [1, 21, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "variabl": [1, 4, 5, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 30, 31, 34, 35, 41, 42, 49, 52, 53, 56, 57, 58, 63, 64, 66, 67, 68, 69, 70, 73, 74, 77, 78, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 113, 115, 121, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 198, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 234, 236, 238, 239, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 310, 311, 313, 314, 315, 316, 317, 318, 319, 325], "varianc": 198, "varmap": [1, 16, 17, 22, 24, 31, 42, 123, 132, 134, 140, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233], "varmap_float": [49, 52, 53, 93, 142, 236, 246, 256, 266, 280, 287, 303], "varmap_int": [49, 52, 53, 93, 142, 236, 246, 256, 266, 280, 287, 303], "vars_float": [1, 4, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 89, 90, 93, 95, 96, 97, 98, 123, 125, 126, 127, 132, 134, 136, 137, 140, 142, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 236, 238, 239, 246, 248, 249, 256, 258, 259, 266, 268, 269, 280, 284, 285, 287, 289, 297, 298, 299, 300, 303, 310, 315, 316], "vars_int": [1, 4, 5, 6, 9, 10, 22, 24, 26, 27, 31, 34, 35, 42, 49, 56, 57, 58, 63, 64, 66, 67, 68, 89, 90, 93, 95, 96, 97, 98, 123, 125, 126, 127, 132, 134, 136, 137, 140, 142, 152, 153, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 177, 179, 180, 182, 187, 189, 190, 193, 195, 196, 199, 201, 202, 206, 208, 209, 212, 214, 215, 218, 220, 221, 224, 226, 227, 230, 233, 236, 238, 239, 246, 248, 249, 256, 258, 259, 266, 268, 269, 280, 284, 285, 287, 289, 297, 298, 299, 300, 303, 310, 315, 316], "vector": [58, 68, 99, 198, 318, 323, 325], "verbos": [1, 8, 9, 10, 11, 22, 24, 28, 31, 42, 49, 52, 53, 58, 59, 60, 66, 67, 68, 71, 93, 94, 99, 104, 107, 109, 114, 117, 120, 123, 127, 128, 132, 134, 140, 142, 147, 156, 161, 166, 171, 175, 177, 182, 184, 185, 187, 191, 193, 199, 203, 206, 212, 218, 224, 230, 233, 236, 242, 246, 252, 256, 262, 266, 273, 280, 287, 289, 292, 303, 310, 312, 325], "veri": 325, "version": 198, "vi": 198, "via": [58, 68, 99, 114, 115, 318, 323, 324, 325], "violat": [178, 182, 183], "visual": 325, "vnames_float": 234, "vnames_int": 234, "vollmer": 321, "volum": 321, "vr": 58, "vstack": 198, "w": [105, 198, 325], "wai": 324, "wake": [105, 236, 246, 319, 320, 323, 325], "wake_model": 325, "want": 324, "wd": 325, "we": [198, 323, 325], "weight": [85, 86, 99, 122, 198, 213, 325], "well": [323, 325], "were": 68, "where": [198, 325], "which": [58, 68, 99, 113, 123, 124, 133, 141, 144, 198, 323, 325], "whole": [49, 57, 93, 142, 236, 239, 246, 249, 256, 259, 266, 269, 280, 287, 303], "whose": [], "wind": [1, 22, 24, 31, 36, 42, 45, 49, 65, 93, 123, 132, 134, 140, 142, 236, 246, 256, 266, 280, 287, 303, 318, 319, 323, 325], "wind_rose_bremen": 325, "windfarm": [1, 24, 36, 45, 65, 325], "wise": 198, "wish": 325, "within": [236, 237, 246, 247, 256, 257, 266, 267, 320, 325], "without": 325, "workflow": 0, "would": 198, "wrt": [58, 68], "x": [198, 323, 325], "x_0000": 325, "x_0001": 325, "x_0002": 325, "x_0003": 325, "x_0004": 325, "x_0005": 325, "x_0006": 325, "x_0007": 325, "x_0008": 325, "x_0009": 325, "x_i": 198, "xa": 198, "xarrai": [99, 115, 325], "xb": 198, "xmax": 325, "xmin": 325, "xtol": 325, "xy": [236, 240, 246, 250, 256, 260, 266, 270, 325], "xy_bas": 325, "xy_step": 325, "y": [198, 325], "y_0000": 325, "y_0001": 325, "y_0002": 325, "y_0003": 325, "y_0004": 325, "y_0005": 325, "y_0006": 325, "y_0007": 325, "y_0008": 325, "y_0009": 325, "yaw": 325, "year": 321, "yield": [321, 323], "ymax": 325, "ymin": 325, "you": [198, 324], "your": [323, 324], "yule": 198, "zero": 198, "zorder": 325}, "titles": ["History", "foxes_opt.constraints.AreaGeometryConstraint", "foxes_opt.constraints.AreaGeometryConstraint.__init__", "foxes_opt.constraints.AreaGeometryConstraint.__str__", "foxes_opt.constraints.AreaGeometryConstraint.ana_deriv", "foxes_opt.constraints.AreaGeometryConstraint.calc_individual", "foxes_opt.constraints.AreaGeometryConstraint.calc_population", "foxes_opt.constraints.AreaGeometryConstraint.component_names", "foxes_opt.constraints.AreaGeometryConstraint.finalize", "foxes_opt.constraints.AreaGeometryConstraint.finalize_individual", "foxes_opt.constraints.AreaGeometryConstraint.finalize_population", "foxes_opt.constraints.AreaGeometryConstraint.initialize", "foxes_opt.constraints.AreaGeometryConstraint.initialized", "foxes_opt.constraints.AreaGeometryConstraint.n_components", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.n_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_float", "foxes_opt.constraints.AreaGeometryConstraint.rename_vars_int", "foxes_opt.constraints.AreaGeometryConstraint.var_names_float", "foxes_opt.constraints.AreaGeometryConstraint.var_names_int", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_float", "foxes_opt.constraints.AreaGeometryConstraint.vardeps_int", "foxes_opt.constraints.FarmBoundaryConstraint", "foxes_opt.constraints.FarmBoundaryConstraint.__init__", "foxes_opt.constraints.MinDistConstraint", "foxes_opt.constraints.MinDistConstraint.__init__", "foxes_opt.constraints.MinDistConstraint.calc_individual", "foxes_opt.constraints.MinDistConstraint.calc_population", "foxes_opt.constraints.MinDistConstraint.initialize", "foxes_opt.constraints.MinDistConstraint.n_components", "foxes_opt.constraints.MinDistConstraint.vardeps_float", "foxes_opt.core.FarmConstraint", "foxes_opt.core.FarmConstraint.__init__", "foxes_opt.core.FarmConstraint.add_to_layout_figure", "foxes_opt.core.FarmConstraint.calc_individual", "foxes_opt.core.FarmConstraint.calc_population", "foxes_opt.core.FarmConstraint.farm", "foxes_opt.core.FarmConstraint.n_components", "foxes_opt.core.FarmConstraint.n_sel_turbines", "foxes_opt.core.FarmConstraint.print_models", "foxes_opt.core.FarmConstraint.sel_turbines", "foxes_opt.core.FarmConstraint.vardeps_float", "foxes_opt.core.FarmObjective", "foxes_opt.core.FarmObjective.__init__", "foxes_opt.core.FarmObjective.add_to_layout_figure", "foxes_opt.core.FarmObjective.farm", "foxes_opt.core.FarmObjective.n_sel_turbines", "foxes_opt.core.FarmObjective.print_models", "foxes_opt.core.FarmObjective.sel_turbines", "foxes_opt.core.FarmOptProblem", "foxes_opt.core.FarmOptProblem.INT_INF", "foxes_opt.core.FarmOptProblem.__init__", "foxes_opt.core.FarmOptProblem.add_constraint", "foxes_opt.core.FarmOptProblem.add_objective", "foxes_opt.core.FarmOptProblem.add_to_layout_figure", "foxes_opt.core.FarmOptProblem.all_turbines", "foxes_opt.core.FarmOptProblem.apply_individual", "foxes_opt.core.FarmOptProblem.apply_population", "foxes_opt.core.FarmOptProblem.calc_gradients", "foxes_opt.core.FarmOptProblem.check_constraints_individual", "foxes_opt.core.FarmOptProblem.check_constraints_population", "foxes_opt.core.FarmOptProblem.constraints_tol", "foxes_opt.core.FarmOptProblem.counter", "foxes_opt.core.FarmOptProblem.evaluate_individual", "foxes_opt.core.FarmOptProblem.evaluate_population", "foxes_opt.core.FarmOptProblem.farm", "foxes_opt.core.FarmOptProblem.finalize_individual", "foxes_opt.core.FarmOptProblem.finalize_population", "foxes_opt.core.FarmOptProblem.get_gradients", "foxes_opt.core.FarmOptProblem.initial_values_float", "foxes_opt.core.FarmOptProblem.initial_values_int", "foxes_opt.core.FarmOptProblem.initialize", "foxes_opt.core.FarmOptProblem.max_values_constraints", "foxes_opt.core.FarmOptProblem.max_values_float", "foxes_opt.core.FarmOptProblem.max_values_int", "foxes_opt.core.FarmOptProblem.maximize_objs", "foxes_opt.core.FarmOptProblem.min_values_constraints", "foxes_opt.core.FarmOptProblem.min_values_float", "foxes_opt.core.FarmOptProblem.min_values_int", "foxes_opt.core.FarmOptProblem.n_constraints", "foxes_opt.core.FarmOptProblem.n_objectives", "foxes_opt.core.FarmOptProblem.n_sel_turbines", "foxes_opt.core.FarmOptProblem.n_vars_float", "foxes_opt.core.FarmOptProblem.n_vars_int", "foxes_opt.core.FarmOptProblem.parse_tvar", "foxes_opt.core.FarmOptProblem.prob_res_einsum_individual", "foxes_opt.core.FarmOptProblem.prob_res_einsum_population", "foxes_opt.core.FarmOptProblem.sel_turbines", "foxes_opt.core.FarmOptProblem.tvar", "foxes_opt.core.FarmOptProblem.update_problem_individual", "foxes_opt.core.FarmOptProblem.update_problem_population", "foxes_opt.core.FarmOptProblem.var_names_float", "foxes_opt.core.FarmOptProblem.var_names_int", "foxes_opt.core.FarmVarsProblem", "foxes_opt.core.FarmVarsProblem.initialize", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_individual", "foxes_opt.core.FarmVarsProblem.opt2farm_vars_population", "foxes_opt.core.FarmVarsProblem.update_problem_individual", "foxes_opt.core.FarmVarsProblem.update_problem_population", "foxes_opt.core.PopStates", "foxes_opt.core.PopStates.__init__", "foxes_opt.core.PopStates.__repr__", "foxes_opt.core.PopStates.calculate", "foxes_opt.core.PopStates.ensure_variables", "foxes_opt.core.PopStates.finalize", "foxes_opt.core.PopStates.get_data", "foxes_opt.core.PopStates.index", "foxes_opt.core.PopStates.initialize", "foxes_opt.core.PopStates.initialized", "foxes_opt.core.PopStates.load_data", "foxes_opt.core.PopStates.model_id", "foxes_opt.core.PopStates.new", "foxes_opt.core.PopStates.output_coords", "foxes_opt.core.PopStates.output_point_vars", "foxes_opt.core.PopStates.reset", "foxes_opt.core.PopStates.run_calculation", "foxes_opt.core.PopStates.running", "foxes_opt.core.PopStates.set_running", "foxes_opt.core.PopStates.size", "foxes_opt.core.PopStates.sub_models", "foxes_opt.core.PopStates.unset_running", "foxes_opt.core.PopStates.var", "foxes_opt.core.PopStates.weights", "foxes_opt.objectives.FarmVarObjective", "foxes_opt.objectives.FarmVarObjective.__init__", "foxes_opt.objectives.FarmVarObjective.calc_individual", "foxes_opt.objectives.FarmVarObjective.calc_population", "foxes_opt.objectives.FarmVarObjective.finalize_individual", "foxes_opt.objectives.FarmVarObjective.initialize", "foxes_opt.objectives.FarmVarObjective.maximize", "foxes_opt.objectives.FarmVarObjective.n_components", "foxes_opt.objectives.FarmVarObjective.vardeps_float", "foxes_opt.objectives.MaxFarmPower", "foxes_opt.objectives.MaxFarmPower.__init__", "foxes_opt.objectives.MaxNTurbines", "foxes_opt.objectives.MaxNTurbines.__init__", "foxes_opt.objectives.MaxNTurbines.calc_individual", "foxes_opt.objectives.MaxNTurbines.calc_population", "foxes_opt.objectives.MaxNTurbines.maximize", "foxes_opt.objectives.MaxNTurbines.n_components", "foxes_opt.objectives.MinimalMaxTI", "foxes_opt.objectives.MinimalMaxTI.__init__", "foxes_opt.problems.OptFarmVars", "foxes_opt.problems.OptFarmVars.__init__", "foxes_opt.problems.OptFarmVars.add_var", "foxes_opt.problems.OptFarmVars.initial_values_float", "foxes_opt.problems.OptFarmVars.initial_values_int", "foxes_opt.problems.OptFarmVars.initialize", "foxes_opt.problems.OptFarmVars.max_values_float", "foxes_opt.problems.OptFarmVars.max_values_int", "foxes_opt.problems.OptFarmVars.min_values_float", "foxes_opt.problems.OptFarmVars.min_values_int", "foxes_opt.problems.OptFarmVars.opt2farm_vars_individual", "foxes_opt.problems.OptFarmVars.opt2farm_vars_population", "foxes_opt.problems.OptFarmVars.var_names_float", "foxes_opt.problems.OptFarmVars.var_names_int", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Boundary.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CFixN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.CMinDensity.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.CMinN.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.check_population", "foxes_opt.problems.layout.geom_layouts.constraints.Constraint.get_bounds", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.initialize", "foxes_opt.problems.layout.geom_layouts.constraints.MinDist.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.Valid", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.__init__", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_individual", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.calc_population", "foxes_opt.problems.layout.geom_layouts.constraints.Valid.n_components", "foxes_opt.problems.layout.geom_layouts.constraints.cdist", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.initialize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxDensity.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MaxGridSpacing.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.MeMiMaDist.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OFixN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_individual", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.calc_population", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.OMaxN.n_components", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.OMinN.maximize", "foxes_opt.problems.layout.geom_layouts.objectives.Objective", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.__init__", "foxes_opt.problems.layout.geom_layouts.objectives.Objective.maximize", "foxes_opt.problems.layout.geom_layouts.GeomLayout", "foxes_opt.problems.layout.geom_layouts.GeomLayout.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayout.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayout.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayout.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomLayout.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.__init__", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.initialize", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomLayoutGridded.var_names_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrid.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.__init__", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_individual", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.apply_population", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.get_fig", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initial_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.initialize", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.max_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.min_values_int", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_float", "foxes_opt.problems.layout.geom_layouts.GeomRegGrids.var_names_int", "foxes_opt.problems.layout.FarmLayoutOptProblem", "foxes_opt.problems.layout.FarmLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.FarmLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.FarmLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initial_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.max_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.min_values_int", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_individual", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.update_problem_population", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_float", "foxes_opt.problems.layout.RegGridsLayoutOptProblem.var_names_int", "foxes_opt.problems.layout.RegularLayoutOptProblem", "foxes_opt.problems.layout.RegularLayoutOptProblem.ANGLE", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.OFFSET_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_X", "foxes_opt.problems.layout.RegularLayoutOptProblem.SPACING_Y", "foxes_opt.problems.layout.RegularLayoutOptProblem.__init__", "foxes_opt.problems.layout.RegularLayoutOptProblem.finalize_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.initial_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.initialize", "foxes_opt.problems.layout.RegularLayoutOptProblem.max_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.min_values_float", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_individual", "foxes_opt.problems.layout.RegularLayoutOptProblem.opt2farm_vars_population", "foxes_opt.problems.layout.RegularLayoutOptProblem.var_names_float", "API", "foxes_opt.problems", "foxes_opt.problems.layout.geom_layouts", "Citation", "Examples", "Welcome to <em>foxes-opt</em>", "Installation", "Layout optimization", "Testing"], "titleterms": {"1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "acknowledg": 323, "api": 318, "attribut": [1, 24, 49, 99, 123, 134, 182, 236, 246, 256, 266, 287, 303], "citat": 321, "constraint": [318, 320], "content": 323, "contribut": 323, "core": 318, "develop": 324, "exampl": [198, 322], "fox": 323, "foxes_opt": [318, 319, 320], "geom_layout": [319, 320], "histori": 0, "instal": 324, "layout": [319, 320, 325], "licens": 323, "member": [1, 22, 24, 31, 42, 49, 93, 99, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "note": 198, "object": [318, 320], "opt": 323, "optim": 325, "paramet": [2, 4, 5, 6, 8, 9, 10, 11, 16, 17, 23, 25, 26, 27, 28, 32, 33, 34, 35, 43, 44, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 71, 84, 85, 86, 88, 89, 90, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 109, 111, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 127, 128, 132, 133, 135, 136, 137, 140, 141, 143, 144, 147, 152, 153, 157, 158, 159, 162, 163, 164, 167, 168, 169, 172, 173, 174, 175, 178, 179, 180, 183, 184, 185, 188, 189, 190, 191, 194, 195, 196, 198, 200, 201, 202, 203, 207, 208, 209, 213, 214, 215, 219, 220, 221, 225, 226, 227, 231, 234, 237, 238, 239, 240, 242, 247, 248, 249, 250, 252, 257, 258, 259, 260, 262, 267, 268, 269, 270, 273, 284, 285, 288, 289, 292, 297, 298, 299, 300, 309, 310, 312, 315, 316], "problem": [318, 319, 320], "public": [1, 22, 24, 31, 42, 49, 93, 99, 123, 132, 134, 140, 142, 156, 161, 166, 171, 177, 182, 187, 193, 199, 206, 212, 218, 224, 230, 233, 236, 246, 256, 266, 280, 287, 303], "rais": 198, "return": [3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 26, 27, 29, 30, 34, 35, 36, 37, 38, 40, 41, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 95, 96, 102, 106, 108, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 125, 126, 127, 129, 130, 131, 136, 137, 138, 139, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 163, 164, 165, 168, 169, 170, 173, 174, 176, 179, 180, 181, 185, 186, 189, 190, 192, 195, 196, 197, 198, 201, 202, 204, 205, 208, 209, 210, 211, 214, 215, 216, 217, 220, 221, 222, 223, 226, 227, 228, 229, 232, 235, 238, 239, 240, 241, 243, 244, 245, 248, 249, 250, 251, 253, 254, 255, 258, 259, 260, 261, 263, 264, 265, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 310, 311, 313, 314, 315, 316, 317], "standard": 324, "test": 326, "user": 324, "v0": 0, "welcom": 323}})